/* Generated by Together */

package com.dimata.common.form.search;

/* package javax */
import javax.servlet.*;
import javax.servlet.http.*;

/* package java */
import java.util.*;

/* package dimata */
import com.dimata.util.*;

/* import qdep */
import com.dimata.qdep.form.*;

/* import common */
import com.dimata.common.entity.search.*;
//import com.dimata.common.entity.contact.*;

public class FrmSrcContactList extends FRMHandler implements I_FRMInterface, I_FRMType {

    public static final String FRM_SEARCH_CONTACT_LIST  = "FRM_SEARCH_CONTACT_LIST";
    public static final int FRM_FIELD_TYPE		= 0;
    public static final int FRM_FIELD_CODE		= 1;
    public static final int FRM_FIELD_NAME		= 2;
    public static final int FRM_FIELD_ADDRESS		= 3;
    public static final int FRM_FIELD_ORDER		= 4;
    public static final int FRM_FIELD_CITY		= 5;
    public static final int FRM_FIELD_PROVINCE		= 6;
    public static final int FRM_FIELD_COUNTRY		= 7;
    public static final int FRM_FIELD_SPEC_TYPE		= 8;

    public static String[] fieldNames = {
       "FRM_SEARCH_TYPE",
       "FRM_SEARCH_CODE",
       "FRM_SEARCH_NAME",
       "FRM_SEARCH_ADDRESS",
       "FRM_SEARCH_ORDERBY",
       "FRM_FIELD_CITY",
       "FRM_FIELD_PROVINCE",
       "FRM_FIELD_COUNTRY",
       "FRM_FIELD_SPEC_TYPE"
    } ;

    public static int[] fieldTypes = {
       TYPE_COLLECTION,
       TYPE_STRING,
       TYPE_STRING,
       TYPE_STRING,
       TYPE_INT,
       TYPE_STRING,
       TYPE_STRING,
       TYPE_STRING,
       TYPE_INT
    };

    public static final int SORT_BY_TYPE	= 0;
    public static final int SORT_BY_CODE	= 1;
    public static final int SORT_BY_NAME	= 2;
    public static final int SORT_BY_ADDRESS	= 3;
    public static final int SORT_BY_CITY	= 4;
    public static final int SORT_BY_PROVINCE	= 5;
    public static final int SORT_BY_COUNTRY	= 6;
    
    public static String[][] sortFieldNames = {
        {"Tipe Kontak","Kode","Nama","Alamat","Kota","Propinsi","Negara"},
        {"Contact Type","Code","Name","Address","Town","Province","Country"}       
    };

     public static final int[] orderValue = { 
         0,
         1,
         2,
         3,
         4,
         5,
         7
     };
     
     public static final String[][] orderKey = {
         {"Kode","Nama","Alamat","Kota","Propinsi","Negara","Tipe Kontak"},
         {"Code","Name","Address","Town","Province","Country","Contact Class"}
     };

     public static Vector getOrderValue(){
        Vector order = new Vector();
        for(int i=0;i<orderValue.length;i++){
            order.add(String.valueOf(orderValue[i]));
        }
        return order;
     }

    public static Vector getOrderKey(int language){
        Vector order = new Vector();
        for(int i=0; i<orderKey[language].length; i++){
            order.add(orderKey[language][i]);
        }
        return order;
    }
    
     public static Vector getOrderVal(){
        Vector order = new Vector();
        for(int i=0;i<(orderValue.length - 1);i++){
            order.add(String.valueOf(orderValue[i]));
        }
        return order;
     }

    public static Vector getOrdKey(int language){
        Vector order = new Vector();
        for(int i=0; i<(orderKey[language].length - 1); i++){
            order.add(orderKey[language][i]);
        }
        return order;
    }
    
    private SrcContactList srcContactList = new SrcContactList();

    public FrmSrcContactList(){ 
    }
    
    public FrmSrcContactList(SrcContactList srcContactList){
            this.srcContactList = srcContactList;
    }   
    
    public FrmSrcContactList(HttpServletRequest request, SrcContactList srcContactList){
            super(new FrmSrcContactList(srcContactList), request);
            this.srcContactList = srcContactList;
    }    

    public String getFormName() {
        return this.FRM_SEARCH_CONTACT_LIST;
    }    
    
    public int[] getFieldTypes() {
        return fieldTypes;
    }    
    
    public String[] getFieldNames() {
        return fieldNames;
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public static Vector getSortOrder()
    {
    	Vector sortOrder = new Vector(1,1);
        for(int i= 0;i < sortFieldNames.length;i++){
        	sortOrder.add(sortFieldNames[i]);
        }
        return sortOrder;
    }

    public SrcContactList getEntityObject()
    {
        return srcContactList;
    }

    public void requestEntityObject(SrcContactList srcContactList)
    {        
        try {
            this.requestParam();

            srcContactList.setCode(getString(FRM_FIELD_CODE));
            srcContactList.setName(getString(FRM_FIELD_NAME));
            srcContactList.setAddress(getString(FRM_FIELD_ADDRESS));
            srcContactList.setOrderBy(getInt(FRM_FIELD_ORDER));
            srcContactList.setCity(getString(FRM_FIELD_CITY));
            srcContactList.setProvince(getString(FRM_FIELD_PROVINCE));
            srcContactList.setCountry(getString(FRM_FIELD_COUNTRY));
            srcContactList.setSpecType(getInt(FRM_FIELD_SPEC_TYPE));
            this.srcContactList = srcContactList;
        }catch(Exception e) {
            System.out.println("Exception on request entity object"+e.toString());
            srcContactList = new SrcContactList();
        }       
    }
}
