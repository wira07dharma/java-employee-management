/* Generated by Together */

package com.dimata.common.session.contact;

import java.util.*;
import java.sql.*;

import com.dimata.qdep.db.*;
import com.dimata.util.*;

import com.dimata.common.entity.contact.*;
import com.dimata.common.entity.search.*;
import com.dimata.common.form.search.*;

//import com.dimata.aiso.entity.jurnal.*;
//import com.dimata.aiso.session.journal.*;

/* Generated by Together */

public class SessContactList {
    
    public static final String SESS_SRC_CONTACT_LIST = "SESS_SRC_CONTACT_LIST";
    public static final String SESS_SRC_PERSONNEL = "SESS_SRC_PERSONNEL";
    
    
   public static String getContactName(long contactId){
        DBResultSet dbrs = null;
        String result = "";
        try{
            String sql = " SELECT "+PstContactList.fieldNames[PstContactList.FLD_CONTACT_TYPE]+", "+
            PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]+", "+
            PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME]+", "+
            PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+
            " FROM "+PstContactList.TBL_CONTACT_LIST+
            " WHERE "+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+
            " = "+contactId;
            System.out.println("SessContactList.getContactName sql : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()) {
                int contactType = rs.getInt(PstContactList.fieldNames[PstContactList.FLD_CONTACT_TYPE]);
                if((contactType==PstContactList.OWN_COMPANY)||(contactType==PstContactList.EXT_COMPANY)){
                    result = rs.getString(PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]);
                }else{
                    result = rs.getString(PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME])+" "+
                    rs.getString(PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME]);
                }
            }
            return result;
        }catch(Exception e){
            System.out.println("SessContactList.getContactName err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
        }
        return "";
    }
    
    // parse the String into Vector
    private static Vector parse(String str) {
        Vector vector = LogicParser.textSentence(str);
        if(vector != null && vector.size()>0){
            if(((vector.get(vector.size()-1)).equals(LogicParser.SIGN))&&
            ((vector.get(vector.size()-1)).equals(LogicParser.ENGLISH)))
                vector.remove(vector.size()-1);
        }
        return vector;
    }
    
    
    public static Vector searchContact(SrcContact srcContact, int start, int recordToGet) {
        DBResultSet dbrs = null;
        Vector result = new Vector(1,1);
        try{
            String sql = " SELECT CONT.*"+
            " FROM "+PstContactList.TBL_CONTACT_LIST+ " CONT "+
            " INNER JOIN "+PstContactClassAssign.TBL_CNT_CLS_ASSIGN+ " CCA "+
            " ON CCA."+PstContactClassAssign.fieldNames[PstContactClassAssign.FLD_CONTACT_ID]+
            " = CONT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+
            " INNER JOIN "+PstContactClass.TBL_CONTACT_CLASS + " CCL "+
            " ON CCL."+PstContactClass.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID]+
            " = CCA."+PstContactClassAssign.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID];
            
            String whereClause = "";
            if(srcContact != null){
                Vector contactName = parse(srcContact.getName());
                if(contactName != null && contactName.size()>0){
                    whereClause = whereClause + " (";
                    for(int i =0;i<contactName.size();i++) {
                        String name = (String)contactName.get(i);
                        if(!LogicParser.isInSign(name) && !LogicParser.isInLogEnglish(name))
                            whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]+
                            " LIKE '%"+name.trim() +"%' OR CONT."+
                            PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME]+
                            " LIKE '%"+name.trim() +"%' OR CONT."+
                            PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+
                            " LIKE '%"+name.trim() +"%')";
                        else
                            whereClause = whereClause + name ;
                    }
                    whereClause = whereClause + ") AND " ;
                }
                
                Vector contactCode = parse(srcContact.getCode());
                if(contactCode != null && contactCode.size()>0){
                    whereClause = whereClause + " (";
                    for(int i =0;i<contactCode.size();i++) {
                        String name = (String)contactCode.get(i);
                        if(!LogicParser.isInSign(name) && !LogicParser.isInLogEnglish(name))
                            whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE]+
                            " LIKE '%"+name.trim() +"%')";
                        else
                            whereClause = whereClause + name ;
                    }
                    whereClause = whereClause + ") AND " ;
                }
                
                if((srcContact.getAddress() != null) && (srcContact.getAddress().length()>0)){
                    whereClause = whereClause + " CONT."+PstContactList.fieldNames[PstContactList.FLD_BUSS_ADDRESS]+
                    " LIKE '%"+srcContact.getAddress().trim()+"%' AND ";
                }
                
                if((srcContact.getCity() != null) && (srcContact.getCity().length()>0)){
                    whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_TOWN]+
                    " LIKE '%"+srcContact.getCity().trim()+"%' OR "+
                    " CONT."+PstContactList.fieldNames[PstContactList.FLD_HOME_TOWN]+
                    " LIKE '%"+srcContact.getCity().trim()+"%') AND ";
                }
                
                if((srcContact.getCountry() != null) && (srcContact.getCountry().length()>0)){
                    whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_COUNTRY]+
                    " LIKE '%"+srcContact.getCountry().trim()+"%' OR "+
                    " CONT."+PstContactList.fieldNames[PstContactList.FLD_HOME_COUNTRY]+
                    " LIKE '%"+srcContact.getCountry().trim()+"%') AND ";
                }
                
                
                
                if((srcContact.getEmail() != null) && (srcContact.getEmail().length()>0)){
                    whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_EMAIL]+
                    " LIKE '%"+srcContact.getEmail().trim()+"%') AND ";
                    
                }
                
                if((srcContact.getTelp() != null) && (srcContact.getTelp().length()>0)){
                    whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_TELP_NR]+
                    " LIKE '%"+srcContact.getTelp().trim()+"%' OR "+
                    " CONT."+PstContactList.fieldNames[PstContactList.FLD_HOME_TELP]+
                    " LIKE '%"+srcContact.getTelp().trim()+"%') AND ";
                }
                
                if((srcContact.getFax() != null) && (srcContact.getFax().length()>0)){
                    whereClause = whereClause + " CONT."+PstContactList.fieldNames[PstContactList.FLD_FAX]+
                    " LIKE '%"+srcContact.getFax().trim()+"%' AND ";
                }
                
                if(srcContact.getClassType()!=null && srcContact.getClassType().size()>0){
                    whereClause = whereClause + "(";
                    Vector vectType = srcContact.getClassType();
                    for(int i=0;i<vectType.size();i++){
                        whereClause = whereClause + "CCL."+PstContactClass.fieldNames[PstContactClass.FLD_CLASS_TYPE]+
                        " = '"+vectType.get(i)+"'";
                        if(i < vectType.size()-1)
                            whereClause = whereClause + " OR ";
                    }
                    whereClause = whereClause  +") AND ";
                    
                }
            }
            
            
            if(whereClause != null && whereClause.length()>0){
                sql = sql + " WHERE "+whereClause+" 1=1 ";
            }
            
            sql = sql +  " ORDER BY CONT."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME];
            
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL :
                    if(start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + start + ","+ recordToGet ;
                    break;
                case DBHandler.DBSVR_POSTGRESQL :
                    if(start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " +recordToGet + " OFFSET "+ start ;
                    break;
                case DBHandler.DBSVR_SYBASE :
                    break;
                case DBHandler.DBSVR_ORACLE :
                    break;
                case DBHandler.DBSVR_MSSQL :
                    break;
                    
                default:
                    if(start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + start + ","+ recordToGet ;
            }
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while(rs.next()){
                ContactList contactList = new ContactList();
                PstContactList.resultToObject(rs,contactList);
                result.add(contactList);
            }
            rs.close();
            return result;
        }catch(Exception e){
            System.out.println("Err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
        }
        return new Vector(1,1);
    }
    
    public static Vector srcContactBaseOnType(SrcContact srcContact, int start, int recordToGet) {
        DBResultSet dbrs = null;
        Vector result = new Vector(1,1);
        try{
            String sql = " SELECT DISTINCT(CONT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+")"+
            ", CONT.*"+
            " FROM "+PstContactList.TBL_CONTACT_LIST+ " CONT "+
            " INNER JOIN "+PstContactClassAssign.TBL_CNT_CLS_ASSIGN+ " CCA "+
            " ON CCA."+PstContactClassAssign.fieldNames[PstContactClassAssign.FLD_CONTACT_ID]+
            " = CONT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+
            " INNER JOIN "+PstContactClass.TBL_CONTACT_CLASS + " CCL "+
            " ON CCL."+PstContactClass.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID]+
            " = CCA."+PstContactClassAssign.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID];
            
            String whereClause = "";
            if(srcContact != null){
                Vector contactCode = parse(srcContact.getCode());
                
                if(contactCode != null && contactCode.size()>0){
                    whereClause = whereClause + " (";
                    for(int i =0;i<contactCode.size();i++) {
                        String code = (String)contactCode.get(i);
                        if(!LogicParser.isInSign(code) && !LogicParser.isInLogEnglish(code))
                            whereClause = whereClause + "CONT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE]+
                            " LIKE '%"+code.trim() +"%' ";
                        else
                            whereClause = whereClause + code ;
                    }
                    whereClause = whereClause + ") AND " ;
                }
                
                
                Vector contactName = parse(srcContact.getName());
                if(contactName != null && contactName.size()>0){
                    whereClause = whereClause + " (";
                    for(int i =0;i<contactName.size();i++) {
                        String name = (String)contactName.get(i);
                        if(!LogicParser.isInSign(name) && !LogicParser.isInLogEnglish(name))
                            whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]+
                            " LIKE '%"+name.trim() +"%' OR CONT."+
                            PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME]+
                            " LIKE '%"+name.trim() +"%' )";
                        else
                            whereClause = whereClause + name ;
                    }
                    whereClause = whereClause + ") AND " ;
                }
                
                Vector compName = parse(srcContact.getCompName());
                if(compName != null && compName.size()>0){
                    whereClause = whereClause + " (";
                    for(int i =0;i<compName.size();i++) {
                        String name = (String)compName.get(i);
                        if(!LogicParser.isInSign(name) && !LogicParser.isInLogEnglish(name))
                            whereClause = whereClause + "CONT."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+
                            " LIKE '%"+name.trim() +"%' ";
                        else
                            whereClause = whereClause + name ;
                    }
                    whereClause = whereClause + ") AND " ;
                }
                
                if((srcContact.getAddress() != null) && (srcContact.getAddress().length()>0)){
                    whereClause = whereClause + " CONT."+PstContactList.fieldNames[PstContactList.FLD_BUSS_ADDRESS]+
                    " LIKE '%"+srcContact.getAddress().trim()+"%' AND ";
                }
                
                if(srcContact.getClassType()!=null && srcContact.getClassType().size()>0){
                    whereClause = whereClause + "(";
                    Vector vectType = srcContact.getClassType();
                    for(int i=0;i<vectType.size();i++){
                        whereClause = whereClause + " CCL."+PstContactClass.fieldNames[PstContactClass.FLD_CLASS_TYPE]+
                        " = '"+vectType.get(i)+"'";
                        if(i < (vectType.size()-1))
                            whereClause = whereClause + " OR ";
                    }
                    whereClause = whereClause  +") AND ";
                    
                }
            }
            
            
            if(whereClause != null && whereClause.length()>0){
                sql = sql + " WHERE "+whereClause+" 1=1 ";
            }
            
            
            sql = sql +
            " ORDER BY CONT."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME];
            
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL :
                    if(start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + start + ","+ recordToGet ;
                    break;
                case DBHandler.DBSVR_POSTGRESQL :
                    if(start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " +recordToGet + " OFFSET "+ start ;
                    break;
                case DBHandler.DBSVR_SYBASE :
                    break;
                case DBHandler.DBSVR_ORACLE :
                    break;
                case DBHandler.DBSVR_MSSQL :
                    break;
                    
                default:
                    if(start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + start + ","+ recordToGet ;
            }
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            
            while(rs.next()){
                ContactList contactList = new ContactList();
                PstContactList.resultToObject(rs,contactList);
                result.add(contactList);
            }
            rs.close();
            return result;
        }catch(Exception e){
            System.out.println("Err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
        }
        return new Vector(1,1);
    }
    
    
    public static int countContactBaseOnType(SrcContact srcContact) {
        DBResultSet dbrs = null;
        Vector result = new Vector(1,1);
        try{
            String sql = " SELECT COUNT(DISTINCT CONT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+")"+
            " FROM "+PstContactList.TBL_CONTACT_LIST+ " CONT "+
            " INNER JOIN "+PstContactClassAssign.TBL_CNT_CLS_ASSIGN+ " CCA "+
            " ON CCA."+PstContactClassAssign.fieldNames[PstContactClassAssign.FLD_CONTACT_ID]+
            " = CONT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+
            " INNER JOIN "+PstContactClass.TBL_CONTACT_CLASS + " CCL "+
            " ON CCL."+PstContactClass.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID]+
            " = CCA."+PstContactClassAssign.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID];
            
            String whereClause = "";
            if(srcContact != null){
                Vector contactCode = parse(srcContact.getCode());
                if(contactCode != null && contactCode.size()>0){
                    whereClause = whereClause + " (";
                    for(int i =0;i<contactCode.size();i++) {
                        String code = (String)contactCode.get(i);
                        if(!LogicParser.isInSign(code) && !LogicParser.isInLogEnglish(code))
                            whereClause = whereClause + "CONT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE]+
                            " LIKE '%"+code.trim() +"%' ";
                        else
                            whereClause = whereClause + code ;
                    }
                    whereClause = whereClause + ") AND " ;
                }
                
                
                Vector contactName = parse(srcContact.getName());
                if(contactName != null && contactName.size()>0){
                    whereClause = whereClause + " (";
                    for(int i =0;i<contactName.size();i++) {
                        String name = (String)contactName.get(i);
                        if(!LogicParser.isInSign(name) && !LogicParser.isInLogEnglish(name))
                            whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]+
                            " LIKE '%"+name.trim() +"%' OR CONT."+
                            PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME]+
                            " LIKE '%"+name.trim() +"%' )";
                        else
                            whereClause = whereClause + name ;
                    }
                    whereClause = whereClause + ") AND " ;
                }
                
                Vector compName = parse(srcContact.getCompName());
                if(compName != null && compName.size()>0){
                    whereClause = whereClause + " (";
                    for(int i =0;i<compName.size();i++) {
                        String name = (String)compName.get(i);
                        if(!LogicParser.isInSign(name) && !LogicParser.isInLogEnglish(name))
                            whereClause = whereClause + "CONT."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+
                            " LIKE '%"+name.trim() +"%' ";
                        else
                            whereClause = whereClause + name ;
                    }
                    whereClause = whereClause + ") AND " ;
                }
                
                if((srcContact.getAddress() != null) && (srcContact.getAddress().length()>0)){
                    whereClause = whereClause + " CONT."+PstContactList.fieldNames[PstContactList.FLD_BUSS_ADDRESS]+
                    " LIKE '%"+srcContact.getAddress().trim()+"%' AND ";
                }
                
                if(srcContact.getClassType()!=null && srcContact.getClassType().size()>0){
                    whereClause = whereClause + "(";
                    Vector vectType = srcContact.getClassType();
                    for(int i=0;i<vectType.size();i++){
                        whereClause = whereClause + " CCL."+PstContactClass.fieldNames[PstContactClass.FLD_CLASS_TYPE]+
                        " = '"+vectType.get(i)+"'";
                        if(i < (vectType.size()-1))
                            whereClause = whereClause + " OR ";
                    }
                    whereClause = whereClause  +") AND ";
                    
                }
            }
            
            
            if(whereClause != null && whereClause.length()>0){
                sql = sql + " WHERE "+whereClause+" 1=1 ";
            }
            
            System.out.println(sql);
            
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            int count = 0;
            while(rs.next()){
                count = rs.getInt(1);
            }
            rs.close();
            return count;
        }catch(Exception e){
            System.out.println("Err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
        }
        return 0;
    }
    
    
    public static int countContact(SrcContact srcContact) {
        DBResultSet dbrs = null;
        Vector result = new Vector(1,1);
        try{
            String sql = " SELECT COUNT(DISTINCT CONT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+")"+
            " FROM "+PstContactList.TBL_CONTACT_LIST+ " CONT "+
            " INNER JOIN "+PstContactClassAssign.TBL_CNT_CLS_ASSIGN+ " CCA "+
            " ON CCA."+PstContactClassAssign.fieldNames[PstContactClassAssign.FLD_CONTACT_ID]+
            " = CONT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+
            " INNER JOIN "+PstContactClass.TBL_CONTACT_CLASS + " CCL "+
            " ON CCL."+PstContactClass.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID]+
            " = CCA."+PstContactClassAssign.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID];
            
            String whereClause = "";
            System.out.println("srcContact >"+srcContact);
            if(srcContact != null){
                Vector contactName = parse(srcContact.getName());
                if(contactName != null && contactName.size()>0){
                    whereClause = whereClause + " (";
                    for(int i =0;i<contactName.size();i++) {
                        String name = (String)contactName.get(i);
                        if(!LogicParser.isInSign(name) && !LogicParser.isInLogEnglish(name))
                            whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]+
                            " LIKE '%"+name.trim() +"%' OR CONT."+
                            PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME]+
                            " LIKE '%"+name.trim() +"%' OR CONT."+
                            PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+
                            " LIKE '%"+name.trim() +"%')";
                        else
                            whereClause = whereClause + name ;
                    }
                    whereClause = whereClause + ") AND " ;
                }
                
                Vector contactCode = parse(srcContact.getCode());
                if(contactCode != null && contactCode.size()>0){
                    whereClause = whereClause + " (";
                    for(int i =0;i<contactCode.size();i++) {
                        String name = (String)contactCode.get(i);
                        if(!LogicParser.isInSign(name) && !LogicParser.isInLogEnglish(name))
                            whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE]+
                            " LIKE '%"+name.trim() +"%')";
                        else
                            whereClause = whereClause + name ;
                    }
                    whereClause = whereClause + ") AND " ;
                }
                
                if((srcContact.getAddress() != null) && (srcContact.getAddress().length()>0)){
                    whereClause = whereClause + " CONT."+PstContactList.fieldNames[PstContactList.FLD_BUSS_ADDRESS]+
                    " LIKE '%"+srcContact.getAddress().trim()+"%' AND ";
                }
                
                if((srcContact.getCity() != null) && (srcContact.getCity().length()>0)){
                    whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_TOWN]+
                    " LIKE '%"+srcContact.getCity().trim()+"%' OR "+
                    " CONT."+PstContactList.fieldNames[PstContactList.FLD_HOME_TOWN]+
                    " LIKE '%"+srcContact.getCity().trim()+"%') AND ";
                }
                
                if((srcContact.getCountry() != null) && (srcContact.getCountry().length()>0)){
                    whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_COUNTRY]+
                    " LIKE '%"+srcContact.getCountry().trim()+"%' OR "+
                    " CONT."+PstContactList.fieldNames[PstContactList.FLD_HOME_COUNTRY]+
                    " LIKE '%"+srcContact.getCountry().trim()+"%') AND ";
                }
                
                if((srcContact.getEmail() != null) && (srcContact.getEmail().length()>0)){
                    whereClause = whereClause + " CONT."+PstContactList.fieldNames[PstContactList.FLD_EMAIL]+
                    " LIKE '%"+srcContact.getEmail().trim()+"%' AND ";
                    
                }
                
                if((srcContact.getTelp() != null) && (srcContact.getTelp().length()>0)){
                    whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_TELP_NR]+
                    " LIKE '%"+srcContact.getTelp().trim()+"%' OR "+
                    " CONT."+PstContactList.fieldNames[PstContactList.FLD_HOME_TELP]+
                    " LIKE '%"+srcContact.getTelp().trim()+"%') AND ";
                }
                
                if((srcContact.getFax() != null) && (srcContact.getFax().length()>0)){
                    whereClause = whereClause + "(CONT."+PstContactList.fieldNames[PstContactList.FLD_FAX]+
                    " LIKE '%"+srcContact.getFax().trim()+"%') AND ";
                }
                
                if(srcContact.getClassType()!=null && srcContact.getClassType().size()>0){
                    whereClause = whereClause + "(";
                    Vector vectType = srcContact.getClassType();
                    for(int i=0;i<vectType.size();i++){
                        whereClause = whereClause + " CCL."+PstContactClass.fieldNames[PstContactClass.FLD_CLASS_TYPE]+
                        " = '"+vectType.get(i)+"'";
                        if(i < (vectType.size()-1))
                            whereClause = whereClause + " OR ";
                    }
                    whereClause = whereClause  +") AND ";
                    
                }
            }
            
            System.out.println("whereClause > "+whereClause);
            if(whereClause != null && whereClause.length()>0){
                sql = sql + " WHERE "+whereClause+" 1=1 ";
            }
            
            System.out.println(sql);
            
            
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            int count = 0;
            while(rs.next()){
                count = rs.getInt(1);
            }
            rs.close();
            return count;
        }catch(Exception e){
            System.out.println("Err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
        }
        return 0;
    }
    
    /** this method used to list all vendor into which 'VENDOR_TYPE' */
    public static Vector getListVendor(String name, Vector vect, int start, int recordToGet) {
        String whereClause = "";
        Vector vectVendor = new Vector(1, 1);
        if ((name != null) && (name.length() > 0)) {
            vectVendor = LogicParser.textSentence(name);
            for (int i = 0; i < vectVendor.size(); i++) {
                String nameVendor = (String)vectVendor.get(i);
                if ((nameVendor.equals(LogicParser.SIGN)) || (nameVendor.equals(LogicParser.ENGLISH[LogicParser.WORD_OR])))
                    vectVendor.remove(i);
            }
        }
        return PstContactList.getListContact(vectVendor, vect, start, recordToGet);
    }
    
    
    
    /** this method used to count all vendor into which 'VENDOR_TYPE' */
    public static int getCountListVendor(String name, Vector vect) {
        String whereClause = "";
        Vector vectVendor = new Vector(1, 1);
        if ((name != null) && (name.length() > 0)) {
            vectVendor = LogicParser.textSentence(name);
            for (int i = 0; i < vectVendor.size(); i++) {
                String nameVendor = (String)vectVendor.get(i);
                if ((nameVendor.equals(LogicParser.SIGN)) || (nameVendor.equals(LogicParser.ENGLISH[LogicParser.WORD_OR])))
                    vectVendor.remove(i);
            }
        }
        return PstContactList.getCountListContact(vectVendor, vect);
    }
    
    
    
    
    /**
     * this method used to get contactlist
     * specified by contact type
     */
    /*public static Vector getContactByClass(int contactType, int utangType){
        DBResultSet dbrs = null;
        Vector result = new Vector(1,1);
        try{
            String sql = " SELECT DISTINCT CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+", "+
                         " CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_TYPE]+", "+
                         " CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]+", "+
                         " CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME]+", "+
                         " CNT."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+
                         " FROM "+PstContactList.TBL_CONTACT_LIST+" AS CNT "+
                         " INNER JOIN "+PstContactClassAssign.TBL_CNT_CLS_ASSIGN+" AS ASS "+
                         " ON CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+
                         " = ASS."+PstContactClassAssign.fieldNames[PstContactClassAssign.FLD_CONTACT_ID]+
                         " INNER JOIN "+PstContactClass.TBL_CONTACT_CLASS+" AS CLS "+
                         " ON ASS."+PstContactClassAssign.fieldNames[PstContactClassAssign.FLD_CNT_CLS_ID]+
                         " = CLS."+PstContactClass.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID]+
                         " INNER JOIN " + PstBpPiutang.TBL_BP_PIUTANG + " AS PIU " +
                         " ON CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID] +
                         " = PIU." + PstBpPiutang.fieldNames[PstBpPiutang.FLD_CONTACTID] +
                         " WHERE CLS."+PstContactClass.fieldNames[PstContactClass.FLD_CLASS_TYPE]+
                         " = "+contactType+
                         " AND PIU." + PstBpPiutang.fieldNames[PstBpPiutang.FLD_STATUS] +
                         " = " + utangType +
                         " AND PIU." + PstBpPiutang.fieldNames[PstBpPiutang.FLD_PAID_STATUS] +
                         " = " + SessBpPiutang.INT_REF_NOT_PAID;
     
            System.out.println("SessContactList.getContactByClass sql : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()) {
                ContactList contactList = new ContactList();
                contactList.setOID(rs.getLong(1));
                contactList.setContactType(rs.getInt(2));
                contactList.setPersonName(rs.getString(3));
                contactList.setPersonLastname(rs.getString(4));
                contactList.setCompName(rs.getString(5));
                result.add(contactList);
            }
        }catch(Exception e){
                    System.out.println("SessContactList.getContactByClass err : "+e.toString());
            }finally{
            DBResultSet.close(dbrs);
     
        }
            return result;
    }
     */
    
    /**
     * this method used to get contactlist
     * specified by employee
     */
    
    //blocked by eka
    /*
    public static Vector getContactByEmployeeId(int utangType){
        DBResultSet dbrs = null;
        Vector result = new Vector(1,1);
        try{
        String sql = " SELECT DISTINCT CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+", "+
                     " CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_TYPE]+", "+
                     " CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]+", "+
                     " CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME]+", "+
                     " CNT."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+
                     " FROM "+PstContactList.TBL_CONTACT_LIST+" AS CNT "+
                     " INNER JOIN " + PstBpPiutang.TBL_BP_PIUTANG + " AS PIU " +
                     " ON CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID] +
                     " = PIU." + PstBpPiutang.fieldNames[PstBpPiutang.FLD_CONTACTID] +
                    " WHERE CNT." + PstContactList.fieldNames[PstContactList.FLD_EMPLOYEE_ID] +
                     " <> 0 " +
                     " AND PIU." + PstBpPiutang.fieldNames[PstBpPiutang.FLD_STATUS] +
                     " = " + utangType +
                     " AND PIU." + PstBpPiutang.fieldNames[PstBpPiutang.FLD_PAID_STATUS] +
                     " = " + SessBpPiutang.INT_REF_NOT_PAID;
     
            System.out.println("SessContactList.getContactByClass sql : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()) {
                ContactList contactList = new ContactList();
                contactList.setOID(rs.getLong(1));
                contactList.setContactType(rs.getInt(2));
                contactList.setPersonName(rs.getString(3));
                contactList.setPersonLastname(rs.getString(4));
                contactList.setCompName(rs.getString(5));
                result.add(contactList);
            }
        }catch(Exception e){
                    System.out.println("SessContactList.getContactByClass err : "+e.toString());
            }finally{
            DBResultSet.close(dbrs);
     
        }
            return result;
    }
     
     */
    
    
    
    private static Vector logicParser(String text) {
        Vector vector = LogicParser.textSentence(text);
        for(int i =0;i < vector.size();i++){
            String code =(String)vector.get(i);
            if(((vector.get(vector.size()-1)).equals(LogicParser.SIGN))&&
            ((vector.get(vector.size()-1)).equals(LogicParser.ENGLISH)))
                vector.remove(vector.size()-1);
        }
        
        return vector;
    }
    
    /**
     * this method used to get lsit of Company
     */
    public static Vector searchCompany(SrcContactList srcContactList, int start, int recordToGet){
        DBResultSet dbrs = null;
        Vector result = new Vector(1,1);
        try{
            String sql = " SELECT DISTINCT CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+", "+
           // " CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_TYPE]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_TELP_NR]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_BUSS_ADDRESS]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_TOWN]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_PROVINCE]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_COUNTRY]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_FAX]+
            //" CLS."+PstContactClass.fieldNames[PstContactClass.FLD_CLASS_NAME]+
            " FROM "+PstContactList.TBL_CONTACT_LIST+" AS CNT "+
            (srcContactList.getSpecType()!=0? "LEFT":" INNER") +" JOIN " + PstContactClassAssign.TBL_CNT_CLS_ASSIGN + " AS ASS " +
            " ON CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID] +
            " = ASS." + PstContactClassAssign.fieldNames[PstContactClassAssign.FLD_CONTACT_ID] +
            (srcContactList.getSpecType()!=0? "LEFT":" INNER") +" JOIN " + PstContactClass.TBL_CONTACT_CLASS + " AS CLS " +
            " ON CLS." + PstContactClass.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID] +
            " = ASS." + PstContactClassAssign.fieldNames[PstContactClassAssign.FLD_CNT_CLS_ID];
            
            /*String contTypeCond = " CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_TYPE] +
            " = " + PstContactList.EXT_COMPANY;*/
            
            String typeCond = "";
            if((srcContactList.getType()!= null)&& (srcContactList.getType().size()>0)){
                Vector vectType = srcContactList.getType();
                int maxVectType = vectType.size();
                String strIn = "";
                System.out.println("vectType.size() :::: "+vectType.size());
                for(int i = 0; i <maxVectType; i++){
                    strIn = strIn + String.valueOf(vectType.get(i)) + ","; 
                }
                if(strIn.length()>0){
                    strIn = strIn.substring(0,strIn.length()-1);
                }
                
                typeCond = typeCond + " CLS." + PstContactClass.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID]+
                " IN (" + strIn + ")";
            }
            
            String codeCond = "";
	    String like = "";
	    System.out.println("DBSVR_TYPE ::::::::::::::::::::::::::::::: "+DBHandler.DBSVR_TYPE);
	    if(DBHandler.DBSVR_TYPE == DBHandler.DBSVR_MYSQL)
		like = " LIKE ";
	    else
		like = " ILIKE ";
	    
            if((srcContactList.getCode()!= null)&& (srcContactList.getCode().length()>0)){
                Vector vectCode = logicParser(srcContactList.getCode());
                if(vectCode != null && vectCode.size()>0){
                    int maxVectCode = vectCode.size();
                    codeCond = codeCond + " (";
                    for(int i = 0; i <maxVectCode; i++){
                        String str = (String)vectCode.get(i);
                        if(!LogicParser.isInSign(str) && !LogicParser.isInLogEnglish(str)){
                            codeCond = codeCond + " CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE]+
                            like +"'%"+str.trim()+"%' ";
                        }else{
                            codeCond = codeCond + str.trim();
                        }
                    }
                    codeCond = codeCond + ")";
                }
            }
            
            String nameCond = "";
            if((srcContactList.getName()!= null)&& (srcContactList.getName().length()>0)){
                Vector vectName = logicParser(srcContactList.getName());
                if(vectName != null && vectName.size()>0){
                    int maxVectName = vectName.size();
                    nameCond = nameCond + " (";
                    for(int i = 0; i <maxVectName; i++){
                        String str = (String)vectName.get(i);
                        if(!LogicParser.isInSign(str) && !LogicParser.isInLogEnglish(str)){
                            nameCond = nameCond + " CNT."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME]+
                            like +"'%"+str.trim()+"%' ";
                            nameCond = nameCond + " OR  CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]+
                            like +"'%"+str.trim()+"%' ";
                        }else{
                            nameCond = nameCond + str.trim();
                        }
                    }
                    nameCond = nameCond + ")";
                }
            }
            
            String addrCond = "";
            if((srcContactList.getAddress()!= null)&& (srcContactList.getAddress().length()>0)){
                Vector vectAddr = logicParser(srcContactList.getAddress());
                if(vectAddr != null && vectAddr.size()>0){
                    int maxVectAddr = vectAddr.size();
                    addrCond = addrCond + " (";
                    for(int i = 0; i <maxVectAddr; i++){
                        String str = (String)vectAddr.get(i);
                        if(!LogicParser.isInSign(str) && !LogicParser.isInLogEnglish(str)){
                            addrCond = addrCond + " CNT."+PstContactList.fieldNames[PstContactList.FLD_BUSS_ADDRESS]+
                            like +"'%"+str.trim()+"%' ";
                        }else{
                            addrCond = addrCond + str.trim();
                        }
                    }
                    addrCond = addrCond + ")";
                }
            }
            
            String cityCond = "";
            if((srcContactList.getCity()!= null)&& (srcContactList.getCity().length()>0)){
                Vector vectCity = logicParser(srcContactList.getCity());
                if(vectCity != null && vectCity.size()>0){
                    int maxVectCity = vectCity.size();
                    cityCond = cityCond + " (";
                    for(int i = 0; i < maxVectCity; i++){
                        String str = (String)vectCity.get(i);
                        if(!LogicParser.isInSign(str) && !LogicParser.isInLogEnglish(str)){
                            cityCond = cityCond + " CNT."+PstContactList.fieldNames[PstContactList.FLD_TOWN]+
                            like + "'%"+str.trim()+"%' ";
                        }else{
                            cityCond = cityCond + str.trim();
                        }
                    }
                    cityCond = cityCond + ")";
                }
            }
            
            String propCond = "";
            if((srcContactList.getProvince() != null)&& (srcContactList.getProvince().length()>0)){
                Vector vectProp = logicParser(srcContactList.getProvince());
                if(vectProp != null && vectProp.size()>0){
                    int maxVectProp = vectProp.size();
                    propCond = propCond + " (";
                    for(int i = 0; i < maxVectProp; i++){
                        String str = (String)vectProp.get(i);
                        if(!LogicParser.isInSign(str) && !LogicParser.isInLogEnglish(str)){
                            propCond = propCond + " CNT."+PstContactList.fieldNames[PstContactList.FLD_PROVINCE]+
                            like + "'%"+str.trim()+"%' ";
                        }else{
                            propCond = propCond + str.trim();
                        }
                    }
                    propCond = propCond + ")";
                }
            }
            
            String countryCond = "";
            if((srcContactList.getCountry() != null)&& (srcContactList.getCountry().length()>0)){
                Vector vectCountry = logicParser(srcContactList.getCountry());
                if(vectCountry != null && vectCountry.size()>0){
                    int maxVectCountry = vectCountry.size();
                    countryCond = countryCond + " (";
                    for(int i = 0; i < maxVectCountry; i++){
                        String str = (String)vectCountry.get(i);
                        if(!LogicParser.isInSign(str) && !LogicParser.isInLogEnglish(str)){
                            countryCond = countryCond + " CNT."+PstContactList.fieldNames[PstContactList.FLD_COUNTRY]+
                            like +"'%"+str.trim()+"%' ";
                        }else{
                            countryCond = countryCond + str.trim();
                        }
                    }
                    countryCond = countryCond + ")";
                }
            }
            
            String allCondition = "";
            /*if(contTypeCond!="" && contTypeCond.length()>0){
                allCondition = contTypeCond;
            }*/
            
            if(typeCond!="" && typeCond.length()>0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + typeCond;
                }else{
                    allCondition = typeCond;
                }
            }
            
            if(codeCond!="" && codeCond.length()>0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + codeCond;
                }else{
                    allCondition = codeCond;
                }
            }
            
            if(nameCond!="" && nameCond.length()>0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + nameCond;
                }else{
                    allCondition = nameCond;
                }
            }

            if(srcContactList.getSpecType()!=0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + PstContactList.fieldNames[PstContactList.FLD_CONTACT_TYPE]+"="+srcContactList.getSpecType();
                }else{
                    allCondition = PstContactList.fieldNames[PstContactList.FLD_CONTACT_TYPE]+"="+srcContactList.getSpecType();
                }
            }
            
            
            if(addrCond!="" && addrCond.length()>0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + addrCond;
                }else{
                    allCondition = addrCond;
                }
            }
            
             if(cityCond != null && cityCond.length() > 0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + cityCond;
                }else{
                    allCondition = cityCond;
                }
            }
            
            
            if(propCond != null && propCond.length() > 0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + propCond;
                }else{
                    allCondition = propCond;
                }
            }
            
            
            if(countryCond != null && countryCond.length() > 0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + countryCond;
                }else{
                    allCondition = countryCond;
                }
            }
            
            String orderBy = "";
            switch(srcContactList.getOrderBy()){
                /*case FrmSrcContactList.SORT_BY_TYPE :
                    orderBy = orderBy + " ORDER BY CLS."+PstContactClass.fieldNames[PstContactClass.FLD_CLASS_NAME] ;
                    break;*/
                case FrmSrcContactList.SORT_BY_CODE:
                    orderBy = orderBy + " ORDER BY CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE] ;
                    break;
                case FrmSrcContactList.SORT_BY_NAME:
                    orderBy = orderBy + " ORDER BY CNT."+PstContactList.fieldNames[PstContactList.FLD_COMP_NAME] ;
                    break;
                case FrmSrcContactList.SORT_BY_ADDRESS:
                    orderBy = orderBy + " ORDER BY CNT."+PstContactList.fieldNames[PstContactList.FLD_BUSS_ADDRESS] ;
                    break;
                case FrmSrcContactList.SORT_BY_CITY:
                    orderBy = orderBy + " ORDER BY CNT."+PstContactList.fieldNames[PstContactList.FLD_TOWN] ;
                    break;
                case FrmSrcContactList.SORT_BY_PROVINCE:
                    orderBy = orderBy + " ORDER BY CNT."+PstContactList.fieldNames[PstContactList.FLD_PROVINCE] ;
                    break;
                case FrmSrcContactList.SORT_BY_COUNTRY:
                    orderBy = orderBy + " ORDER BY CNT."+PstContactList.fieldNames[PstContactList.FLD_COUNTRY] ;
                    break;    
                default:
                    orderBy = orderBy + "";
            }

            if(allCondition!="" && allCondition.length()>0){
                sql = sql + " WHERE " + allCondition + orderBy;
            }else{
                sql = sql + orderBy;
            }

           /* if(start==0 && recordToGet==0){
                sql = sql + "";
            }else{
                sql = sql + " LIMIT " + start + ","+ recordToGet;
                
            }*/            
            
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL :
                    if(start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + start + ","+ recordToGet ;
                    break;
                case DBHandler.DBSVR_POSTGRESQL :
                    if(start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " +recordToGet + " OFFSET "+ start ;
                    break;
                case DBHandler.DBSVR_SYBASE :
                    break;
                case DBHandler.DBSVR_ORACLE :
                    break;
                case DBHandler.DBSVR_MSSQL :
                    break;
                    
                default:
                    if(start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + start + ","+ recordToGet ;
            }
            
            
            
            
            
           // System.out.println("SessContactList.searchCompany sql : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()) {
                ContactList contactList = new ContactList();
                
                contactList.setOID(rs.getLong(1));
                //contactList.setContactType(rs.getInt(2));
                contactList.setContactCode(rs.getString(2));
                contactList.setCompName(rs.getString(3));
                contactList.setTelpNr(rs.getString(4));
                contactList.setBussAddress(rs.getString(5));
                contactList.setPersonName(rs.getString(6));
                contactList.setPersonLastname(rs.getString(7));
                contactList.setTown(rs.getString(8));
                contactList.setProvince(rs.getString(9));
                contactList.setCountry(rs.getString(10));
                contactList.setFax(rs.getString(11));

                result.add(contactList);
            }
        }catch(Exception e){
            System.out.println("SessContactList.searchCompany err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
            
        }
        return result;
    }
    
    /**
     * this method used to count list Company
     */
    public static int countCompany(SrcContactList srcContactList){
        int result = 0;
        Vector vectCompany = searchCompany(srcContactList, 0, 0);
        if(vectCompany!=null && vectCompany.size()>0){
            result = vectCompany.size();
        }
        return result;
    }
    
    /**
     * this method used to get list of Personnel
     */
    public static Vector searchPersonnel(SrcContactPerson srcContactPerson, int start, int recordToGet){
        DBResultSet dbrs = null;
        Vector result = new Vector(1,1);
        try{
            String sql = " SELECT CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_TYPE]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME]+", "+
            " CNT."+PstContactList.fieldNames[PstContactList.FLD_HOME_ADDR]+
            " FROM "+PstContactList.TBL_CONTACT_LIST+" AS CNT "+
            " INNER JOIN " + PstContactClassAssign.TBL_CNT_CLS_ASSIGN + " AS ASS " +
            " ON CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID] +
            " = ASS." + PstContactClassAssign.fieldNames[PstContactClassAssign.FLD_CONTACT_ID] +
            " INNER JOIN " + PstContactClass.TBL_CONTACT_CLASS + " AS CLS " +
            " ON CLS." + PstContactClass.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID] +
            " = ASS." + PstContactClassAssign.fieldNames[PstContactClassAssign.FLD_CNT_CLS_ID];
            
            String contTypeCond = " CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_TYPE] +
            " = " + PstContactList.EXT_PERSONEL;
            
            String typeCond = "";
            if((srcContactPerson.getType()!= null)&& (srcContactPerson.getType().size()>0)){
                Vector vectType = srcContactPerson.getType();
                int maxVectType = vectType.size();
                String strIn = "";
                for(int i = 0; i <maxVectType; i++){
                    strIn = strIn + String.valueOf(vectType.get(i)) + ",";
                }
                if(strIn.length()>0){
                    strIn = strIn.substring(0,strIn.length()-1);
                }
                typeCond = typeCond + " CLS." + PstContactClass.fieldNames[PstContactClass.FLD_CONTACT_CLASS_ID]+
                " IN (" + strIn + ")";
            }
            
            String codeCond = "";
            if((srcContactPerson.getCode()!= null)&& (srcContactPerson.getCode().length()>0)){
                Vector vectCode = logicParser(srcContactPerson.getCode());
                if(vectCode != null && vectCode.size()>0){
                    int maxVectCode = vectCode.size();
                    codeCond = codeCond + " (";
                    for(int i = 0; i <maxVectCode; i++){
                        String str = (String)vectCode.get(i);
                        if(!LogicParser.isInSign(str) && !LogicParser.isInLogEnglish(str)){
                            codeCond = codeCond + " CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE]+
                            " LIKE '%"+str.trim()+"%' ";
                        }else{
                            codeCond = codeCond + str.trim();
                        }
                    }
                    codeCond = codeCond + ")";
                }
            }
            
            String firstNameCond = "";
            if((srcContactPerson.getFirstName()!= null)&& (srcContactPerson.getFirstName().length()>0)){
                Vector vectName = logicParser(srcContactPerson.getFirstName());
                if(vectName != null && vectName.size()>0){
                    int maxVectName = vectName.size();
                    firstNameCond = firstNameCond + " (";
                    for(int i = 0; i <maxVectName; i++){
                        String str = (String)vectName.get(i);
                        if(!LogicParser.isInSign(str) && !LogicParser.isInLogEnglish(str)){
                            firstNameCond = firstNameCond + " CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]+
                            " LIKE '%"+str.trim()+"%' ";
                        }else{
                            firstNameCond = firstNameCond + str.trim();
                        }
                    }
                    firstNameCond = firstNameCond + ")";
                }
            }
            
            String secondNameCond = "";
            if((srcContactPerson.getLastName()!= null)&& (srcContactPerson.getLastName().length()>0)){
                Vector vectName = logicParser(srcContactPerson.getLastName());
                if(vectName != null && vectName.size()>0){
                    int maxVectName = vectName.size();
                    secondNameCond = secondNameCond + " (";
                    for(int i = 0; i <maxVectName; i++){
                        String str = (String)vectName.get(i);
                        if(!LogicParser.isInSign(str) && !LogicParser.isInLogEnglish(str)){
                            secondNameCond = secondNameCond + " CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME]+
                            " LIKE '%"+str.trim()+"%' ";
                        }else{
                            secondNameCond = secondNameCond + str.trim();
                        }
                    }
                    secondNameCond = secondNameCond + ")";
                }
            }
            
            String addrCond = "";
            if((srcContactPerson.getAddress()!= null)&& (srcContactPerson.getAddress().length()>0)){
                Vector vectAddr = logicParser(srcContactPerson.getAddress());
                if(vectAddr != null && vectAddr.size()>0){
                    int maxVectAddr = vectAddr.size();
                    addrCond = addrCond + " (";
                    for(int i = 0; i <maxVectAddr; i++){
                        String str = (String)vectAddr.get(i);
                        if(!LogicParser.isInSign(str) && !LogicParser.isInLogEnglish(str)){
                            addrCond = addrCond + " CNT."+PstContactList.fieldNames[PstContactList.FLD_HOME_ADDR]+
                            " LIKE '%"+str.trim()+"%' ";
                        }else{
                            addrCond = addrCond + str.trim();
                        }
                    }
                    addrCond = addrCond + ")";
                }
            }
            
            
            
            String allCondition = "";
            if(contTypeCond!="" && contTypeCond.length()>0){
                allCondition = contTypeCond;
            }
            
            if(typeCond!="" && typeCond.length()>0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + typeCond;
                }else{
                    allCondition = typeCond;
                }
            }
            
            if(codeCond!="" && codeCond.length()>0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + codeCond;
                }else{
                    allCondition = codeCond;
                }
            }
            
            if(firstNameCond!="" && firstNameCond.length()>0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + firstNameCond;
                }else{
                    allCondition = firstNameCond;
                }
            }
            
            if(secondNameCond!="" && secondNameCond.length()>0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + secondNameCond;
                }else{
                    allCondition = secondNameCond;
                }
            }
            
            if(addrCond!="" && addrCond.length()>0){
                if((allCondition.length()>0)){
                    allCondition = allCondition + " AND " + addrCond;
                }else{
                    allCondition = addrCond;
                }
            }
            
            String orderBy = "";
            switch(srcContactPerson.getOrderBy()){
                case FrmSrcContactPerson.SORT_BY_TYPE :
                    orderBy = orderBy + " ORDER BY CLS."+PstContactClass.fieldNames[PstContactClass.FLD_CLASS_NAME] ;
                    break;
                case FrmSrcContactPerson.SORT_BY_CODE:
                    orderBy = orderBy + " ORDER BY CNT."+PstContactList.fieldNames[PstContactList.FLD_CONTACT_CODE] ;
                    break;
                case FrmSrcContactPerson.SORT_BY_FIRST_NAME:
                    orderBy = orderBy + " ORDER BY CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME] ;
                    break;
                case FrmSrcContactPerson.SORT_BY_LAST_NAME:
                    orderBy = orderBy + " ORDER BY CNT."+PstContactList.fieldNames[PstContactList.FLD_PERSON_LASTNAME] ;
                    break;
                case FrmSrcContactPerson.SORT_BY_ADDRESS:
                    orderBy = orderBy + " ORDER BY CNT."+PstContactList.fieldNames[PstContactList.FLD_HOME_ADDR] ;
                    break;
                default:
                    orderBy = orderBy + "";
            }
            
            if(allCondition!="" && allCondition.length()>0){
                sql = sql + " WHERE " + allCondition +
                " GROUP BY CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID] +
                orderBy;
            }else{
                sql = sql + " GROUP BY CNT." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID] + orderBy;
            }
            
            /*if(start==0 && recordToGet==0){
                sql = sql + "";
            }else{
                sql = sql + " LIMIT " + start + ","+ recordToGet;
            }*/
            
            
             switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL :
                    if(start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + start + ","+ recordToGet ;
                    break;
                case DBHandler.DBSVR_POSTGRESQL :
                    if(start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " +recordToGet + " OFFSET "+ start ;
                    break;
                case DBHandler.DBSVR_SYBASE :
                    break;
                case DBHandler.DBSVR_ORACLE :
                    break;
                case DBHandler.DBSVR_MSSQL :
                    break;
                    
                default:
                    if(start == 0 && recordToGet == 0)
                        sql = sql + "";
                    else
                        sql = sql + " LIMIT " + start + ","+ recordToGet ;
            }
            
            
            System.out.println("SessContactList.searchPersonnel sql : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while(rs.next()) {
                ContactList contactList = new ContactList();
                
                contactList.setOID(rs.getLong(1));
                contactList.setContactType(rs.getInt(2));
                contactList.setContactCode(rs.getString(3));
                contactList.setPersonName(rs.getString(4));
                contactList.setPersonLastname(rs.getString(5));
                contactList.setHomeAddr(rs.getString(6));
                
                result.add(contactList);
            }
        }catch(Exception e){
            System.out.println("SessContactList.searchPersonnel err : "+e.toString());
        }finally{
            DBResultSet.close(dbrs);
            
        }
        return result;
    }
    
    
    
    
    /**
     * this method used to count list Personnel
     */
    public static int countPersonnel(SrcContactPerson srcContactPerson){
        int result = 0;
        Vector vectPersonnel = searchPersonnel(srcContactPerson, 0, 0);
        if(vectPersonnel!=null && vectPersonnel.size()>0){
            result = vectPersonnel.size();
        }
        return result;
        
    }
    
    
    /**
     * this method used to get contactlist
     * specified by contact type
     */
    public static Vector getContactByClass(int contactType, int utangType){
        DBResultSet dbrs = null;
        Vector result = new Vector(1,1);
        
        return result;
    }
    
    
    /**
     * this method used to get contactlist
     * specified by employee
     */
    public static Vector getContactByEmployeeId(int utangType){
        DBResultSet dbrs = null;
        Vector result = new Vector(1,1);
        
        return result;
    }
    
    
    
}
