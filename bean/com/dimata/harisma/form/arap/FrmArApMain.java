/* Generated by Together */

package com.dimata.harisma.form.arap;

import com.dimata.harisma.entity.arap.ArApMain;
import com.dimata.qdep.form.FRMHandler;
import com.dimata.qdep.form.I_FRMInterface;
import com.dimata.qdep.form.I_FRMType;
import java.util.Vector;

import javax.servlet.http.HttpServletRequest;

public class FrmArApMain extends FRMHandler implements I_FRMInterface, I_FRMType {
    public static final String FRM_ARAP_MAIN = "FRM_ARAP_PAYMENT";
    public static final int FRM_VOUCHER_NO = 0;
    public static final int FRM_VOUCHER_DATE = 1;
    public static final int FRM_CONTACT_ID = 2;
    public static final int FRM_NUMBER_OF_PAYMENT = 3;
    public static final int FRM_ID_PERKIRAAN_LAWAN = 4;
    public static final int FRM_ID_PERKIRAAN = 5;
    public static final int FRM_ID_CURRENCY = 6;
    public static final int FRM_RATE = 7;
    public static final int FRM_AMOUNT = 8;
    public static final int FRM_NOTA_NO = 9;
    public static final int FRM_NOTA_DATE = 10;
    public static final int FRM_DESCRIPTION = 11;
    public static final int FRM_ARAP_MAIN_STATUS = 12;
    public static final int FRM_ARAP_TYPE = 13;
    public static final int FRM_ARAP_DOC_STATUS = 14;
    public static final int FRM_COUNTER = 15;
    public static final int FRM_COMPONENT_DEDUCTION_ID = 16;
    public static final int FRM_FIELD_EMPLOYEE_ID = 17;
    public static final int FRM_ENTRY_DATE = 18;
    public static final int FRM_PERIOD_EVERY = 19;
    public static final int FRM_PERIOD_EVERY_DMY = 20;
    public static final int FRM_START_OF_PAYMENT_DATE = 21;
    public static final int FRM_COMPANY_ID = 22;
    public static final int FRM_PAYMENT_AMOUNT_PLAN = 23;
    public static final int FRM_PERIOD_TYPE = 24;
    public static final int FRM_PERIOD_ID = 25;

    public static String[] fieldNames =
            {
                "FRM_PAYMENT_NO",
                "FRM_PAYMENT_DATE",
                "FRM_CONTACT_ID",
                "FRM_NUMBER_OF_PAYMENT",
                "FRM_ID_PERKIRAAN_LAWAN",
                "FRM_ID_PERKIRAAN_PAYMENT",
                "FRM_ID_CURRENCY",
                "FRM_RATE",
                "FRM_AMOUNT",
                "FRM_PAYMENT_STATUS",
                "FRM_NOTA_DATE",
                "FRM_DESCRIPTION",
                "FRM_ARAP_MAIN_STATUS",
                "FRM_ARAP_TYPE",
                "FRM_ARAP_DOC_STATUS",
                "FRM_COUNTER",
                "FRM_COMPONENT_DEDUCTION_ID",
                "FRM_FIELD_EMPLOYEE_ID",
                "FRM_ENTRY_DATE",
                "FRM_PERIOD_EVERY",
                "FRM_PERIOD_EVERY_DMY",
                "FRM_START_OF_PAYMENT_DATE",
                "FRM_COMPANY_ID",
                "FRM_PAYMENT_AMOUNT_PLAN",
                "FRM_PERIOD_TYPE",
                "FRM_PERIOD_ID"
            };

    public static int[] fieldTypes =
            {
                TYPE_STRING,
                TYPE_DATE,
                TYPE_LONG,
                TYPE_INT,
                TYPE_LONG,
                TYPE_LONG,
                TYPE_LONG,
                TYPE_FLOAT,
                TYPE_FLOAT,
                TYPE_STRING,
                TYPE_DATE,
                TYPE_STRING,
                TYPE_INT,
                TYPE_INT,
                TYPE_INT,
                TYPE_INT,
                TYPE_LONG,
                TYPE_LONG,
                TYPE_LONG,
                TYPE_INT,
                TYPE_INT,
                TYPE_DATE,
                TYPE_LONG,
                TYPE_FLOAT,
                TYPE_INT,
                TYPE_LONG
            };

     //update by priska
    public static final int[] perValue = {0,1,2,3};    
    public static final String[] perKey = {"Day","Week","month","Year"};
    
    public static Vector getPerValue(){
        Vector per = new Vector();
        for (int i= 0; i< perValue.length; i++){
            per.add(String.valueOf(perValue[i]));
        }
        return per;
    }
    
    public static Vector getPerKey(){
        Vector per = new Vector();
        for (int i = 0; i < perKey.length; i++ ){
            per.add(perKey[i]);
        }
        return per;
    }    
    
         //update by priska
    public static final int[] TypePayValue = {0,1};    
    public static final String[] TypePayKey = {"Cash","Deduction Payroll"};
    
    public static Vector getTypePayValue(){
        Vector TypePay = new Vector();
        for (int i= 0; i< TypePayValue.length; i++){
            TypePay.add(String.valueOf(TypePayValue[i]));
        }
        return TypePay;
    }
    
    public static Vector getTypePayKey(){
        Vector TypePay = new Vector();
        for (int i = 0; i < TypePayKey.length; i++ ){
            TypePay.add(TypePayKey[i]);
        }
        return TypePay;
    } 
    
    private ArApMain arap;

    public FrmArApMain(ArApMain arap) {
        this.arap = arap;
    }

    
    public FrmArApMain(HttpServletRequest request, ArApMain arap) {
        super(new FrmArApMain(arap), request);
        this.arap = arap;
    }

    public String getFormName() {
        return FRM_ARAP_MAIN;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public ArApMain getEntityObject() {
        return arap;
    }

    public void requestEntityObject(ArApMain arap) { 
        try {
            this.requestParam();
            arap.setVoucherNo(this.getString(FRM_VOUCHER_NO));
            arap.setVoucherDate(this.getDate(FRM_VOUCHER_DATE));
            arap.setContactId(this.getLong(FRM_CONTACT_ID));
            arap.setNumberOfPayment(this.getInt(FRM_NUMBER_OF_PAYMENT));
            arap.setIdPerkiraanLawan(this.getLong(FRM_ID_PERKIRAAN_LAWAN));
            arap.setIdPerkiraan(this.getLong(FRM_ID_PERKIRAAN));
            arap.setIdCurrency(this.getLong(FRM_ID_CURRENCY));
            arap.setRate(this.getDouble(FRM_RATE));
            arap.setAmount(this.getDouble(FRM_AMOUNT));
            arap.setNotaNo(this.getString(FRM_NOTA_NO));
            arap.setNotaDate(this.getDate(FRM_NOTA_DATE));
            arap.setDescription(this.getString(FRM_DESCRIPTION));
            arap.setArApMainStatus(this.getInt(FRM_ARAP_MAIN_STATUS));
            arap.setArApType(this.getInt(FRM_ARAP_TYPE));
            arap.setArApDocStatus(this.getInt(FRM_ARAP_DOC_STATUS));
            arap.setCounter(this.getInt(FRM_COUNTER));
            arap.setComponentDeductionId(this.getLong(FRM_COMPONENT_DEDUCTION_ID));
            arap.setEmployeeId(this.getLong(FRM_FIELD_EMPLOYEE_ID));
            arap.setEntryDate(this.getDate(FRM_ENTRY_DATE));
            arap.setPeriodeEvery(this.getInt(FRM_PERIOD_EVERY));
            arap.setPeriodeEveryDMY(this.getInt(FRM_PERIOD_EVERY_DMY));
            arap.setStartofpaymentdate(this.getDate(FRM_START_OF_PAYMENT_DATE));
            arap.setPayment_amount_plan(this.getDouble(FRM_PAYMENT_AMOUNT_PLAN));
            arap.setPeriodType(this.getInt(FRM_PERIOD_TYPE));
            arap.setPeriodId(this.getLong(FRM_PERIOD_ID));
            

            this.arap = arap;
        } catch (Exception e) {
            arap = new ArApMain();
        }
    }
}
