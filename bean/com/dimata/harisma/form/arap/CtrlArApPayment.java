/* Generated by Together */

package com.dimata.harisma.form.arap;

import com.dimata.harisma.entity.arap.ArApItem;
import com.dimata.harisma.entity.arap.ArApMain;
import javax.servlet.http.*;

import com.dimata.util.*;
import com.dimata.util.lang.I_Language;
import com.dimata.harisma.entity.arap.PstArApPayment;
import com.dimata.harisma.entity.arap.ArApPayment;
import com.dimata.harisma.entity.arap.PstArApItem;
import com.dimata.harisma.entity.arap.PstArApMain;
import com.dimata.qdep.form.Control;
import java.util.Date;
import java.util.Vector;

public class CtrlArApPayment extends Control implements I_Language {

    public static final int RSLT_OK = 0;
    public static final int RSLT_SAME = 1;
    public static final int RSLT_INCOMPLETE = 2;
    public static final int RSLT_EXIST = 3;
    public static final int RSLT_UNKNOWN = 4;
    public static String resultText[][] = {
        {"OK ...", "Rekening pertama sama dengan rekening kedua ...", "Form belum lengkap ...", "Account link sudah ada ...", "Kesalahan unknown ..."},
        {"OK ...", "First account same as the second one ...", "Form incomplete ...", "Link account already exist ...", "Unknown Error ..."}
    };


    private int start;
    private String msgString;
    private ArApPayment arap;
    private PstArApPayment pstArAp;
    private FrmArApPayment frmArAp;
    private int language = LANGUAGE_DEFAULT;

    public CtrlArApPayment(HttpServletRequest request) {
        msgString = "";
        arap = new ArApPayment();
        try {
            pstArAp = new PstArApPayment(0);
        } catch (Exception e) {
        }
        frmArAp = new FrmArApPayment(request, arap);
    }

    public int getLanguage() {
        return language;
    }

    public void setLanguage(int language) {
        this.language = language;
    }

    public ArApPayment getArApPayment() {
        return arap;
    }

    public FrmArApPayment getForm() {
        return frmArAp;
    }

    public String getMessage() {
        return msgString;
    }

    public int action(int cmd, long Oid) {
        this.start = start;
        int result = RSLT_OK;
        msgString = "";
        switch (cmd) {
            case Command.ADD:
                break;

            case Command.SAVE:
                frmArAp.requestEntityObject(arap);
                arap.setOID(Oid);
                
//String whereclause = "ARAP_ITEM_STATUS = 0 AND DUE_DATE >= " + "\"" + Formater.formatDate(new Date(), "yyyy-MM-dd HH:mm:ss") + "\""; 
                String whereclause = "ARAP_ITEM_STATUS = 0 AND ARAP_MAIN_ID = " + arap.getArapMainId(); 
                Vector arapitem = PstArApItem.list(0, 0, whereclause, "DUE_DATE");
                ArApItem arApItemFirst = (ArApItem)arapitem.get(0);
                
                Date nowdate = new Date();
                
                Date duedate = arApItemFirst.getDueDate();
                duedate.setDate(nowdate.getDate()+3);
                if (duedate.before(nowdate) && arap.getAmount() < 1){
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }
                
                double amountPayment = arap.getAmount();
                for (int i = 0; i<arapitem.size();i++){
                    ArApItem arApItem = (ArApItem)arapitem.get(i);
                    if (amountPayment > 0){
                  //  double angsuranPay = amountPayment - arApItem.getLeftToPay() ;
                    double sisalefttopay = 0 ;
                    if (sisalefttopay < 0){
                        sisalefttopay = Math.abs(sisalefttopay);
                    }
                    
                    if (amountPayment >= arApItem.getLeftToPay()){
                       amountPayment = amountPayment - arApItem.getLeftToPay();
                       sisalefttopay = 0 ;
                    } else {
                        sisalefttopay = arApItem.getLeftToPay() - amountPayment;
                        amountPayment = 0;
                    }
                    
                  
                        if (sisalefttopay < 1){
                         arApItem.setArApItemStatus(1);
                        }
                        arApItem.setLeftToPay(sisalefttopay);
                        
                        try{
                            long save = PstArApItem.updateExc(arApItem);
                           // amountPayment =angsuranPay;
                        } catch (Exception e){
                            System.out.printf("gagal update" + arApItem.getDescription() );
                        }
                    }
                }
                if (frmArAp.errorSize() > 0) {
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }
                 //cek apakah semua lunas
               
                 Vector allitem = PstArApItem.list(0, 0, whereclause, "DUE_DATE");
                if (allitem.size() == 0 || allitem.size() <= 0 ){
                    
                    try{
                        ArApMain arApMain = PstArApMain.fetchExc(arap.getArapMainId());
                        arApMain.setArApMainStatus(1);
                        long updatemain = PstArApMain.updateExc(arApMain);
                    }catch (Exception e){
                        System.out.printf("gagal update arap main" );
                    }
                }
                //update arappayment
                if (arap.getOID() == 0) {
                    try {
                        arap.setAmount(arap.getAmount() - amountPayment);
                        arap = pstArAp.createOrderNomor(arap);
                      
                            
                        long oid = pstArAp.insertExc(this.arap);
                        
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                } else {
                    try {
                        arap.setAmount(arap.getAmount() - amountPayment);
                        arap = pstArAp.createOrderNomor(arap);
                        
                        long oid = pstArAp.updateExc(this.arap);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

 
            case Command.EDIT:
                if (Oid != 0) {
                    try {
                        arap = (ArApPayment) pstArAp.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.ASK:
                if (Oid != 0) {
                    try {
                        arap = (ArApPayment) pstArAp.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.DELETE:
                if (Oid != 0) {
                    PstArApPayment pstArAp = new PstArApPayment();
                    try {
                        long oid = pstArAp.deleteExc(Oid);
                        this.start = 0;
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            default:

        }
        return result;
    }
}
