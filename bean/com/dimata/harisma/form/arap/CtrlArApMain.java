/* Generated by Together */

package com.dimata.harisma.form.arap;

import com.dimata.harisma.entity.arap.ArApItem;
import javax.servlet.http.*;

import com.dimata.util.*;
import com.dimata.util.lang.I_Language;
import com.dimata.harisma.entity.arap.PstArApMain;
import com.dimata.harisma.entity.arap.ArApMain;
import com.dimata.harisma.entity.arap.ArApPayment;
import com.dimata.harisma.entity.arap.PstArApItem;
import com.dimata.harisma.entity.arap.PstArApPayment;
import com.dimata.harisma.entity.masterdata.Period;
import com.dimata.harisma.entity.masterdata.PstPeriod;
import com.dimata.harisma.entity.payroll.Deduction;
import com.dimata.harisma.entity.payroll.PayComponent;
import com.dimata.harisma.entity.payroll.PstPayComponent;
import com.dimata.harisma.entity.periode.PstPeriode;
import com.dimata.harisma.entity.periode.Periode;
import com.dimata.qdep.form.Control;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import java.util.Date;
import java.util.Vector;

public class CtrlArApMain extends Control implements I_Language {

    public static final int RSLT_OK = 0;
    public static final int RSLT_REFERENCE = 1;
    public static final int RSLT_INCOMPLETE = 2;
    public static final int RSLT_CONTACT = 3;
    public static final int RSLT_UNKNOWN = 4;
    public static final int RSLT_ERR_TRANS_DATE = 5;
    public static final int RSLT_ERR_ENTRY_DATE = 6;
    public static final int RSLT_ERR_AMOUNT = 7;
    public static String resultText[][] = {
        {"OK", "Rekening piutang sama dengan rekening lawan", "Form dengan tanda *) belum diisi data", "Account link sudah ada", 
         "Kesalahan unknown", "Tanggal transaksi tidak sesuai", "Tanggal entry tidak sesuai","Nilai transaksi belum dientry"},
        {"OK", "Both main and opposite account is equal", "Form incomplete.Please check required form data", "Link account already exist", 
         "Unknown Error", "Transaction date invalid", "Entry date invalid","Amount is required"}
    };


    private int start;
    private String msgString;
    private ArApMain arap;
    private PstArApMain pstArAp;
    private FrmArApMain frmArAp;
    
    private ArApPayment arApPayment;
    private PstArApPayment pstArApPayment;
    private FrmArApPayment frmArApPayment;
    
    private int language = LANGUAGE_DEFAULT;

    public CtrlArApMain(HttpServletRequest request) {
        msgString = "";
        arap = new ArApMain();
        try {
            pstArAp = new PstArApMain(0); 
        } catch (Exception e) {
        }
        frmArAp = new FrmArApMain(request, arap);
    }

    public int getLanguage() {
        return language;
    }

    public void setLanguage(int language) {
        this.language = language;
    }

    public ArApMain getArApMain() {
        return arap;
    }

    public FrmArApMain getForm() {
        return frmArAp;
    }

    public String getMessage() {
        return msgString;
    }

    public int action(int cmd, long Oid) {
        this.start = start;
        int result = RSLT_OK;
        msgString = "";
        switch (cmd) {
            case Command.ADD:
                break;

            case Command.SAVE:
                frmArAp.requestEntityObject(arap);
                arap.setOID(Oid);
                
                if(frmArAp.errorSize() > 0) {
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }
                
                if(arap.getNotaNo().length() == 0){
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }
                
                
                if(arap.getContactId() == 0){
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }
                
                if(arap.getAmount() == 0){
                    msgString = resultText[language][RSLT_INCOMPLETE];
                    return RSLT_INCOMPLETE;
                }
                
                /*if(arap.getIdPerkiraan() == arap.getIdPerkiraanLawan()){
                    msgString = resultText[language][RSLT_REFERENCE];
                    return RSLT_REFERENCE;
                }*/
                
                // cek tanggal transaksi dan entry
                Date startDate = null;
                Date finishDate = null;
                Date lastDate = null;
//                Vector sessperiode = PstPeriode.getCurrPeriod();
//                if (sessperiode != null && sessperiode.size() > 0) {
//                    Periode periode = (Periode) sessperiode.get(0);
//                    startDate = periode.getTglAwal();
//                    finishDate = periode.getTglAkhir();
//                    lastDate = periode.getTglAkhirEntry();
//                }
//
//                if (arap.getNotaDate().before(startDate) || arap.getNotaDate().after(finishDate)) {
//                    msgString = resultText[language][RSLT_ERR_TRANS_DATE];
//                    return RSLT_ERR_TRANS_DATE;
//                }
//
//                if (arap.getVoucherDate().after(lastDate)) {
//                    arap.setVoucherDate(new Date());
//                    if (arap.getVoucherDate().after(lastDate)) {
//                        msgString = resultText[language][RSLT_ERR_ENTRY_DATE];
//                        return RSLT_ERR_ENTRY_DATE;
//                    }
//                }
               
                if (arap.getOID() == 0) {
                    synchronized(this){
                    try {
                        arap = PstArApMain.createOrderNomor(arap);
                        long oid = pstArAp.insertExc(this.arap);
                        
                        //save item by priska 20150418
                      
                            
                        double angsuran = 0 ;   
                        int jumlahitem = 0;
                        if (arap.getNumberOfPayment() > 0 ){
                            angsuran = (arap.getAmount()/arap.getNumberOfPayment());
                            jumlahitem = arap.getNumberOfPayment();
                        } else {
                            angsuran = (arap.getPayment_amount_plan());
                            jumlahitem = (int)(arap.getAmount()/arap.getPayment_amount_plan());
                        }    
                        
                        double mod = arap.getAmount() % arap.getPayment_amount_plan(); //sisa hasil bagi
                        double div = arap.getAmount() / arap.getPayment_amount_plan(); //pembagi
                        
                        Date startPaymentDate = null;
                        Date endPaymentDate = null;
                        
                        if(arap.getPeriodType() == 1){
                            Period period = new Period();
                            period = PstPeriod.fetchExc(arap.getPeriodId());
                            
                            Calendar calendar = Calendar.getInstance();
                            calendar.setTime(period.getStartDate());
                            startPaymentDate = calendar.getTime();
                            
                            calendar.setTime(period.getEndDate());
                            endPaymentDate = calendar.getTime();
                        } else {
                            startPaymentDate = arap.getStartofpaymentdate();
                        }
                        
                        for (int i = 0 ; i < jumlahitem; i++){
                            ArApItem arApItem = new ArApItem(); 
                            arApItem.setArApMainId(oid);
                            arApItem.setAngsuran(angsuran);
                            
                            arApItem.setLeftToPay(angsuran);
                            PayComponent payComponent = new  PayComponent();
                            try{
                            payComponent = PstPayComponent.fetchExc(arap.getComponentDeductionId());
                            }catch(Exception e){
                                System.out.printf("paycomponent null");
                            }
                            
                            Date cloneStartDate = null;
                            if(arap.getPeriodType() == 1){
                                arApItem.setDueDate(endPaymentDate);
                                arApItem.setDescription(payComponent.getCompName() + " " + String.valueOf(startPaymentDate).toString() +" - "+ String.valueOf(endPaymentDate).toString() );
                                arApItem.setArApItemStatus(0);
                                //arApItem.setDouble(FLD_LEFT_TO_PAY, aktiva.getLeftToPay());
                                arApItem.setCurrencyId(arap.getIdCurrency());
                                arApItem.setRate(arap.getRate());
                                //arApItem.setLong(FLD_SELLING_AKTIVA_ID, aktiva.getSellingAktivaId());
                                //arApItem.setLong(FLD_RECEIVE_AKTIVA_ID, aktiva.getReceiveAktivaId());
                                
                                // start get next date
                                //SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                                Calendar calendar = Calendar.getInstance();
                                calendar.setTime(startPaymentDate);
                                calendar.add(Calendar.MONTH, 1);
                                Date nextStartDate = calendar.getTime();
                                
                                startPaymentDate = nextStartDate;
                                                              
                                calendar.setTime(startPaymentDate);
                                calendar.add(Calendar.MONTH, 1);
                                calendar.set(Calendar.DAY_OF_MONTH, 1);
                                calendar.add(Calendar.DATE, -1);
                                Date nextEndDate = calendar.getTime();
                                
                                endPaymentDate = nextEndDate;
                                // end get next date
                                
                                long saveItem = PstArApItem.insertExc(arApItem);
                            } else {
                                cloneStartDate = (Date) startPaymentDate.clone();
                                int every = arap.getPeriodeEvery();
                                if (arap.getPeriodeEveryDMY() == 0){
                                    cloneStartDate.setDate(cloneStartDate.getDate() + every);
                                } else if (arap.getPeriodeEveryDMY() == 1){
                                    cloneStartDate.setDate(cloneStartDate.getDate() + (7*every));
                                } else if (arap.getPeriodeEveryDMY() == 2){
                                    cloneStartDate.setDate(cloneStartDate.getDate());
                                    cloneStartDate.setMonth(cloneStartDate.getMonth() + every);
                                    cloneStartDate.setYear(cloneStartDate.getYear());
                                } else if (arap.getPeriodeEveryDMY() == 3){
                                    cloneStartDate.setYear(cloneStartDate.getYear() + every);
                                }
                                cloneStartDate.setDate(cloneStartDate.getDate() - 1);

                                arApItem.setDueDate(cloneStartDate);
                                arApItem.setDescription(payComponent.getCompName() + " " + String.valueOf(startPaymentDate).toString() +" - "+ String.valueOf(cloneStartDate).toString() );
                                arApItem.setArApItemStatus(0);
                                //arApItem.setDouble(FLD_LEFT_TO_PAY, aktiva.getLeftToPay());
                                arApItem.setCurrencyId(arap.getIdCurrency());
                                arApItem.setRate(arap.getRate());
                                //arApItem.setLong(FLD_SELLING_AKTIVA_ID, aktiva.getSellingAktivaId());
                                //arApItem.setLong(FLD_RECEIVE_AKTIVA_ID, aktiva.getReceiveAktivaId());


                                long saveItem = PstArApItem.insertExc(arApItem);
                                //int every = arap.getPeriodeEvery();
                                if (arap.getPeriodeEveryDMY() == 0){
                                    startPaymentDate.setDate(startPaymentDate.getDate() + every);
                                } else if (arap.getPeriodeEveryDMY() == 1){
                                    startPaymentDate.setDate(startPaymentDate.getDate() + (7*every));
                                } else if (arap.getPeriodeEveryDMY() == 2){
                                    startPaymentDate.setDate(startPaymentDate.getDate());
                                    startPaymentDate.setMonth(startPaymentDate.getMonth() + every);
                                    startPaymentDate.setYear(startPaymentDate.getYear());
                                } else if (arap.getPeriodeEveryDMY() == 3){
                                    startPaymentDate.setYear(startPaymentDate.getYear() + every);
                                }
                            }
                        }
                        
                        if (mod > 0 && arap.getNumberOfPayment() < 1){
                            ArApItem arApItem = new ArApItem(); 
                            arApItem.setArApMainId(oid);
                            arApItem.setAngsuran(mod);
                            
                            arApItem.setLeftToPay(mod);
                            PayComponent payComponent = new  PayComponent();
                            try{
                            payComponent = PstPayComponent.fetchExc(arap.getComponentDeductionId());
                            }catch(Exception e){
                                System.out.printf("paycomponent null");
                            }
                            
                            Date cloneStartDate = (Date) startPaymentDate.clone();
                            int every = arap.getPeriodeEvery();
                            if (arap.getPeriodeEveryDMY() == 0){
                                cloneStartDate.setDate(cloneStartDate.getDate() + every);
                            } else if (arap.getPeriodeEveryDMY() == 1){
                                cloneStartDate.setDate(cloneStartDate.getDate() + (7*every));
                            } else if (arap.getPeriodeEveryDMY() == 2){
                                cloneStartDate.setDate(cloneStartDate.getDate());
                                cloneStartDate.setMonth(cloneStartDate.getMonth() + every);
                                cloneStartDate.setYear(cloneStartDate.getYear());
                            } else if (arap.getPeriodeEveryDMY() == 3){
                                cloneStartDate.setYear(cloneStartDate.getYear() + every);
                            }
                            cloneStartDate.setDate(cloneStartDate.getDate() - 1);
                            arApItem.setDueDate(cloneStartDate);
                            
                            arApItem.setDescription(payComponent.getCompName() + " " + String.valueOf(startPaymentDate).toString() +" - "+ String.valueOf(cloneStartDate).toString() );
                            arApItem.setArApItemStatus(0);
                            //arApItem.setDouble(FLD_LEFT_TO_PAY, aktiva.getLeftToPay());
                            arApItem.setCurrencyId(arap.getIdCurrency());
                            arApItem.setRate(arap.getRate());
                            //arApItem.setLong(FLD_SELLING_AKTIVA_ID, aktiva.getSellingAktivaId());
                            //arApItem.setLong(FLD_RECEIVE_AKTIVA_ID, aktiva.getReceiveAktivaId());

                            long saveItem = PstArApItem.insertExc(arApItem);
                        }
                    
                        
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;                    
                      }
                    }
                } else {
                    try {
                        
                        arap = PstArApMain.createOrderNomor(arap);
                        long oid = pstArAp.updateExc(this.arap);
                        
                        
                        String where= PstArApItem.fieldNames[PstArApItem.FLD_ARAP_MAIN_ID] + "=" + oid + " AND ANGSURAN != LEFT_TO_PAY";
                        Vector listItem = PstArApItem.list(0, 500, where, null);
                        double angsurantetap = 0;
                        //mencari yang sudah terbayar
                        for (int i = 0; i<listItem.size(); i++ ){
                            ArApItem arApItem = (ArApItem) listItem.get(i);
                              angsurantetap = angsurantetap + (arApItem.getAngsuran()); 
                        }
                        
                        //mencari sisa yang harus dibayar sesuai amount yang baru
                       double newamount =  arap.getAmount() - angsurantetap;
                        
                        PstArApItem.deleteByMainId(oid);
                         //PstArApPayment.deleteByMainId(oid);
                            
                        double mod = newamount % arap.getPayment_amount_plan(); //sisa hasil bagi
                        double div = newamount / arap.getPayment_amount_plan(); //pembagi
                           
                        
                         //save item by priska 20150418
                        double angsuran = 0 ;   
                        int jumlahitem = 0;
                        if (arap.getNumberOfPayment() > 0  ){
                            angsuran = (newamount/arap.getNumberOfPayment());
                            jumlahitem = arap.getNumberOfPayment();
                        } else {
                            angsuran = (arap.getPayment_amount_plan());
                            jumlahitem = (int)(newamount/arap.getPayment_amount_plan());
                        }    
                        
                        Date startPaymentDate = null;
                        Date endPaymentDate = null;
                        
                        if(arap.getPeriodType() == 1){
                            Period period = new Period();
                            period = PstPeriod.fetchExc(arap.getPeriodId());
                            
                            Calendar calendar = Calendar.getInstance();
                            calendar.setTime(period.getStartDate());
                            startPaymentDate = calendar.getTime();
                            
                            calendar.setTime(period.getEndDate());
                            endPaymentDate = calendar.getTime();
                        } else {
                            startPaymentDate = arap.getStartofpaymentdate();
                        }
                        
                        for (int i = 0 ; i < jumlahitem; i++){
                            ArApItem arApItem = new ArApItem(); 
                            arApItem.setArApMainId(oid);
                            arApItem.setAngsuran(angsuran);
                            
                            arApItem.setLeftToPay(angsuran);
                            PayComponent payComponent = new  PayComponent();
                            try{
                            payComponent = PstPayComponent.fetchExc(arap.getComponentDeductionId());
                            }catch(Exception e){
                                System.out.printf("paycomponent null");
                            }
                            
                            Date cloneStartDate = null;
                            if(arap.getPeriodType() == 1){
                                arApItem.setDueDate(endPaymentDate);
                                arApItem.setDescription(payComponent.getCompName() + " " + String.valueOf(startPaymentDate).toString() +" - "+ String.valueOf(endPaymentDate).toString() );
                                arApItem.setArApItemStatus(0);
                                //arApItem.setDouble(FLD_LEFT_TO_PAY, aktiva.getLeftToPay());
                                arApItem.setCurrencyId(arap.getIdCurrency());
                                arApItem.setRate(arap.getRate());
                                //arApItem.setLong(FLD_SELLING_AKTIVA_ID, aktiva.getSellingAktivaId());
                                //arApItem.setLong(FLD_RECEIVE_AKTIVA_ID, aktiva.getReceiveAktivaId());
                                
                                // start get next date
                                //SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                                Calendar calendar = Calendar.getInstance();
                                calendar.setTime(startPaymentDate);
                                calendar.add(Calendar.MONTH, 1);
                                Date nextStartDate = calendar.getTime();
                                
                                startPaymentDate = nextStartDate;
                                                              
                                calendar.setTime(startPaymentDate);
                                calendar.add(Calendar.MONTH, 1);
                                calendar.set(Calendar.DAY_OF_MONTH, 1);
                                calendar.add(Calendar.DATE, -1);
                                Date nextEndDate = calendar.getTime();
                                
                                endPaymentDate = nextEndDate;
                                // end get next date
                                
                                long saveItem = PstArApItem.insertExc(arApItem);
                            } else {
                                cloneStartDate = (Date) startPaymentDate.clone();
                                
                                int every = arap.getPeriodeEvery();
                                if (arap.getPeriodeEveryDMY() == 0){
                                    cloneStartDate.setDate(cloneStartDate.getDate() + every);
                                } else if (arap.getPeriodeEveryDMY() == 1){
                                    cloneStartDate.setDate(cloneStartDate.getDate() + (7*every));
                                } else if (arap.getPeriodeEveryDMY() == 2){
                                    cloneStartDate.setDate(cloneStartDate.getDate());
                                    cloneStartDate.setMonth(cloneStartDate.getMonth() + every);
                                    cloneStartDate.setYear(cloneStartDate.getYear());
                                } else if (arap.getPeriodeEveryDMY() == 3){
                                    cloneStartDate.setYear(cloneStartDate.getYear() + every);
                                }
                                cloneStartDate.setDate(cloneStartDate.getDate() - 1);

                                arApItem.setDueDate(cloneStartDate);
                                arApItem.setDescription(payComponent.getCompName() + " " + String.valueOf(startPaymentDate).toString() +" - "+ String.valueOf(cloneStartDate).toString() );
                                arApItem.setArApItemStatus(0);
                                //arApItem.setDouble(FLD_LEFT_TO_PAY, aktiva.getLeftToPay());
                                arApItem.setCurrencyId(arap.getIdCurrency());
                                arApItem.setRate(arap.getRate());
                                //arApItem.setLong(FLD_SELLING_AKTIVA_ID, aktiva.getSellingAktivaId());
                                //arApItem.setLong(FLD_RECEIVE_AKTIVA_ID, aktiva.getReceiveAktivaId());


                                long saveItem = PstArApItem.insertExc(arApItem);
                                //int every = arap.getPeriodeEvery();
                                if (arap.getPeriodeEveryDMY() == 0){
                                    startPaymentDate.setDate(startPaymentDate.getDate() + every);
                                } else if (arap.getPeriodeEveryDMY() == 1){
                                    startPaymentDate.setDate(startPaymentDate.getDate() + (7*every));
                                } else if (arap.getPeriodeEveryDMY() == 2){
                                    startPaymentDate.setDate(startPaymentDate.getDate());
                                    startPaymentDate.setMonth(startPaymentDate.getMonth() + every);
                                    startPaymentDate.setYear(startPaymentDate.getYear());
                                } else if (arap.getPeriodeEveryDMY() == 3){
                                    startPaymentDate.setYear(startPaymentDate.getYear() + every);
                                }
                            }
                        }
                        
                        if (mod > 0 && arap.getNumberOfPayment() < 1){
                            ArApItem arApItem = new ArApItem(); 
                            arApItem.setArApMainId(oid);
                            arApItem.setAngsuran(mod);
                            
                            arApItem.setLeftToPay(mod);
                            PayComponent payComponent = new  PayComponent();
                            try{
                            payComponent = PstPayComponent.fetchExc(arap.getComponentDeductionId());
                            }catch(Exception e){
                                System.out.printf("paycomponent null");
                            }
                            
                            Date cloneStartDate = (Date) startPaymentDate.clone();
                            int every = arap.getPeriodeEvery();
                            if (arap.getPeriodeEveryDMY() == 0){
                                cloneStartDate.setDate(cloneStartDate.getDate() + every);
                            } else if (arap.getPeriodeEveryDMY() == 1){
                                cloneStartDate.setDate(cloneStartDate.getDate() + (7*every));
                            } else if (arap.getPeriodeEveryDMY() == 2){
                                cloneStartDate.setDate(cloneStartDate.getDate());
                                cloneStartDate.setMonth(cloneStartDate.getMonth() + every);
                                cloneStartDate.setYear(cloneStartDate.getYear());
                            } else if (arap.getPeriodeEveryDMY() == 3){
                                cloneStartDate.setYear(cloneStartDate.getYear() + every);
                            }
                            cloneStartDate.setDate(cloneStartDate.getDate() - 1);
                            
                            arApItem.setDueDate(cloneStartDate);
                            arApItem.setDescription(payComponent.getCompName() + " " + String.valueOf(startPaymentDate).toString() +" - "+ String.valueOf(cloneStartDate).toString() );
                            arApItem.setArApItemStatus(0);
                            //arApItem.setDouble(FLD_LEFT_TO_PAY, aktiva.getLeftToPay());
                            arApItem.setCurrencyId(arap.getIdCurrency());
                            arApItem.setRate(arap.getRate());
                            //arApItem.setLong(FLD_SELLING_AKTIVA_ID, aktiva.getSellingAktivaId());
                            //arApItem.setLong(FLD_RECEIVE_AKTIVA_ID, aktiva.getReceiveAktivaId());

                            long saveItem = PstArApItem.insertExc(arApItem);
                        }
                        
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

               
            case Command.EDIT:
                if (Oid != 0) {
                    try {
                        arap = (ArApMain) pstArAp.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;
            case Command.SUBMIT:
                frmArAp.requestEntityObject(arap);
                arap.setOID(Oid);
                break;
            case Command.ASK:
                if (Oid != 0) {
                    try {
                        arap = (ArApMain) pstArAp.fetchExc(Oid);
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            case Command.DELETE:
                if (Oid != 0) {
                    PstArApMain pstArAp = new PstArApMain();
                    try {
                        long oid = pstArAp.deleteExc(Oid);
                        PstArApItem.deleteByMainId(Oid);
                        PstArApPayment.deleteByMainId(oid);
                        this.start = 0;
                    } catch (Exception exc) {
                        msgString = resultText[language][RSLT_UNKNOWN];
                        return RSLT_UNKNOWN;
                    }
                }
                break;

            default:

        }
        return result;
    }
}
