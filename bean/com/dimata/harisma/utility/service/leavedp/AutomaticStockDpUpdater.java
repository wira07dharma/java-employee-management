/* Generated by Together */

package com.dimata.harisma.utility.service.leavedp;

import com.dimata.harisma.entity.service.*;
import com.dimata.harisma.entity.attendance.LeaveStock;
import com.dimata.harisma.entity.attendance.PstLeaveStock;
import com.dimata.harisma.entity.attendance.PstDpStockManagement;
import com.dimata.harisma.entity.attendance.DpStockManagement;
import com.dimata.harisma.entity.employee.PstEmployee;
import com.dimata.harisma.entity.employee.Employee;
import com.dimata.harisma.entity.leave.I_Leave;
import com.dimata.harisma.entity.leave.LeaveConfigurationParameter;
import com.dimata.harisma.entity.log.PstSysLogger;
import com.dimata.harisma.entity.masterdata.PstPublicHolidays;
import com.dimata.system.entity.PstSystemProperty;
import com.dimata.util.Formater;

import java.util.*;
import java.util.Vector;

public class AutomaticStockDpUpdater implements Runnable {
     private boolean running = false;
         private Date startDate=null;
         private String empLogin = null;
    public AutomaticStockDpUpdater() {
    }

    /**     
     * 1. Pencarian data employee
     * 2. pengecekan public holidays
     * 3. pencarian leave stock
     * 4. pencarian stock dp management
     * 5. proses pengubahan status dp dari NON_AKTIF menjadi AKTIF
     * @created by Gadnyana
     */
    public void run() 
    {        
         I_Leave leaveConfig = null;
                try {
                    leaveConfig = (I_Leave) (Class.forName(PstSystemProperty.getValueByName("LEAVE_CONFIG")).newInstance());
                } catch (Exception e) {
                    System.out.println("Exception : " + e.getMessage());
                    System.out.println("Please contact your system administration to setup system property: LEAVE_CONFIG ");
                }
        long oidPresenceHoliday = 0;
                try {
                    oidPresenceHoliday = Long.parseLong(PstSystemProperty.getValueByName("OID_PRESENCE_HOLIDAY"));
                } catch (Exception e) {
                    System.out.println("Exception : " + e.getMessage());
                    
                }
          LeaveConfigurationParameter leaveConfigurationParameter = new LeaveConfigurationParameter();
          leaveConfigurationParameter.setPresenceHoliday(oidPresenceHoliday);
//        ServiceDpStock stockDpServices = new ServiceDpStock();
//        System.out.println(".:: AutomaticStockDpUpdater service started ... !!!");
//        
//        // added on 20040928
//        boolean firstProcess = true;
//        
//        while (ServiceDpStock.running)   
//        {
//            try 
//            {                
//                // added on 20040928
//                if(firstProcess)
//                {
//                    // sleeping time for first process                    
//                    ServiceConfiguration svcConf = PstServiceConfiguration.getSvcConfigurationByType(PstServiceConfiguration.SERVICE_TYPE_LEAVE);
//                    int sleepTime = getSleepTime(new Date(), svcConf.getStartTime());                                       
//                    System.out.println(".:: First process start running DP updater services, thread now sleep/pause for "+(sleepTime / (60 * 1000))+" minutes ("+sleepTime+" ms)");
//                    Thread.sleep(sleepTime);                                                               
//                       
//                    firstProcess = false;                                         
//                }                
//
//                else
//                {
//                    stockDpServices.processDpStock();
//
//                    // sleeping time for next process                    
//                    ServiceConfiguration svcConf = PstServiceConfiguration.getSvcConfigurationByType(PstServiceConfiguration.SERVICE_TYPE_LEAVE);                        
//
//                    // convert periode (in minutes) to miliseconds (multiply by 60 * 1000)
//                    int sleepTime = svcConf.getPeriode() * 60 * 1000;                        
//                    System.out.println(".:: proses activated DP's finished, thread now sleep/pause for "+svcConf.getPeriode()+" minutes ("+sleepTime+" ms)");
//                    Thread.sleep(sleepTime);                                                                
//                }
//                
//                
//                if (!ServiceDpStock.running)
//                {
//                    System.out.println(".:: AutomaticStockDpUpdater service running status is "+ServiceDpStock.running);
//                    System.out.println(".:: AutomaticStockDpUpdater service stoped ... !!!");
//                    break;
//                }
//            } 
//            catch (Exception e) 
//            {
//                System.out.println(">>> Exception on AutomaticStockDpUpdater service :((");                
//            }
//        }
        //hideen by satrya 2013-03-19
        try 
        {
            this.setRunning(true);
           
            System.out.println(".:: AutomaticStockDPUpdater service started ... !!!");            
            ServiceConfiguration svcConf = PstServiceConfiguration.getSvcConfigurationByType(PstServiceConfiguration.SERVICE_TYPE_LEAVE);
            int sleepTime = getSleepTime(new Date(), svcConf!=null ?svcConf.getStartTime(): new Date());                                       
            if(sleepTime < 5000)
             sleepTime = 5000;
            System.out.println(".:: First process start running DP STOCK services, thread now sleep/pause for "+(sleepTime / (60 * 1000))+" minutes ("+sleepTime+" ms)");

            Date StartDate = getStartDate();
            String empLogin = getEmpLogin();
            while (this.isRunning()) 
               
            {               
                Date EndDate = new Date();
               try{ 
                        //String outL= PstDpStockManagement.checkPaidDPPayable(); 
                        //di hidden sementara masih menunggu diskusi bu ayu 20130325
                      
                        //String outL= "";//PstDpStockManagement.checkPaidDPPayable(); 
                        //update by satrya 2013-02-25
                       if(leaveConfig!=null && leaveConfig.getAutomaticDPStockTaken() && StartDate!=null){
                           long diffStartToFinish = (EndDate.getTime() - StartDate.getTime());
                           int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                                       String where = PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED] + 
                           " = " + PstEmployee.NO_RESIGN;
                            Vector vct = PstEmployee.list(0, 0, where, null);                        
                          Hashtable hashCekDpStock = PstDpStockManagement.hashDPStockCek(StartDate, EndDate);
                             for(int idxDt=0; idxDt<=itDate;idxDt++){
                                Date selectedDate = new Date(StartDate.getTime() + idxDt * 1000L * 60 * 60 * 24);
                                //System.out.println("hasil date DP "+selectedDate + idxDt);
                                ServiceDpStock.processAutomaticStockDPStockThread(selectedDate,empLogin,vct,leaveConfig,hashCekDpStock,leaveConfigurationParameter);
                             }
                       }
                       //prosess pengecekan DP Expired
                     
                       /* belum di lanjutkan Vector listDpManagement = PstDpStockManagement.list(0, 0, PstDpStockManagement.fieldNames[PstDpStockManagement.FLD_DP_STATUS]+"="+PstDpStockManagement.DP_STS_AKTIF,PstDpStockManagement.fieldNames[PstDpStockManagement.FLD_OWNING_DATE]+ " ASC " );
                       if(listDpManagement!=null && listDpManagement.size()>0){
                           for(int idxDpMan=0; idxDpMan<listDpManagement.size();idxDpMan++){
                            DpStockManagement dpStockManagement = (DpStockManagement)listDpManagement.get(idxDpMan);
                                    
                                if (dpStockManagement.getiExceptionFlag() == PstDpStockManagement.EXC_STS_NO && leaveConfig.getDPExpired() ) {

                                    if ((dpStockManagement.getDtExpiredDate().getTime() / (24L * 60L * 60L * 1000L)) < (StartDate!=null?StartDate.getTime():0) / (24L * 60L * 60L * 1000L)) {
                                        //cekExpired = true;
                                    }
                                } else if (dpStockManagement.getiExceptionFlag() == PstDpStockManagement.EXC_STS_YES && leaveConfig.getDPExpired()) {

                                    if (dpStockManagement.getDtExpiredDateExc() != null && (dpStockManagement.getDtExpiredDateExc().getTime() / (24L * 60L * 60L * 1000L)) < (StartDate!=null?StartDate.getTime():0) / (24L * 60L * 60L * 1000L)) {
                                        //cekExpired = true;
                                    }
                                }
                           }
                       }*/
                    }catch(Exception exc){
                        System.out.println(exc);
                    }
                    // sleeping time for next process                    
                    svcConf = PstServiceConfiguration.getSvcConfigurationByType(PstServiceConfiguration.SERVICE_TYPE_LEAVE);                        
                    // convert periode (in minutes) to miliseconds (multiply by 60 * 1000)
                    sleepTime = (svcConf!=null ? svcConf.getPeriode():0) * 60 * 1000;                        
                    System.out.println(".:: proses generate DP's finished, thread now sleep/pause for "+svcConf.getPeriode()+" minutes ("+sleepTime+" ms)");
                    
                    System.out.println("Date start:"+Formater.formatDate(StartDate, "dd-MM-yyyy HH:mm:ss"));
                    Date tmpStartDate = new Date();
                    tmpStartDate.setHours(0);
                    tmpStartDate.setMinutes(0);
                    tmpStartDate.setSeconds(0);
              //artinya jika user menjalankan tgl 29 juni 2013 setelah berganti hari atau besoknya tgl 30 juni agar di ganti
                    StartDate = tmpStartDate;
                    if (!this.isRunning())
                    {
                        this.setRunning(false);
                        break;
                        
                    }
                    Thread.sleep(sleepTime);                                            
                    System.out.println("Date perubahan:"+Formater.formatDate(StartDate, "dd-MM-yyyy HH:mm:ss"));                                                                                                     
                
            }
        }
        catch (Exception e) 
        {
            System.out.println(">>> Exception on AutomaticStockAlUpdater service :((");
        }
    }
    
    /**
     * @param start
     * @param end
     * @return
     */    
    public int getSleepTime(Date start, Date end){
        Date s = new Date();
        Date e = new Date();
        
        s.setHours(start.getHours());
        s.setMinutes(start.getMinutes());
        s.setSeconds(start.getSeconds());
        
        e.setHours(end.getHours());
        e.setMinutes(end.getMinutes());
        e.setSeconds(end.getSeconds());
        
        if(end.getHours() < start.getHours())
        {
            int dtEnd = e.getDate();
            e.setDate(dtEnd+1);
        }        
        
        long st = s.getTime();
        long en = e.getTime();
        long rs = en - st;
        if(rs < 0)
        {
            rs = 0;
        }
        
        return (new Long(rs)).intValue();
    }    

    /**
     * @return the running
     */
    public boolean isRunning() {
        return running;
    }

    /**
     * @param running the running to set
     */
    public void setRunning(boolean running) {
        this.running = running;
    }

    /**
     * @return the startDate
     */
    public Date getStartDate() {
        return startDate;
    }

    /**
     * @param startDate the startDate to set
     */
    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    /**
     * @return the empLogin
     */
    public String getEmpLogin() {
        return empLogin;
    }

    /**
     * @param empLogin the empLogin to set
     */
    public void setEmpLogin(String empLogin) {
        this.empLogin = empLogin;
    }
    
}
