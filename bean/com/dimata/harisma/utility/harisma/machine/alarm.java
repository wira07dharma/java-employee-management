package com.dimata.harisma.utility.harisma.machine;


import com.dimata.harisma.session.aplikasidesktop.attendance.SessAplicationDestopAbsensiAttendance;
import com.dimata.harisma.utility.harisma.machine.db.DBHandler;
import com.dimata.harisma.utility.harisma.machine.transferdataemployee.ServiceEmployeeOutletTransferAutoD;
import com.dimata.harisma.utility.harisma.machine.transferdataemployee.ServiceTransferDataPresenceAutoU;
import com.dimata.harisma.utility.harisma.masterdatadesktop.entity.KonfigurasiMasterOutletSetting;
import com.dimata.harisma.utility.harisma.masterdatadesktop.entity.PstKonfigurasiOutletSetting;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Time;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

public class alarm extends javax.swing.JFrame {

    SessAplicationDestopAbsensiAttendance sessAplicationDestopAbsensiAttendance = new SessAplicationDestopAbsensiAttendance();
    ServiceEmployeeOutletTransferAutoD serviceEmployeeOutletTransferAutoD = ServiceEmployeeOutletTransferAutoD.getInstance(false);
    ServiceTransferDataPresenceAutoU serviceTransferDataPresenceAutoU = ServiceTransferDataPresenceAutoU.getInstance(false);
    
    /**
     * Creates By Priska 20150626
     */
    public alarm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jammm = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jamdatabase = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        labelstatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Auto Update");
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jammm.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jammm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jammm.setText("jam");
        jammm.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jammmPropertyChange(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setText("Update  Jam :");

        jamdatabase.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jamdatabase.setText("--:--:--");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jamdatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jamdatabase))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jammm, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelstatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labelstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jammm, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-230)/2, (screenSize.height-98)/2, 230, 98);
    }// </editor-fold>//GEN-END:initComponents

    
    private void DownloadAuto() {                                                 
        // TODO add your handling code here:
        String noLocation = "";//DBHandler.getMesinLocation();
        try {
            noLocation = DBHandler.getMesinLocation();
        } catch (Exception exc) {
            System.out.printf("Please insert no mesin in outletHarisma.xml");
            //  msgDownloadData.setText("Please insert no mesin in outletHarisma.xml" + exc);
        }
                
            Date dtStartEmpOutlet = new Date(); 
            dtStartEmpOutlet.setDate(dtStartEmpOutlet.getDate()-4);
            dtStartEmpOutlet.setMonth(dtStartEmpOutlet.getMonth());
            dtStartEmpOutlet.setYear(dtStartEmpOutlet.getYear());
        
            Date dtEndEmpOutlet = new Date(); 
            // maka lalukan download sesuai parameter
            //serviceEmployeeOutletTransfer = ServiceEmployeeOutletTransfer.getInstance(false);
            //serviceEmployeeOutletTransfer = ServiceEmployeeOutletTransfer.getInstance(false);
            serviceEmployeeOutletTransferAutoD = ServiceEmployeeOutletTransferAutoD.getInstance(true);
            if (noLocation != null && noLocation.length() > 0) {
                //if (!serviceEmployeeOutletTransfer.getStatus() && btnRunDtEmployee.getText().equalsIgnoreCase("Run")) {
                
                if (!serviceEmployeeOutletTransferAutoD.getStatus() ) {
                  
                    try {
                        serviceEmployeeOutletTransferAutoD.startService(dtStartEmpOutlet, dtEndEmpOutlet, noLocation, true, true, true, true,"",jProgressBar1);
                      
                        //serviceEmployeeOutletTransferAutoD.startService(dtStartEmpOutlet, dtEndEmpOutlet, noLocation, cboxEmpOutlet.isSelected(), cboxEmpSchedule.isSelected(), cboxScheduleSymbol.isSelected(), cboxKadivMapping.isSelected(),txtInputParamSch.getText(), jProgressBarDtEmployee, msgDownloadData, btnRunDtEmployee);
                        //btnRunDtEmployee.setText("Stop");
                        labelstatus.setText("Download Data..");
                        if (serviceEmployeeOutletTransferAutoD != null) {
                        //    msgDownloadData.setText(serviceEmployeeOutletTransfer.getMessageTransferEmployee());
                        }
                    } catch (Exception e) {
                       // msgDownloadData.setText("\t Exception svrmgrMachine.startTransfer() = " + e);
                    }
                } else {
                    try {
                        serviceEmployeeOutletTransferAutoD.stopService();
                        this.dispose();
                        alarm.this.dispose();
                        labelstatus.setText("---");
                      //  btnRunDtEmployee.setText("Run");
                    } catch (Exception e) {
                     //   msgDownloadData.setText("\t Exception svrmgrMachine.stopWatcherMachine() = " + e);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "<html> Please insert no mesin in outletHarisma.xml </html>", "Inane warning", JOptionPane.WARNING_MESSAGE);
            }
        
    } 
    
      private void UploadAuto() {                                                 
        // TODO add your handling code here:
        String noLocation = "";//DBHandler.getMesinLocation();
        try {
            noLocation = DBHandler.getMesinLocation();
        } catch (Exception exc) {
            System.out.printf("Please insert no mesin in outletHarisma.xml");
            //  msgDownloadData.setText("Please insert no mesin in outletHarisma.xml" + exc);
        }
                
            Date dtStartEmpOutlet = new Date(); 
            dtStartEmpOutlet.setDate(dtStartEmpOutlet.getDate()-5);
            dtStartEmpOutlet.setMonth(dtStartEmpOutlet.getMonth());
            dtStartEmpOutlet.setYear(dtStartEmpOutlet.getYear());
        
            Date dtEndEmpOutlet = new Date(); 
            // maka lalukan download sesuai parameter
            
            serviceTransferDataPresenceAutoU = ServiceTransferDataPresenceAutoU.getInstance(true);
                if (noLocation != null && noLocation.length() > 0) {
                    if (!serviceTransferDataPresenceAutoU.getStatus() ) {
                        try {
                            serviceTransferDataPresenceAutoU.startService(dtStartEmpOutlet, dtEndEmpOutlet, noLocation, jProgressBar1);
                          //  btnRunInformation.setText("Stop");
                            labelstatus.setText("Upload Data..");
                        } catch (Exception e) {
                           // msgUploadDataPresence.setText("\t Exception svrmgrMachine.startTransfer() = " + e);
                        }
                    } else {
                        try {
                            serviceTransferDataPresenceAutoU.stopService();
                           // btnRunDtEmployee.setText("Run");
                            labelstatus.setText("---");
                        } catch (Exception e) {
                           // msgUploadDataPresence.setText("\t Exception svrmgrMachine.stopWatcherMachine() = " + e);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "<html> Please insert no mesin in outletHarisma.xml </html>", "Inane warning", JOptionPane.WARNING_MESSAGE);
                }
        
    } 
    
    /////////////////////
    
      private void jam() {
          String jamnya = PstKonfigurasiOutletSetting.getAutoStart("", 0, 0);
          jamdatabase.setText(jamnya);
          ActionListener taskPerformer=new ActionListener(){
            public void actionPerformed(ActionEvent evt){
                String nol_bulan="";
                String nol_hari="";
                String nol_jam="";
                String nol_menit="";
                String nol_detik="";
                Calendar dt=Calendar.getInstance();
              
                int nilai_jam=dt.get(Calendar.HOUR_OF_DAY);
                int nilai_menit=dt.get(Calendar.MINUTE);
                int nilai_detik=dt.get(Calendar.SECOND);
                
               
                if(nilai_jam<=9){
                    nol_jam="0";
                }
                if(nilai_menit<=9){
                    nol_menit="0";
                }
                if(nilai_detik<=9){
                    nol_detik="0";
                }
                
                String jam=nol_jam+Integer.toString(nilai_jam);
                String menit=nol_menit+Integer.toString(nilai_menit);
                String detik=nol_detik+Integer.toString(nilai_detik);
              jammm.setText(jam+":"+menit+":"+detik);

            }
            };
            new javax.swing.Timer(1000,taskPerformer).start();
    }
    
    
   
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
jam(); 
    }//GEN-LAST:event_formWindowOpened

    private void jammmPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jammmPropertyChange
        String jamnya = "";
        try {
               jamnya = PstKonfigurasiOutletSetting.getAutoStart("", 0, 0);
        } catch (Exception e){
            int menitN = (int) Math.floor(Math.random()*50);
            int jamN = (int) Math.floor(Math.random()*2);
            if (jamN > 2){
                jamN = 1;
                jamN = jamN + 7;
            } 
            
            if (menitN > 59){
                menitN = 15;
            } 
            if (menitN <= 9 ){
                jamnya = "0"+jamN+":0"+menitN+":00";
            } else {
                jamnya = "0"+jamN+":"+menitN+":00";
            }
            
        }
//        
//        if (jamnya == ""){
//               jamnya = "10:00:00";
//        }
//        
        Object JamOb = jamnya;
            if (jammm.getText().equals(JamOb) || jammm.getText() == jamnya ) {
            
            java.sql.Connection connectionsql = null;
                try{
                    connectionsql = (java.sql.Connection) com.dimata.qdep.db.DBHandler.getDBConnection();
                    System.out.println(" connection "+(connectionsql!=null));
                }catch (Exception e){

                }
                if (connectionsql != null){
                JOptionPane.showMessageDialog(rootPane, "Auto Download Start");
                //UploadAuto();
                DownloadAuto();
                } else {
                     alarm.this.dispose();
                }
            }
            
            
            Time newTime = Time.valueOf(jamnya);
            newTime.setMinutes(newTime.getMinutes() + 6);
            String StringNewTime = String.valueOf(newTime);
            Object ObjectNewTime = StringNewTime;
            
            if (jammm.getText().equals(ObjectNewTime) || jammm.getText() == StringNewTime ) {
            
                java.sql.Connection connectionsql = null;
                try{
                    connectionsql = (java.sql.Connection) com.dimata.qdep.db.DBHandler.getDBConnection();
                    System.out.println(" connection "+(connectionsql!=null));
                }catch (Exception e){

                }
                if (connectionsql != null){
                JOptionPane.showMessageDialog(rootPane, "Auto Upload Start");
                //UploadAuto();
                //DownloadAuto();
                
                } else {
                    alarm.this.dispose(); 
                }

            }
            
//            Time newTimeStop = Time.valueOf(jamnya);
//            newTimeStop.setMinutes(newTimeStop.getMinutes() + 10);
//            String StringNewTimeStop = String.valueOf(newTimeStop);
//            Object ObjectNewTimeStop = StringNewTimeStop;
//            Time jamonline = Time.valueOf(jammm.getText().toString());
//           if (jamonline.getTime() > newTimeStop.getTime()) {
//            
//                JOptionPane.showMessageDialog(rootPane, "Waktu update sudah lewat");
//                
//                alarm.this.dispose();
//                serviceEmployeeOutletTransferAutoD.stopService();
//                serviceTransferDataPresenceAutoU.stopService();
//            }
            
    }//GEN-LAST:event_jammmPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(alarm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(alarm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(alarm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(alarm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new alarm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel jamdatabase;
    private javax.swing.JLabel jammm;
    private javax.swing.JLabel labelstatus;
    // End of variables declaration//GEN-END:variables
}
