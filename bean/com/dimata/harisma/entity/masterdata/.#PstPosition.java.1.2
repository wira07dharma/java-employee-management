
/* Created on 	:  [date] [time] AM/PM 
 * 
 * @author  	:  [authorName] 
 * @version  	:  [version] 
 */
/*******************************************************************
 * Class Description 	: [project description ... ] 
 * Imput Parameters 	: [input parameter ...] 
 * Output 		: [output ...] 
 *******************************************************************/
package com.dimata.harisma.entity.masterdata;

/* package java */
import java.io.*;
import java.sql.*;
import java.util.*;
import java.util.Date;

/* package qdep */
import com.dimata.util.lang.I_Language;
import com.dimata.qdep.db.*;
import com.dimata.qdep.entity.*;

/* package  harisma */
import com.dimata.harisma.entity.employee.*;

public class PstPosition extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language{

    public static final String SESS_HR_POSITION = "SESS_HR_POSITION";
    public static final String TBL_HR_POSITION = "hr_position";
    public static final int FLD_POSITION_ID = 0;
    public static final int FLD_POSITION = 1;
    public static final int FLD_DESCRIPTION = 2;
    public static final int FLD_POSITION_LEVEL = 3;
    public static final int FLD_DISABLED_APP_UNDER_SUPERVISOR = 4;
    public static final int FLD_DISABLED_APP_DEPT_SCOPE = 5;
    public static final int FLD_DISABLED_APP_DIV_SCOPE = 6;
    public static final int FLD_ALL_DEPARTMENT = 7;    
    public static final int FLD_DEDLINE_SCH_BEFORE = 8;
    public static final int FLD_DEDLINE_SCH_AFTER = 9;
    public static final int FLD_DEDLINE_SCH_LEAVE_BEFORE = 10;
    public static final int FLD_DEDLINE_SCH_LEAVE_AFTER = 11;
    //Gede_8Maret2012{
    public static final int FLD_HEAD_TITLE = 12;
    //update by satrya 2012-10-19
    public static final int FLD_POSITION_LEVEL_PAYROL = 13;
    
    //update by satrya 2014-03-06
    public static final int FLD_POSITION_KODE = 14;
    //update by satrya 2014-04-18
    public static final int FLD_FLAG_POSITION_SHOW_IN_PAYROLL_INPUT=15;
    /* update by Hendra Putu 2015-08-15 */
    public static final int FLD_START_DATE = 16;
    public static final int FLD_END_DATE = 17;
    //}
    public static final String[] fieldNames = {
        "POSITION_ID",
        "POSITION",
        "DESCRIPTION",
        "POSITION_LEVEL",
        "DISABLED_APP_UNDER_SUPERVISOR",
        "DISABLED_APP_DEPT_SCOPE",
        "DISABLED_APP_DIV_SCOPE",
        "ALL_DEPARTMENT",
        "DEDLINE_SCH_BEFORE",
        "DEDLINE_SCH_AFTER",
        "DEDLINE_SCH_LEAVE_BEFORE",
        "DEDLINE_SCH_LEAVE_AFTER",
        //Gede_8Maret2012{
        "HEAD_TITLE",
        //update by satrya 2012-10-19
        "POSITION_LEVEL_PAYROL",
        "POSITION_KODE",
        "FLAG_POSITION_SHOW_IN_PAYROLL_INPUT",
        "START_DATE",
        "END_DATE"
       //}
    };
    
    public static final int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,       
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        //Gede_8Maret2012{
        TYPE_INT,
        //update by satrya 2012-10-19
        TYPE_INT,
        TYPE_STRING,
        //update by satrya 2014-04-18
        TYPE_INT,
        TYPE_DATE,
        TYPE_DATE
        //}
    };
    
    public static final int LEVEL_GENERAL = 0;
    public static final int LEVEL_SECRETARY = 1;
    public static final int LEVEL_SUPERVISOR = 2;
    public static final int LEVEL_ASST_MANAGER = 3; 
    public static final int LEVEL_MANAGER = 4;  // before 3
    public static final int LEVEL_ASST_DIRECTOR = 5;
    public static final int LEVEL_DIRECTOR = 6;
    public static final int LEVEL_GENERAL_MANAGER = 7; // before 4
        
    public static final String[] strPositionLevelNames = {
        "Staff",
        "Secretary",
        "Supervisor",
        "Asst. Manager",
        "Manager",
        "Asst. Director",
        "Director",
        "VP/General Manager",
        "Operator",
        "Officer",
        "Junior Manager"
    };
    
    public static final String[] strPositionLevelValue = {
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
    };

    public static final int[] strPositionLevelInt = {
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
    };


    //Gede_8Maret2012
    //Head title{
    public static final int HEAD_TITLE_NONE = 0;
    public static final int HEAD_TITLE_SECTION = 1;
    public static final int HEAD_TITLE_DEPARTMENT = 2;
    public static final int HEAD_TITLE_DIVISION = 3;
    public static final int HEAD_TITLE_COMPANY = 4;
    public static final int HEAD_TITLE_BOARD = 5;

    public static final String[] strHeadTitle = {
        "None",
        "Section Head",
        "Department Head",
        "Division Head",
        "Company Head",
        "Board of Director",

    };
    public static final int[] strHeadTitleInt = {
        0,
        1,
        2,
        3,
        4,
        5,
    };

    //}
    /**
     * create by satrya 2014-04-18
     */
    public static final int NO_SHOW_PAY_INPUT = 0;
     public static final int YES_SHOW_PAY_INPUT = 1;
     public static final String[] strShowPayInput = {
        "No",
        "Yes"
    };
    
    public static final int DISABLED_APP_UNDER_SUPERVISOR_FALSE = 0;
    public static final int DISABLED_APP_UNDER_SUPERVISOR_TRUE = 1;
    public static final int DISABLED_APP_DEPT_SCOPE_FALSE = 0;
    public static final int DISABLED_APP_DEPT_SCOPE_TRUE = 1;
    public static final int DISABLED_APP_DIV_SCOPE_FALSE = 0;
    public static final int DISABLED_APP_DIV_SCOPE_TRUE = 1;
    public static final int ALL_DEPARTMENT_FALSE = 0;
    public static final int ALL_DEPARTMENT_TRUE = 1;
    
    /* configurasi untuk update schedule ( batas update schedule ) */
    public static final int UPDATE_SCHEDULE_BEFORE_TIME           = 0;
    public static final int UPDATE_SCHEDULE_AFTER_TIME            = 1;
    public static final int UPDATE_SCHEDULE_LEAVE_BEFORE_TIME     = 2;
    public static final int UPDATE_SCHEDULE_LEAVE_AFTER_TIME      = 3;    
    
    public static final int HOUR_UNLIMITED  = 8640; /* 360 hari x 24 jam */
    public static final int NO_HOUR         = -1;   /* value tidak bisa merubah schedule */

    public PstPosition() {
    }

    public PstPosition(int i) throws DBException {
        super(new PstPosition());
    }

    public PstPosition(String sOid) throws DBException {
        super(new PstPosition(0));
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public PstPosition(long lOid) throws DBException {
        super(new PstPosition(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_HR_POSITION;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstPosition().getClass().getName();
    }

    public long fetchExc(Entity ent) throws Exception {
        Position position = fetchExc(ent.getOID());
        ent = (Entity) position;
        return position.getOID();
    }

    public long insertExc(Entity ent) throws Exception {
        return insertExc((Position) ent);
    }

    public long updateExc(Entity ent) throws Exception {
        return updateExc((Position) ent);
    }

    public long deleteExc(Entity ent) throws Exception {
        if (ent == null) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static Position fetchExc(long oid) throws DBException {
        try {
            Position position = new Position();
            PstPosition pstPosition = new PstPosition(oid);
            position.setOID(oid);

            position.setPosition(pstPosition.getString(FLD_POSITION));
            position.setDescription(pstPosition.getString(FLD_DESCRIPTION));
            position.setPositionLevel(pstPosition.getInt(FLD_POSITION_LEVEL));

            position.setDisabledAppUnderSupervisor(pstPosition.getInt(FLD_DISABLED_APP_UNDER_SUPERVISOR));
            position.setDisabledAppDeptScope(pstPosition.getInt(FLD_DISABLED_APP_DEPT_SCOPE));
            position.setDisabedAppDivisionScope(pstPosition.getInt(FLD_DISABLED_APP_DIV_SCOPE));
            position.setAllDepartment(pstPosition.getInt(FLD_ALL_DEPARTMENT));

            //Gede_8Maret2012{
            position.setHeadTitle(pstPosition.getInt(FLD_HEAD_TITLE));
            //update by satrya 2012-10-19
            position.setPositionLevelPayrol(pstPosition.getInt(FLD_POSITION_LEVEL_PAYROL));
            
            //update by satrya 2014-03-06
            position.setKodePosition(pstPosition.getString(FLD_POSITION_KODE));
             //update by satrya 2014-04-18
            position.setFlagShowPayInput(pstPosition.getInt(FLD_FLAG_POSITION_SHOW_IN_PAYROLL_INPUT));
            
            position.setStartDate(pstPosition.getDate(FLD_START_DATE));
            position.setEndDate(pstPosition.getDate(FLD_END_DATE));
            //}

            /*position.setDeadlineScheduleBefore(pstPosition.getInt(FLD_DEDLINE_SCH_BEFORE));
            position.setDeadlineScheduleAfter(pstPosition.getInt(FLD_DEDLINE_SCH_AFTER));
            position.setDeadlineScheduleLeaveBefore(pstPosition.getInt(FLD_DEDLINE_SCH_LEAVE_BEFORE));
            position.setDeadlineScheduleLeaveAfter(pstPosition.getInt(FLD_DEDLINE_SCH_LEAVE_AFTER));


             */
            return position;
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPosition(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(Position position) throws DBException {
        try {
            PstPosition pstPosition = new PstPosition(0);

            pstPosition.setString(FLD_POSITION, position.getPosition());
            pstPosition.setString(FLD_DESCRIPTION, position.getDescription());
            pstPosition.setInt(FLD_POSITION_LEVEL, position.getPositionLevel());

            pstPosition.setInt(FLD_DISABLED_APP_UNDER_SUPERVISOR, position.getDisabledAppUnderSupervisor());
            pstPosition.setInt(FLD_DISABLED_APP_DEPT_SCOPE, position.getDisabledAppDeptScope());

            pstPosition.setInt(FLD_DISABLED_APP_DIV_SCOPE, position.getDisabedAppDivisionScope());
            pstPosition.setInt(FLD_ALL_DEPARTMENT, position.getAllDepartment());

            //Gede_8Maret2012{
            pstPosition.setInt(FLD_HEAD_TITLE, position.getHeadTitle());
            //update by satrya 2012-10-19
            pstPosition.setInt(FLD_POSITION_LEVEL_PAYROL, position.getPositionLevelPayrol());
            
            //update by satrya 2014-03-06
            pstPosition.setString(FLD_POSITION_KODE, position.getKodePosition());
             //update by satrya 2014-04-18
            pstPosition.setInt(FLD_FLAG_POSITION_SHOW_IN_PAYROLL_INPUT, position.getFlagShowPayInput());
            //}
            pstPosition.setDate(FLD_START_DATE, position.getStartDate());
            pstPosition.setDate(FLD_END_DATE, position.getEndDate());

            /*pstPosition.setInt(FLD_DEDLINE_SCH_BEFORE, position.getDeadlineScheduleBefore());
            pstPosition.setInt(FLD_DEDLINE_SCH_AFTER, position.getDeadlineScheduleAfter());
            pstPosition.setInt(FLD_DEDLINE_SCH_LEAVE_BEFORE, position.getDeadlineScheduleLeaveBefore());
            pstPosition.setInt(FLD_DEDLINE_SCH_LEAVE_AFTER, position.getDeadlineScheduleLeaveAfter());

             *
             */
            pstPosition.insert();
            position.setOID(pstPosition.getlong(FLD_POSITION_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPosition(0), DBException.UNKNOWN);
        }
        return position.getOID();
    }

    public static long updateExc(Position position) throws DBException {
        try {
            if (position.getOID() != 0) {
                PstPosition pstPosition = new PstPosition(position.getOID());

                pstPosition.setString(FLD_POSITION, position.getPosition());
                pstPosition.setString(FLD_DESCRIPTION, position.getDescription());
                pstPosition.setInt(FLD_POSITION_LEVEL, position.getPositionLevel());

                pstPosition.setInt(FLD_DISABLED_APP_UNDER_SUPERVISOR, position.getDisabledAppUnderSupervisor());
                pstPosition.setInt(FLD_DISABLED_APP_DEPT_SCOPE, position.getDisabledAppDeptScope());

                pstPosition.setInt(FLD_DISABLED_APP_DIV_SCOPE, position.getDisabedAppDivisionScope());
                pstPosition.setInt(FLD_ALL_DEPARTMENT, position.getAllDepartment());

                //Gede_8Maret2012{
                pstPosition.setInt(FLD_HEAD_TITLE, position.getHeadTitle());
                pstPosition.setInt(FLD_POSITION_LEVEL_PAYROL, position.getPositionLevelPayrol());
                //update by satrya 2014-03-06
                pstPosition.setString(FLD_POSITION_KODE, position.getKodePosition());
                
                 //update by satrya 2014-04-18
                pstPosition.setInt(FLD_FLAG_POSITION_SHOW_IN_PAYROLL_INPUT, position.getFlagShowPayInput());
                //}
                pstPosition.setDate(FLD_START_DATE, position.getStartDate());
                pstPosition.setDate(FLD_END_DATE, position.getEndDate());

                /*pstPosition.setInt(FLD_DEDLINE_SCH_BEFORE, position.getDeadlineScheduleBefore());
                pstPosition.setInt(FLD_DEDLINE_SCH_AFTER, position.getDeadlineScheduleAfter());
                pstPosition.setInt(FLD_DEDLINE_SCH_LEAVE_BEFORE, position.getDeadlineScheduleLeaveBefore());
                pstPosition.setInt(FLD_DEDLINE_SCH_LEAVE_AFTER, position.getDeadlineScheduleLeaveAfter());
                *
                 *
                 */
                pstPosition.update();
                return position.getOID();

            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPosition(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long oid) throws DBException {
        try {
            PstPosition pstPosition = new PstPosition(oid);
            pstPosition.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstPosition(0), DBException.UNKNOWN);
        }
        return oid;
    }

    public static Vector listAll() {
        return list(0, 500, "", "");
    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_HR_POSITION;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }
            if (limitStart == 0 && recordToGet == 0) {
                sql = sql + "";
            } else {
                sql = sql + " LIMIT " + limitStart + "," + recordToGet;
            }
           // System.out.println("sql : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Position position = new Position();
                resultToObject(rs, position);
                lists.add(position);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    
    
    /**
     * create by devin 2014-04-09
     * @param limitStart
     * @param recordToGet
     * @param whereClause
     * @param order
     * @return 
     */
     public static Hashtable listt(int limitStart, int recordToGet, String whereClause, String order) {
        Hashtable listt = new Hashtable();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_HR_POSITION;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }
            if (limitStart == 0 && recordToGet == 0) {
                sql = sql + "";
            } else {
                sql = sql + " LIMIT " + limitStart + "," + recordToGet;
            }
           // System.out.println("sql : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Position position = new Position();
                resultToObject(rs, position);
                listt.put(""+position.getOID(), position.getPosition());
            }
           

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
            return listt;
        }
      
    }
     
    
    //update by satrya 2012-10-08
    /**
     * Keterangan : mencari level position dari tabel postion berdasarkan employe ID
     * @param empId
     * @return 
     */
    public static int iGetPositionLevel(long empId) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT HP."+PstPosition.fieldNames[PstPosition.FLD_POSITION_LEVEL]
                    +" FROM " + PstEmployee.TBL_HR_EMPLOYEE + " AS HE INNER JOIN "
                    + TBL_HR_POSITION + " AS HP ON(HE."+PstEmployee.fieldNames[PstEmployee.FLD_POSITION_ID]
                    + " = HP."+PstPosition.fieldNames[PstPosition.FLD_POSITION_ID]+")" + " WHERE HE."
                    +PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID] + " = " + empId;
            //System.out.println("sql : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            int ilistLevel=0;
            while (rs.next()) {
                ilistLevel = rs.getInt(1);
            }
            rs.close();
            return ilistLevel;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
        
    }

    /**
     * Keterangan: untuk mengetahui posisi apa karywawan tsb
     * create by satrya 2014-01-31
     * @return 
     */
    public static Hashtable hashGetPositionLevel() {
        Hashtable hashPositionLevel = new Hashtable();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT HP."+PstPosition.fieldNames[PstPosition.FLD_POSITION_LEVEL]
                    +", HE."+PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]
                    +" FROM " + PstEmployee.TBL_HR_EMPLOYEE + " AS HE INNER JOIN "
                    + TBL_HR_POSITION + " AS HP ON(HE."+PstEmployee.fieldNames[PstEmployee.FLD_POSITION_ID]
                    + " = HP."+PstPosition.fieldNames[PstPosition.FLD_POSITION_ID]+")"; 
            //System.out.println("sql : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                
                hashPositionLevel.put(rs.getLong("HE."+PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]), rs.getInt("HP."+PstPosition.fieldNames[PstPosition.FLD_POSITION_LEVEL]));
            }
            rs.close();
            return hashPositionLevel;
        } catch (Exception e) {
            //return hashPositionLevel;
            System.out.println("Exc"+e);
        } finally {
            DBResultSet.close(dbrs);
            return hashPositionLevel;
        }
        
    }
    /**
     * create by satrya 2014-03-11
     * keterangan: untuk mengambil objeck Postion
     * @return 
     */
     public static Hashtable hashGetPosition() {
        Hashtable hashPositionLevel = new Hashtable();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT HP.*"
                    +", HE."+PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]
                    +" FROM " + PstEmployee.TBL_HR_EMPLOYEE + " AS HE INNER JOIN "
                    + TBL_HR_POSITION + " AS HP ON(HE."+PstEmployee.fieldNames[PstEmployee.FLD_POSITION_ID]
                    + " = HP."+PstPosition.fieldNames[PstPosition.FLD_POSITION_ID]+")"; 
            //System.out.println("sql : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Position position = new Position();
                resultToObject(rs, position);
                hashPositionLevel.put(""+rs.getLong("HE."+PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]),position);
            }
            rs.close();
            return hashPositionLevel;
        } catch (Exception e) {
            //return hashPositionLevel;
            System.out.println("Exc"+e);
        } finally {
            DBResultSet.close(dbrs);
            return hashPositionLevel;
        }
        
    }
    public static void resultToObject(ResultSet rs, Position position){
        
        try {
            
            position.setOID(rs.getLong(PstPosition.fieldNames[PstPosition.FLD_POSITION_ID]));
            position.setPosition(rs.getString(PstPosition.fieldNames[PstPosition.FLD_POSITION]));
            position.setDescription(rs.getString(PstPosition.fieldNames[PstPosition.FLD_DESCRIPTION]));
            position.setPositionLevel(rs.getInt(PstPosition.fieldNames[PstPosition.FLD_POSITION_LEVEL]));

            position.setDisabledAppUnderSupervisor(rs.getInt(PstPosition.fieldNames[PstPosition.FLD_DISABLED_APP_UNDER_SUPERVISOR]));
            position.setDisabledAppDeptScope(rs.getInt(PstPosition.fieldNames[PstPosition.FLD_DISABLED_APP_DEPT_SCOPE]));
            position.setDisabedAppDivisionScope(rs.getInt(PstPosition.fieldNames[PstPosition.FLD_DISABLED_APP_DIV_SCOPE]));
            position.setAllDepartment(rs.getInt(PstPosition.fieldNames[PstPosition.FLD_ALL_DEPARTMENT]));
            
            //Gede_8Maret2012{
            position.setHeadTitle(rs.getInt(PstPosition.fieldNames[PstPosition.FLD_HEAD_TITLE]));
            //}
            ///update by satrya 2012-10-19
            position.setPositionLevelPayrol(rs.getInt(PstPosition.fieldNames[PstPosition.FLD_POSITION_LEVEL_PAYROL]));

            //update by satrya 2014-03-06
            position.setKodePosition(rs.getString(PstPosition.fieldNames[PstPosition.FLD_POSITION_KODE]));
            //update by satrya 2014-04-18
            position.setFlagShowPayInput(rs.getInt(PstPosition.fieldNames[PstPosition.FLD_FLAG_POSITION_SHOW_IN_PAYROLL_INPUT]));
            
            position.setStartDate(rs.getDate(PstPosition.fieldNames[PstPosition.FLD_START_DATE]));
            position.setEndDate(rs.getDate(PstPosition.fieldNames[PstPosition.FLD_END_DATE]));
            /*osition.setDeadlineScheduleBefore(rs.getInt(PstPosition.fieldNames[PstPosition.FLD_DEDLINE_SCH_BEFORE]));
            position.setDeadlineScheduleAfter(rs.getInt(PstPosition.fieldNames[PstPosition.FLD_DEDLINE_SCH_AFTER]));
            position.setDeadlineScheduleLeaveBefore(rs.getInt(PstPosition.fieldNames[PstPosition.FLD_DEDLINE_SCH_LEAVE_BEFORE]));
            position.setDeadlineScheduleLeaveAfter(rs.getInt(PstPosition.fieldNames[PstPosition.FLD_DEDLINE_SCH_LEAVE_AFTER]));

             *
             */
        } catch (Exception e) {
            System.out.println("Exception "+e.toString());
        }
    }

    public static boolean checkOID(long positionId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_HR_POSITION + " WHERE " +
                    PstPosition.fieldNames[PstPosition.FLD_POSITION_ID] + " = " + positionId;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstPosition.fieldNames[PstPosition.FLD_POSITION_ID] + ") FROM " + TBL_HR_POSITION;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }

            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /* This method used to find current data */
    public static int findLimitStart(long oid, int recordToGet, String whereClause) {
        String order = "";
        int size = getCount(whereClause);
        int start = 0;
        boolean found = false;
        for (int i = 0; (i < size) && !found; i = i + recordToGet) {
            Vector list = list(i, recordToGet, whereClause, order);
            start = i;
            if (list.size() > 0) {
                for (int ls = 0; ls < list.size(); ls++) {
                    Position position = (Position) list.get(ls);
                    if (oid == position.getOID()) {
                        found = true;
                    }
                }
            }
        }
        if ((start >= size) && (size > 0)) {
            start = start - recordToGet;
        }

        return start;
    }

    public static boolean checkMaster(long oid) {
        if (PstEmployee.checkPosition(oid)) {
            return true;
        } else {
            if (PstCareerPath.checkPosition(oid)) {
                return true;
            } else {
                return false;
            }
        }
    }

    //Gede_5Maret2012
    //ambil position {
    public static String getPositionName(String posId) {
        String position = "";
        DBResultSet dbrs = null;
        String sql = "";
        try {
            sql = "SELECT " + PstPosition.fieldNames[PstPosition.FLD_POSITION]
                    + " FROM " + PstPosition.TBL_HR_POSITION + " WHERE " + PstPosition.fieldNames[PstPosition.FLD_POSITION_ID]
                    + "=" + posId;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            //System.out.println("sql1:"+sql);
            while (rs.next()) {
                position = rs.getString(1);
            }

            rs.close();
            //return relation;
        } catch (Exception e) {
            System.out.println("Error");
        } finally {
            DBResultSet.close(dbrs);
        }
        return position;
    }
    //}
}

