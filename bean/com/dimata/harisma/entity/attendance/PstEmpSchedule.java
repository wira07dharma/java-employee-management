
/* Created on 	:  [date] [time] AM/PM 
 * 
 * @author  	: edhy
 * @version  	: 01 
 */
/**
 * *****************************************************************
 * Class Description : [project description ... ] Imput Parameters : [input
 * parameter ...] Output : [output ...]
 * *****************************************************************
 */
package com.dimata.harisma.entity.attendance;

// package java 
import java.sql.*;
import java.util.*;
import java.util.Date;

// package qdep 
import com.dimata.util.lang.I_Language;
import com.dimata.util.Formater;
import com.dimata.qdep.db.*;
import com.dimata.qdep.entity.*;

// package harisma 
import com.dimata.harisma.entity.masterdata.*;
import com.dimata.harisma.entity.configrewardnpunisment.SpecialEmpScheduleCount;
import com.dimata.harisma.entity.employee.*;
import com.dimata.harisma.entity.leave.I_Leave;
import com.dimata.harisma.entity.leave.PstLeaveApplication;
import com.dimata.harisma.entity.overtime.HashTblOvertimeDetail;
import com.dimata.harisma.entity.overtime.OvertimeDetail;
import com.dimata.harisma.entity.overtime.OvertimeTblExis;
import com.dimata.harisma.entity.overtime.PstOvertimeDetail;
import com.dimata.harisma.entity.payroll.*;
import com.dimata.harisma.form.payroll.FrmPayInput;
import com.dimata.harisma.session.leave.SessLeaveApp;
import com.dimata.harisma.session.payroll.I_PayrollCalculator;
import com.dimata.system.entity.PstSystemProperty;
import com.dimata.util.DateCalc;
import com.dimata.util.LogicParser;

public class PstEmpSchedule extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language {

    public static final String TBL_HR_EMP_SCHEDULE = "hr_emp_schedule";//"HR_EMP_SCHEDULE";
    public static final int FLD_EMP_SCHEDULE_ID = 0;
    public static final int FLD_PERIOD_ID = 1;
    public static final int FLD_EMPLOYEE_ID = 2;
    public static final int FLD_D1 = 3;
    public static final int FLD_D2 = 4;
    public static final int FLD_D3 = 5;
    public static final int FLD_D4 = 6;
    public static final int FLD_D5 = 7;
    public static final int FLD_D6 = 8;
    public static final int FLD_D7 = 9;
    public static final int FLD_D8 = 10;
    public static final int FLD_D9 = 11;
    public static final int FLD_D10 = 12;
    public static final int FLD_D11 = 13;
    public static final int FLD_D12 = 14;
    public static final int FLD_D13 = 15;
    public static final int FLD_D14 = 16;
    public static final int FLD_D15 = 17;
    public static final int FLD_D16 = 18;
    public static final int FLD_D17 = 19;
    public static final int FLD_D18 = 20;
    public static final int FLD_D19 = 21;
    public static final int FLD_D20 = 22;
    public static final int FLD_D21 = 23;
    public static final int FLD_D22 = 24;
    public static final int FLD_D23 = 25;
    public static final int FLD_D24 = 26;
    public static final int FLD_D25 = 27;
    public static final int FLD_D26 = 28;
    public static final int FLD_D27 = 29;
    public static final int FLD_D28 = 30;
    public static final int FLD_D29 = 31;
    public static final int FLD_D30 = 32;
    public static final int FLD_D31 = 33;
    // added by Edhy for split shift
    public static final int FLD_D2ND1 = 34;
    public static final int FLD_D2ND2 = 35;
    public static final int FLD_D2ND3 = 36;
    public static final int FLD_D2ND4 = 37;
    public static final int FLD_D2ND5 = 38;
    public static final int FLD_D2ND6 = 39;
    public static final int FLD_D2ND7 = 40;
    public static final int FLD_D2ND8 = 41;
    public static final int FLD_D2ND9 = 42;
    public static final int FLD_D2ND10 = 43;
    public static final int FLD_D2ND11 = 44;
    public static final int FLD_D2ND12 = 45;
    public static final int FLD_D2ND13 = 46;
    public static final int FLD_D2ND14 = 47;
    public static final int FLD_D2ND15 = 48;
    public static final int FLD_D2ND16 = 49;
    public static final int FLD_D2ND17 = 50;
    public static final int FLD_D2ND18 = 51;
    public static final int FLD_D2ND19 = 52;
    public static final int FLD_D2ND20 = 53;
    public static final int FLD_D2ND21 = 54;
    public static final int FLD_D2ND22 = 55;
    public static final int FLD_D2ND23 = 56;
    public static final int FLD_D2ND24 = 57;
    public static final int FLD_D2ND25 = 58;
    public static final int FLD_D2ND26 = 59;
    public static final int FLD_D2ND27 = 60;
    public static final int FLD_D2ND28 = 61;
    public static final int FLD_D2ND29 = 62;
    public static final int FLD_D2ND30 = 63;
    public static final int FLD_D2ND31 = 64;
    public static final int FLD_STATUS1 = 65;
    public static final int FLD_STATUS2 = 66;
    public static final int FLD_STATUS3 = 67;
    public static final int FLD_STATUS4 = 68;
    public static final int FLD_STATUS5 = 69;
    public static final int FLD_STATUS6 = 70;
    public static final int FLD_STATUS7 = 71;
    public static final int FLD_STATUS8 = 72;
    public static final int FLD_STATUS9 = 73;
    public static final int FLD_STATUS10 = 74;
    public static final int FLD_STATUS11 = 75;
    public static final int FLD_STATUS12 = 76;
    public static final int FLD_STATUS13 = 77;
    public static final int FLD_STATUS14 = 78;
    public static final int FLD_STATUS15 = 79;
    public static final int FLD_STATUS16 = 80;
    public static final int FLD_STATUS17 = 81;
    public static final int FLD_STATUS18 = 82;
    public static final int FLD_STATUS19 = 83;
    public static final int FLD_STATUS20 = 84;
    public static final int FLD_STATUS21 = 85;
    public static final int FLD_STATUS22 = 86;
    public static final int FLD_STATUS23 = 87;
    public static final int FLD_STATUS24 = 88;
    public static final int FLD_STATUS25 = 89;
    public static final int FLD_STATUS26 = 90;
    public static final int FLD_STATUS27 = 91;
    public static final int FLD_STATUS28 = 92;
    public static final int FLD_STATUS29 = 93;
    public static final int FLD_STATUS30 = 94;
    public static final int FLD_STATUS31 = 95;
    public static final int FLD_STATUS2ND1 = 96;
    public static final int FLD_STATUS2ND2 = 97;
    public static final int FLD_STATUS2ND3 = 98;
    public static final int FLD_STATUS2ND4 = 99;
    public static final int FLD_STATUS2ND5 = 100;
    public static final int FLD_STATUS2ND6 = 101;
    public static final int FLD_STATUS2ND7 = 102;
    public static final int FLD_STATUS2ND8 = 103;
    public static final int FLD_STATUS2ND9 = 104;
    public static final int FLD_STATUS2ND10 = 105;
    public static final int FLD_STATUS2ND11 = 106;
    public static final int FLD_STATUS2ND12 = 107;
    public static final int FLD_STATUS2ND13 = 108;
    public static final int FLD_STATUS2ND14 = 109;
    public static final int FLD_STATUS2ND15 = 110;
    public static final int FLD_STATUS2ND16 = 111;
    public static final int FLD_STATUS2ND17 = 112;
    public static final int FLD_STATUS2ND18 = 113;
    public static final int FLD_STATUS2ND19 = 114;
    public static final int FLD_STATUS2ND20 = 115;
    public static final int FLD_STATUS2ND21 = 116;
    public static final int FLD_STATUS2ND22 = 117;
    public static final int FLD_STATUS2ND23 = 118;
    public static final int FLD_STATUS2ND24 = 119;
    public static final int FLD_STATUS2ND25 = 120;
    public static final int FLD_STATUS2ND26 = 121;
    public static final int FLD_STATUS2ND27 = 122;
    public static final int FLD_STATUS2ND28 = 123;
    public static final int FLD_STATUS2ND29 = 124;
    public static final int FLD_STATUS2ND30 = 125;
    public static final int FLD_STATUS2ND31 = 126;
    public static final int FLD_REASON1 = 127;
    public static final int FLD_REASON2 = 128;
    public static final int FLD_REASON3 = 129;
    public static final int FLD_REASON4 = 130;
    public static final int FLD_REASON5 = 131;
    public static final int FLD_REASON6 = 132;
    public static final int FLD_REASON7 = 133;
    public static final int FLD_REASON8 = 134;
    public static final int FLD_REASON9 = 135;
    public static final int FLD_REASON10 = 136;
    public static final int FLD_REASON11 = 137;
    public static final int FLD_REASON12 = 138;
    public static final int FLD_REASON13 = 139;
    public static final int FLD_REASON14 = 140;
    public static final int FLD_REASON15 = 141;
    public static final int FLD_REASON16 = 142;
    public static final int FLD_REASON17 = 143;
    public static final int FLD_REASON18 = 144;
    public static final int FLD_REASON19 = 145;
    public static final int FLD_REASON20 = 146;
    public static final int FLD_REASON21 = 147;
    public static final int FLD_REASON22 = 148;
    public static final int FLD_REASON23 = 149;
    public static final int FLD_REASON24 = 150;
    public static final int FLD_REASON25 = 151;
    public static final int FLD_REASON26 = 152;
    public static final int FLD_REASON27 = 153;
    public static final int FLD_REASON28 = 154;
    public static final int FLD_REASON29 = 155;
    public static final int FLD_REASON30 = 156;
    public static final int FLD_REASON31 = 157;
    public static final int FLD_REASON2ND1 = 158;
    public static final int FLD_REASON2ND2 = 159;
    public static final int FLD_REASON2ND3 = 160;
    public static final int FLD_REASON2ND4 = 161;
    public static final int FLD_REASON2ND5 = 162;
    public static final int FLD_REASON2ND6 = 163;
    public static final int FLD_REASON2ND7 = 164;
    public static final int FLD_REASON2ND8 = 165;
    public static final int FLD_REASON2ND9 = 166;
    public static final int FLD_REASON2ND10 = 167;
    public static final int FLD_REASON2ND11 = 168;
    public static final int FLD_REASON2ND12 = 169;
    public static final int FLD_REASON2ND13 = 170;
    public static final int FLD_REASON2ND14 = 171;
    public static final int FLD_REASON2ND15 = 172;
    public static final int FLD_REASON2ND16 = 173;
    public static final int FLD_REASON2ND17 = 174;
    public static final int FLD_REASON2ND18 = 175;
    public static final int FLD_REASON2ND19 = 176;
    public static final int FLD_REASON2ND20 = 177;
    public static final int FLD_REASON2ND21 = 178;
    public static final int FLD_REASON2ND22 = 179;
    public static final int FLD_REASON2ND23 = 180;
    public static final int FLD_REASON2ND24 = 181;
    public static final int FLD_REASON2ND25 = 182;
    public static final int FLD_REASON2ND26 = 183;
    public static final int FLD_REASON2ND27 = 184;
    public static final int FLD_REASON2ND28 = 185;
    public static final int FLD_REASON2ND29 = 186;
    public static final int FLD_REASON2ND30 = 187;
    public static final int FLD_REASON2ND31 = 188;
    public static final int FLD_NOTE1 = 189;
    public static final int FLD_NOTE2 = 190;
    public static final int FLD_NOTE3 = 191;
    public static final int FLD_NOTE4 = 192;
    public static final int FLD_NOTE5 = 193;
    public static final int FLD_NOTE6 = 194;
    public static final int FLD_NOTE7 = 195;
    public static final int FLD_NOTE8 = 196;
    public static final int FLD_NOTE9 = 197;
    public static final int FLD_NOTE10 = 198;
    public static final int FLD_NOTE11 = 199;
    public static final int FLD_NOTE12 = 200;
    public static final int FLD_NOTE13 = 201;
    public static final int FLD_NOTE14 = 202;
    public static final int FLD_NOTE15 = 203;
    public static final int FLD_NOTE16 = 204;
    public static final int FLD_NOTE17 = 205;
    public static final int FLD_NOTE18 = 206;
    public static final int FLD_NOTE19 = 207;
    public static final int FLD_NOTE20 = 208;
    public static final int FLD_NOTE21 = 209;
    public static final int FLD_NOTE22 = 210;
    public static final int FLD_NOTE23 = 211;
    public static final int FLD_NOTE24 = 212;
    public static final int FLD_NOTE25 = 213;
    public static final int FLD_NOTE26 = 214;
    public static final int FLD_NOTE27 = 215;
    public static final int FLD_NOTE28 = 216;
    public static final int FLD_NOTE29 = 217;
    public static final int FLD_NOTE30 = 218;
    public static final int FLD_NOTE31 = 219;
    public static final int FLD_NOTE2ND1 = 220;
    public static final int FLD_NOTE2ND2 = 221;
    public static final int FLD_NOTE2ND3 = 222;
    public static final int FLD_NOTE2ND4 = 223;
    public static final int FLD_NOTE2ND5 = 224;
    public static final int FLD_NOTE2ND6 = 225;
    public static final int FLD_NOTE2ND7 = 226;
    public static final int FLD_NOTE2ND8 = 227;
    public static final int FLD_NOTE2ND9 = 228;
    public static final int FLD_NOTE2ND10 = 229;
    public static final int FLD_NOTE2ND11 = 230;
    public static final int FLD_NOTE2ND12 = 231;
    public static final int FLD_NOTE2ND13 = 232;
    public static final int FLD_NOTE2ND14 = 233;
    public static final int FLD_NOTE2ND15 = 234;
    public static final int FLD_NOTE2ND16 = 235;
    public static final int FLD_NOTE2ND17 = 236;
    public static final int FLD_NOTE2ND18 = 237;
    public static final int FLD_NOTE2ND19 = 238;
    public static final int FLD_NOTE2ND20 = 239;
    public static final int FLD_NOTE2ND21 = 240;
    public static final int FLD_NOTE2ND22 = 241;
    public static final int FLD_NOTE2ND23 = 242;
    public static final int FLD_NOTE2ND24 = 243;
    public static final int FLD_NOTE2ND25 = 244;
    public static final int FLD_NOTE2ND26 = 245;
    public static final int FLD_NOTE2ND27 = 246;
    public static final int FLD_NOTE2ND28 = 247;
    public static final int FLD_NOTE2ND29 = 248;
    public static final int FLD_NOTE2ND30 = 249;
    public static final int FLD_NOTE2ND31 = 250;
    public static final int FLD_IN1 = 251;
    public static final int FLD_IN2 = 252;
    public static final int FLD_IN3 = 253;
    public static final int FLD_IN4 = 254;
    public static final int FLD_IN5 = 255;
    public static final int FLD_IN6 = 256;
    public static final int FLD_IN7 = 257;
    public static final int FLD_IN8 = 258;
    public static final int FLD_IN9 = 259;
    public static final int FLD_IN10 = 260;
    public static final int FLD_IN11 = 261;
    public static final int FLD_IN12 = 262;
    public static final int FLD_IN13 = 263;
    public static final int FLD_IN14 = 264;
    public static final int FLD_IN15 = 265;
    public static final int FLD_IN16 = 266;
    public static final int FLD_IN17 = 267;
    public static final int FLD_IN18 = 268;
    public static final int FLD_IN19 = 269;
    public static final int FLD_IN20 = 270;
    public static final int FLD_IN21 = 271;
    public static final int FLD_IN22 = 272;
    public static final int FLD_IN23 = 273;
    public static final int FLD_IN24 = 274;
    public static final int FLD_IN25 = 275;
    public static final int FLD_IN26 = 276;
    public static final int FLD_IN27 = 277;
    public static final int FLD_IN28 = 278;
    public static final int FLD_IN29 = 279;
    public static final int FLD_IN30 = 280;
    public static final int FLD_IN31 = 281;
    public static final int FLD_IN2ND1 = 282;
    public static final int FLD_IN2ND2 = 283;
    public static final int FLD_IN2ND3 = 284;
    public static final int FLD_IN2ND4 = 285;
    public static final int FLD_IN2ND5 = 286;
    public static final int FLD_IN2ND6 = 287;
    public static final int FLD_IN2ND7 = 288;
    public static final int FLD_IN2ND8 = 289;
    public static final int FLD_IN2ND9 = 290;
    public static final int FLD_IN2ND10 = 291;
    public static final int FLD_IN2ND11 = 292;
    public static final int FLD_IN2ND12 = 293;
    public static final int FLD_IN2ND13 = 294;
    public static final int FLD_IN2ND14 = 295;
    public static final int FLD_IN2ND15 = 296;
    public static final int FLD_IN2ND16 = 297;
    public static final int FLD_IN2ND17 = 298;
    public static final int FLD_IN2ND18 = 299;
    public static final int FLD_IN2ND19 = 300;
    public static final int FLD_IN2ND20 = 301;
    public static final int FLD_IN2ND21 = 302;
    public static final int FLD_IN2ND22 = 303;
    public static final int FLD_IN2ND23 = 304;
    public static final int FLD_IN2ND24 = 305;
    public static final int FLD_IN2ND25 = 306;
    public static final int FLD_IN2ND26 = 307;
    public static final int FLD_IN2ND27 = 308;
    public static final int FLD_IN2ND28 = 309;
    public static final int FLD_IN2ND29 = 310;
    public static final int FLD_IN2ND30 = 311;
    public static final int FLD_IN2ND31 = 312;
    public static final int FLD_OUT1 = 313;
    public static final int FLD_OUT2 = 314;
    public static final int FLD_OUT3 = 315;
    public static final int FLD_OUT4 = 316;
    public static final int FLD_OUT5 = 317;
    public static final int FLD_OUT6 = 318;
    public static final int FLD_OUT7 = 319;
    public static final int FLD_OUT8 = 320;
    public static final int FLD_OUT9 = 321;
    public static final int FLD_OUT10 = 322;
    public static final int FLD_OUT11 = 323;
    public static final int FLD_OUT12 = 324;
    public static final int FLD_OUT13 = 325;
    public static final int FLD_OUT14 = 326;
    public static final int FLD_OUT15 = 327;
    public static final int FLD_OUT16 = 328;
    public static final int FLD_OUT17 = 329;
    public static final int FLD_OUT18 = 330;
    public static final int FLD_OUT19 = 331;
    public static final int FLD_OUT20 = 332;
    public static final int FLD_OUT21 = 333;
    public static final int FLD_OUT22 = 334;
    public static final int FLD_OUT23 = 335;
    public static final int FLD_OUT24 = 336;
    public static final int FLD_OUT25 = 337;
    public static final int FLD_OUT26 = 338;
    public static final int FLD_OUT27 = 339;
    public static final int FLD_OUT28 = 340;
    public static final int FLD_OUT29 = 341;
    public static final int FLD_OUT30 = 342;
    public static final int FLD_OUT31 = 343;
    public static final int FLD_OUT2ND1 = 344;
    public static final int FLD_OUT2ND2 = 345;
    public static final int FLD_OUT2ND3 = 346;
    public static final int FLD_OUT2ND4 = 347;
    public static final int FLD_OUT2ND5 = 348;
    public static final int FLD_OUT2ND6 = 349;
    public static final int FLD_OUT2ND7 = 350;
    public static final int FLD_OUT2ND8 = 351;
    public static final int FLD_OUT2ND9 = 352;
    public static final int FLD_OUT2ND10 = 353;
    public static final int FLD_OUT2ND11 = 354;
    public static final int FLD_OUT2ND12 = 355;
    public static final int FLD_OUT2ND13 = 356;
    public static final int FLD_OUT2ND14 = 357;
    public static final int FLD_OUT2ND15 = 358;
    public static final int FLD_OUT2ND16 = 359;
    public static final int FLD_OUT2ND17 = 360;
    public static final int FLD_OUT2ND18 = 361;
    public static final int FLD_OUT2ND19 = 362;
    public static final int FLD_OUT2ND20 = 363;
    public static final int FLD_OUT2ND21 = 364;
    public static final int FLD_OUT2ND22 = 365;
    public static final int FLD_OUT2ND23 = 366;
    public static final int FLD_OUT2ND24 = 367;
    public static final int FLD_OUT2ND25 = 368;
    public static final int FLD_OUT2ND26 = 369;
    public static final int FLD_OUT2ND27 = 370;
    public static final int FLD_OUT2ND28 = 371;
    public static final int FLD_OUT2ND29 = 372;
    public static final int FLD_OUT2ND30 = 373;
    public static final int FLD_OUT2ND31 = 374;
    public static final int FLD_SCHEDULE_TYPE = 375;
    public static final String[] fieldNames = {
        "EMP_SCHEDULE_ID",
        "PERIOD_ID",
        "EMPLOYEE_ID",
        "D1",
        "D2",
        "D3",
        "D4",
        "D5",
        "D6",
        "D7",
        "D8",
        "D9",
        "D10",
        "D11",
        "D12",
        "D13",
        "D14",
        "D15",
        "D16",
        "D17",
        "D18",
        "D19",
        "D20",
        "D21",
        "D22",
        "D23",
        "D24",
        "D25",
        "D26",
        "D27",
        "D28",
        "D29",
        "D30",
        "D31",
        // add by Edhy for split shift
        "D2ND1",
        "D2ND2",
        "D2ND3",
        "D2ND4",
        "D2ND5",
        "D2ND6",
        "D2ND7",
        "D2ND8",
        "D2ND9",
        "D2ND10",
        "D2ND11",
        "D2ND12",
        "D2ND13",
        "D2ND14",
        "D2ND15",
        "D2ND16",
        "D2ND17",
        "D2ND18",
        "D2ND19",
        "D2ND20",
        "D2ND21",
        "D2ND22",
        "D2ND23",
        "D2ND24",
        "D2ND25",
        "D2ND26",
        "D2ND27",
        "D2ND28",
        "D2ND29",
        "D2ND30",
        "D2ND31",
        "STATUS1",
        "STATUS2",
        "STATUS3",
        "STATUS4",
        "STATUS5",
        "STATUS6",
        "STATUS7",
        "STATUS8",
        "STATUS9",
        "STATUS10",
        "STATUS11",
        "STATUS12",
        "STATUS13",
        "STATUS14",
        "STATUS15",
        "STATUS16",
        "STATUS17",
        "STATUS18",
        "STATUS19",
        "STATUS20",
        "STATUS21",
        "STATUS22",
        "STATUS23",
        "STATUS24",
        "STATUS25",
        "STATUS26",
        "STATUS27",
        "STATUS28",
        "STATUS29",
        "STATUS30",
        "STATUS31",
        "STATUS2ND1",
        "STATUS2ND2",
        "STATUS2ND3",
        "STATUS2ND4",
        "STATUS2ND5",
        "STATUS2ND6",
        "STATUS2ND7",
        "STATUS2ND8",
        "STATUS2ND9",
        "STATUS2ND10",
        "STATUS2ND11",
        "STATUS2ND12",
        "STATUS2ND13",
        "STATUS2ND14",
        "STATUS2ND15",
        "STATUS2ND16",
        "STATUS2ND17",
        "STATUS2ND18",
        "STATUS2ND19",
        "STATUS2ND20",
        "STATUS2ND21",
        "STATUS2ND22",
        "STATUS2ND23",
        "STATUS2ND24",
        "STATUS2ND25",
        "STATUS2ND26",
        "STATUS2ND27",
        "STATUS2ND28",
        "STATUS2ND29",
        "STATUS2ND30",
        "STATUS2ND31",
        "REASON1",
        "REASON2",
        "REASON3",
        "REASON4",
        "REASON5",
        "REASON6",
        "REASON7",
        "REASON8",
        "REASON9",
        "REASON10",
        "REASON11",
        "REASON12",
        "REASON13",
        "REASON14",
        "REASON15",
        "REASON16",
        "REASON17",
        "REASON18",
        "REASON19",
        "REASON20",
        "REASON21",
        "REASON22",
        "REASON23",
        "REASON24",
        "REASON25",
        "REASON26",
        "REASON27",
        "REASON28",
        "REASON29",
        "REASON30",
        "REASON31",
        "REASON2ND1",
        "REASON2ND2",
        "REASON2ND3",
        "REASON2ND4",
        "REASON2ND5",
        "REASON2ND6",
        "REASON2ND7",
        "REASON2ND8",
        "REASON2ND9",
        "REASON2ND10",
        "REASON2ND11",
        "REASON2ND12",
        "REASON2ND13",
        "REASON2ND14",
        "REASON2ND15",
        "REASON2ND16",
        "REASON2ND17",
        "REASON2ND18",
        "REASON2ND19",
        "REASON2ND20",
        "REASON2ND21",
        "REASON2ND22",
        "REASON2ND23",
        "REASON2ND24",
        "REASON2ND25",
        "REASON2ND26",
        "REASON2ND27",
        "REASON2ND28",
        "REASON2ND29",
        "REASON2ND30",
        "REASON2ND31",
        "NOTE1",
        "NOTE2",
        "NOTE3",
        "NOTE4",
        "NOTE5",
        "NOTE6",
        "NOTE7",
        "NOTE8",
        "NOTE9",
        "NOTE10",
        "NOTE11",
        "NOTE12",
        "NOTE13",
        "NOTE14",
        "NOTE15",
        "NOTE16",
        "NOTE17",
        "NOTE18",
        "NOTE19",
        "NOTE20",
        "NOTE21",
        "NOTE22",
        "NOTE23",
        "NOTE24",
        "NOTE25",
        "NOTE26",
        "NOTE27",
        "NOTE28",
        "NOTE29",
        "NOTE30",
        "NOTE31",
        "NOTE2ND1",
        "NOTE2ND2",
        "NOTE2ND3",
        "NOTE2ND4",
        "NOTE2ND5",
        "NOTE2ND6",
        "NOTE2ND7",
        "NOTE2ND8",
        "NOTE2ND9",
        "NOTE2ND10",
        "NOTE2ND11",
        "NOTE2ND12",
        "NOTE2ND13",
        "NOTE2ND14",
        "NOTE2ND15",
        "NOTE2ND16",
        "NOTE2ND17",
        "NOTE2ND18",
        "NOTE2ND19",
        "NOTE2ND20",
        "NOTE2ND21",
        "NOTE2ND22",
        "NOTE2ND23",
        "NOTE2ND24",
        "NOTE2ND25",
        "NOTE2ND26",
        "NOTE2ND27",
        "NOTE2ND28",
        "NOTE2ND29",
        "NOTE2ND30",
        "NOTE2ND31",
        "IN1",
        "IN2",
        "IN3",
        "IN4",
        "IN5",
        "IN6",
        "IN7",
        "IN8",
        "IN9",
        "IN10",
        "IN11",
        "IN12",
        "IN13",
        "IN14",
        "IN15",
        "IN16",
        "IN17",
        "IN18",
        "IN19",
        "IN20",
        "IN21",
        "IN22",
        "IN23",
        "IN24",
        "IN25",
        "IN26",
        "IN27",
        "IN28",
        "IN29",
        "IN30",
        "IN31",
        "IN2ND1",
        "IN2ND2",
        "IN2ND3",
        "IN2ND4",
        "IN2ND5",
        "IN2ND6",
        "IN2ND7",
        "IN2ND8",
        "IN2ND9",
        "IN2ND10",
        "IN2ND11",
        "IN2ND12",
        "IN2ND13",
        "IN2ND14",
        "IN2ND15",
        "IN2ND16",
        "IN2ND17",
        "IN2ND18",
        "IN2ND19",
        "IN2ND20",
        "IN2ND21",
        "IN2ND22",
        "IN2ND23",
        "IN2ND24",
        "IN2ND25",
        "IN2ND26",
        "IN2ND27",
        "IN2ND28",
        "IN2ND29",
        "IN2ND30",
        "IN2ND31",
        "OUT1",
        "OUT2",
        "OUT3",
        "OUT4",
        "OUT5",
        "OUT6",
        "OUT7",
        "OUT8",
        "OUT9",
        "OUT10",
        "OUT11",
        "OUT12",
        "OUT13",
        "OUT14",
        "OUT15",
        "OUT16",
        "OUT17",
        "OUT18",
        "OUT19",
        "OUT20",
        "OUT21",
        "OUT22",
        "OUT23",
        "OUT24",
        "OUT25",
        "OUT26",
        "OUT27",
        "OUT28",
        "OUT29",
        "OUT30",
        "OUT31",
        "OUT2ND1",
        "OUT2ND2",
        "OUT2ND3",
        "OUT2ND4",
        "OUT2ND5",
        "OUT2ND6",
        "OUT2ND7",
        "OUT2ND8",
        "OUT2ND9",
        "OUT2ND10",
        "OUT2ND11",
        "OUT2ND12",
        "OUT2ND13",
        "OUT2ND14",
        "OUT2ND15",
        "OUT2ND16",
        "OUT2ND17",
        "OUT2ND18",
        "OUT2ND19",
        "OUT2ND20",
        "OUT2ND21",
        "OUT2ND22",
        "OUT2ND23",
        "OUT2ND24",
        "OUT2ND25",
        "OUT2ND26",
        "OUT2ND27",
        "OUT2ND28",
        "OUT2ND29",
        "OUT2ND30",
        "OUT2ND31",
        "SCHEDULE_TYPE"
    };
    public static final int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        // added by edhy for split shft
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_INT,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_INT
    };

    private static Vector logicParser(String text) {
        Vector vector = LogicParser.textSentence(text);
        for (int i = 0; i < vector.size(); i++) {
            String code = (String) vector.get(i);
            if (((vector.get(vector.size() - 1)).equals(LogicParser.SIGN))
                    && ((vector.get(vector.size() - 1)).equals(LogicParser.ENGLISH))) {
                vector.remove(vector.size() - 1);
            }
        }
        return vector;
    }
    public static final String FLD_SCHEDULE = "D";
    public static final int BOUNDARY_NIGHT_SHIFT_OUT_TIME = 10;
    // waktu kerja normal
    public static final int WORKING_HOUR = 8;
    // waktu cadangan yang dipakai utk menentukan suatu presence milik schedule mana ???
    // realtif terhadap schedule terakhir :)
    public static final int RESIDUE_TIME_ON_PRESENCE = WORKING_HOUR / 2;
    //update by satrya 2013-07-19
    public static final long MAX_NORMAL_SCH_DISTANCE_TODAY = 15 * 60 * 60 * 1000; //jarak normal antara IN OUT SCHEDULE antara 2 hari yang berbeda
    public static final int MAX_WORKING_HOUR = 9; //jarak normal antara IN OUT SCHEDULE antara 2 hari yang berbeda
    public static final int INT_FIRST_SCHEDULE = 1;
    public static final int INT_SECOND_SCHEDULE = 2;
    // property for setting this schedule
    public static final int FIELD_COUNT_BEFORE_CALENDAR = 2;
    public static final int INTERVAL_INDEX_HALF_CALENDAR = 31;
    public static final int INTERVAL_INDEX_FULL_CALENDAR = 62;
    public static final int PRESENCE_CORRECTION_TIME = 60; // in seconds
    public static final int OFFSET_INDEX_CALENDAR = 3; // dimulai dari 0        
    public static final int OFFSET_INDEX_STATUS = 65; // dimulai dari 0  //field status1
    //untuk yang periode dinamis
    public static final int OFFSET_INDEX_STATUS_DINAMIS = 90; // dimulai dari 0  //field status1
    public static final int OFFSET_INDEX_REASON = 127; // dimulai dari 0  
    public static final int OFFSET_INDEX_NOTE = 189; // dimulai dari 0        
    public static final int OFFSET_INDEX_IN = 251; // dimulai dari 0        
    public static final int OFFSET_INDEX_OUT = 313; // dimulai dari 0  
    // presence status compare with schedule
    public static final int STATUS_PRESENCE_NOT_PROCESSED = 0;//-1;
    public static final int STATUS_PRESENCE_OK = 7;//0;
    public static final int STATUS_PRESENCE_LATE = 1; // priority 2
    public static final int STATUS_PRESENCE_ABSENCE = 2;  // priority 1
    public static final int STATUS_PRESENCE_ONLY_IN = 3; // priority 3
    public static final int STATUS_PRESENCE_ONLY_OUT = 4;// priority 3
    /**
     * STATUS_PRESENCE_EARLY_ OUT / HOME = istirahat dahulu / pulang lebih
     * dahulu
     */
    public static final int STATUS_PRESENCE_EARLY_HOME = 5; // priority 2
    /**
     * STATUS_PRESENCE_LATE_EARLY = terlambat datang kerja / terlambat datang
     * dari jam istirahat dan istirahat sebelum jadwal / lebih dahulu pulang
     * dari jadwal
     */
    public static final int STATUS_PRESENCE_LATE_EARLY = 6; // priority 2
    //update by satrya 2012-09-11
    /*public static final int STATUS_PRESENCE_EARLY_BREAK  = 8;
     public static final int STATUS_PRESENCE_LATE_BREAK_IN  = 9;
     public static final int STATUS_PRESENCE_EARLY_BREAK_N_LATE_IN  = 10;*/
    public static final String[] strPresenceStatus = {
        /*"Ok"*/"Not Prosses",
        "Late",
        "Absence",
        "Only IN",
        "Only OUT",
        "Early Out/Home",
        "Late Early",
        "OK"
    //update by satrya 2012-09-11
       /* "Early Break Out",
     "Late Break In",
     "Early Break & Late In"*/
    };
    public static final int[] strPresenceStatusIdx = {
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
    };
    public static final String[] strSymStatus = {
        "NP",
        "LT",
        "Abs",
        "OI",
        "OO",
        "EO",
        "LE",
        "OK"
    };
    public static final int REASON_ABSENCE_ALPHA = 0;
    public static final int REASON_ABSENCE_SICKNESS = 1;
    public static final int REASON_ABSENCE_DISPENSATION = 2;
    public static final String[] strAbsenceReasonCode = {
        "AB",
        "DC",
        "SD"
    };
    public static final String[] strAbsenceReason = {
        "No Reason",
        "Sick",
        "Special Dispensation"
    };
    // presence type base on command on timekeeping machine => see Presence.java
    /*public static final int STATUS_IN = 0;
     public static final int STATUS_OUT_HOME = 1;
     public static final int STATUS_OUT_ON_DUTY = 2;
     public static final int STATUS_IN_LUNCH = 3;
     public static final int STATUS_IN_BREAK = 4;
     public static final int STATUS_IN_CALLBACK = 5;
     public static final String[] strPresenceStatusName = {
     "In",
     "Out - Home",
     "Out - On Duty",
     "In - Lunch",
     "In - Break",
     "In - Callback"
     };
     public static final int[] strPresenceStatusValue = {
     0,
     1,
     2,
     3,
     4,
     5
     };*/
    // schedule type
    public static final int SCHEDULE_ORIGINAL = 0;
    public static final int SCHEDULE_UPDATED = 1;
    public static final int SCHEDULE_TO_BE_CHECK = 2;
    public static final String[] strScheduleType = {
        "Schedule Original",
        "Schedule Updated",
        "Schedule To Be Check"
    };
    public static final int UPDATE_SCHEDULE_AFTER_EXECUTION = 1;
    public static final int UPDATE_SCHEDULE_AFTER_APPROVED = 2;

    public PstEmpSchedule() {
    }

    public PstEmpSchedule(int i) throws DBException {
        super(new PstEmpSchedule());
    }

    public PstEmpSchedule(String sOid) throws DBException {
        super(new PstEmpSchedule(0));
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public PstEmpSchedule(long lOid) throws DBException {
        super(new PstEmpSchedule(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_HR_EMP_SCHEDULE;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstEmpSchedule().getClass().getName();
    }

    public long fetchExc(Entity ent) throws Exception {
        EmpSchedule empschedule = fetchExc(ent.getOID());
        ent = (Entity) empschedule;
        return empschedule.getOID();
    }

    public long insertExc(Entity ent) throws Exception {
        return insertExc((EmpSchedule) ent);
    }

    public long updateExc(Entity ent) throws Exception {
        return updateExc((EmpSchedule) ent);
    }

    public long deleteExc(Entity ent) throws Exception {
        if (ent == null) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static EmpSchedule fetchExc(long oid) throws DBException {
        try {
            EmpSchedule empschedule = new EmpSchedule();
            PstEmpSchedule pstEmpSchedule = new PstEmpSchedule(oid);
            empschedule.setOID(oid);

            empschedule.setPeriodId(pstEmpSchedule.getlong(FLD_PERIOD_ID));
            empschedule.setEmployeeId(pstEmpSchedule.getlong(FLD_EMPLOYEE_ID));
            empschedule.setD1(pstEmpSchedule.getlong(FLD_D1));
            empschedule.setD2(pstEmpSchedule.getlong(FLD_D2));
            empschedule.setD3(pstEmpSchedule.getlong(FLD_D3));
            empschedule.setD4(pstEmpSchedule.getlong(FLD_D4));
            empschedule.setD5(pstEmpSchedule.getlong(FLD_D5));
            empschedule.setD6(pstEmpSchedule.getlong(FLD_D6));
            empschedule.setD7(pstEmpSchedule.getlong(FLD_D7));
            empschedule.setD8(pstEmpSchedule.getlong(FLD_D8));
            empschedule.setD9(pstEmpSchedule.getlong(FLD_D9));
            empschedule.setD10(pstEmpSchedule.getlong(FLD_D10));
            empschedule.setD11(pstEmpSchedule.getlong(FLD_D11));
            empschedule.setD12(pstEmpSchedule.getlong(FLD_D12));
            empschedule.setD13(pstEmpSchedule.getlong(FLD_D13));
            empschedule.setD14(pstEmpSchedule.getlong(FLD_D14));
            empschedule.setD15(pstEmpSchedule.getlong(FLD_D15));
            empschedule.setD16(pstEmpSchedule.getlong(FLD_D16));
            empschedule.setD17(pstEmpSchedule.getlong(FLD_D17));
            empschedule.setD18(pstEmpSchedule.getlong(FLD_D18));
            empschedule.setD19(pstEmpSchedule.getlong(FLD_D19));
            empschedule.setD20(pstEmpSchedule.getlong(FLD_D20));
            empschedule.setD21(pstEmpSchedule.getlong(FLD_D21));
            empschedule.setD22(pstEmpSchedule.getlong(FLD_D22));
            empschedule.setD23(pstEmpSchedule.getlong(FLD_D23));
            empschedule.setD24(pstEmpSchedule.getlong(FLD_D24));
            empschedule.setD25(pstEmpSchedule.getlong(FLD_D25));
            empschedule.setD26(pstEmpSchedule.getlong(FLD_D26));
            empschedule.setD27(pstEmpSchedule.getlong(FLD_D27));
            empschedule.setD28(pstEmpSchedule.getlong(FLD_D28));
            empschedule.setD29(pstEmpSchedule.getlong(FLD_D29));
            empschedule.setD30(pstEmpSchedule.getlong(FLD_D30));
            empschedule.setD31(pstEmpSchedule.getlong(FLD_D31));

            // added by edhy for split shift
            empschedule.setD2nd1(pstEmpSchedule.getlong(FLD_D2ND1));
            empschedule.setD2nd2(pstEmpSchedule.getlong(FLD_D2ND2));
            empschedule.setD2nd3(pstEmpSchedule.getlong(FLD_D2ND3));
            empschedule.setD2nd4(pstEmpSchedule.getlong(FLD_D2ND4));
            empschedule.setD2nd5(pstEmpSchedule.getlong(FLD_D2ND5));
            empschedule.setD2nd6(pstEmpSchedule.getlong(FLD_D2ND6));
            empschedule.setD2nd7(pstEmpSchedule.getlong(FLD_D2ND7));
            empschedule.setD2nd8(pstEmpSchedule.getlong(FLD_D2ND8));
            empschedule.setD2nd9(pstEmpSchedule.getlong(FLD_D2ND9));
            empschedule.setD2nd10(pstEmpSchedule.getlong(FLD_D2ND10));
            empschedule.setD2nd11(pstEmpSchedule.getlong(FLD_D2ND11));
            empschedule.setD2nd12(pstEmpSchedule.getlong(FLD_D2ND12));
            empschedule.setD2nd13(pstEmpSchedule.getlong(FLD_D2ND13));
            empschedule.setD2nd14(pstEmpSchedule.getlong(FLD_D2ND14));
            empschedule.setD2nd15(pstEmpSchedule.getlong(FLD_D2ND15));
            empschedule.setD2nd16(pstEmpSchedule.getlong(FLD_D2ND16));
            empschedule.setD2nd17(pstEmpSchedule.getlong(FLD_D2ND17));
            empschedule.setD2nd18(pstEmpSchedule.getlong(FLD_D2ND18));
            empschedule.setD2nd19(pstEmpSchedule.getlong(FLD_D2ND19));
            empschedule.setD2nd20(pstEmpSchedule.getlong(FLD_D2ND20));
            empschedule.setD2nd21(pstEmpSchedule.getlong(FLD_D2ND21));
            empschedule.setD2nd22(pstEmpSchedule.getlong(FLD_D2ND22));
            empschedule.setD2nd23(pstEmpSchedule.getlong(FLD_D2ND23));
            empschedule.setD2nd24(pstEmpSchedule.getlong(FLD_D2ND24));
            empschedule.setD2nd25(pstEmpSchedule.getlong(FLD_D2ND25));
            empschedule.setD2nd26(pstEmpSchedule.getlong(FLD_D2ND26));
            empschedule.setD2nd27(pstEmpSchedule.getlong(FLD_D2ND27));
            empschedule.setD2nd28(pstEmpSchedule.getlong(FLD_D2ND28));
            empschedule.setD2nd29(pstEmpSchedule.getlong(FLD_D2ND29));
            empschedule.setD2nd30(pstEmpSchedule.getlong(FLD_D2ND30));
            empschedule.setD2nd31(pstEmpSchedule.getlong(FLD_D2ND31));

            empschedule.setStatus1(pstEmpSchedule.getInt(FLD_STATUS1));
            empschedule.setStatus2(pstEmpSchedule.getInt(FLD_STATUS2));
            empschedule.setStatus3(pstEmpSchedule.getInt(FLD_STATUS3));
            empschedule.setStatus4(pstEmpSchedule.getInt(FLD_STATUS4));
            empschedule.setStatus5(pstEmpSchedule.getInt(FLD_STATUS5));
            empschedule.setStatus6(pstEmpSchedule.getInt(FLD_STATUS6));
            empschedule.setStatus7(pstEmpSchedule.getInt(FLD_STATUS7));
            empschedule.setStatus8(pstEmpSchedule.getInt(FLD_STATUS8));
            empschedule.setStatus9(pstEmpSchedule.getInt(FLD_STATUS9));
            empschedule.setStatus10(pstEmpSchedule.getInt(FLD_STATUS10));
            empschedule.setStatus11(pstEmpSchedule.getInt(FLD_STATUS11));
            empschedule.setStatus12(pstEmpSchedule.getInt(FLD_STATUS12));
            empschedule.setStatus13(pstEmpSchedule.getInt(FLD_STATUS13));
            empschedule.setStatus14(pstEmpSchedule.getInt(FLD_STATUS14));
            empschedule.setStatus15(pstEmpSchedule.getInt(FLD_STATUS15));
            empschedule.setStatus16(pstEmpSchedule.getInt(FLD_STATUS16));
            empschedule.setStatus17(pstEmpSchedule.getInt(FLD_STATUS17));
            empschedule.setStatus18(pstEmpSchedule.getInt(FLD_STATUS18));
            empschedule.setStatus19(pstEmpSchedule.getInt(FLD_STATUS19));
            empschedule.setStatus20(pstEmpSchedule.getInt(FLD_STATUS20));
            empschedule.setStatus21(pstEmpSchedule.getInt(FLD_STATUS21));
            empschedule.setStatus22(pstEmpSchedule.getInt(FLD_STATUS22));
            empschedule.setStatus23(pstEmpSchedule.getInt(FLD_STATUS23));
            empschedule.setStatus24(pstEmpSchedule.getInt(FLD_STATUS24));
            empschedule.setStatus25(pstEmpSchedule.getInt(FLD_STATUS25));
            empschedule.setStatus26(pstEmpSchedule.getInt(FLD_STATUS26));
            empschedule.setStatus27(pstEmpSchedule.getInt(FLD_STATUS27));
            empschedule.setStatus28(pstEmpSchedule.getInt(FLD_STATUS28));
            empschedule.setStatus29(pstEmpSchedule.getInt(FLD_STATUS29));
            empschedule.setStatus30(pstEmpSchedule.getInt(FLD_STATUS30));
            empschedule.setStatus31(pstEmpSchedule.getInt(FLD_STATUS31));
            empschedule.setStatus2nd1(pstEmpSchedule.getInt(FLD_STATUS2ND1));
            empschedule.setStatus2nd2(pstEmpSchedule.getInt(FLD_STATUS2ND2));
            empschedule.setStatus2nd3(pstEmpSchedule.getInt(FLD_STATUS2ND3));
            empschedule.setStatus2nd4(pstEmpSchedule.getInt(FLD_STATUS2ND4));
            empschedule.setStatus2nd5(pstEmpSchedule.getInt(FLD_STATUS2ND5));
            empschedule.setStatus2nd6(pstEmpSchedule.getInt(FLD_STATUS2ND6));
            empschedule.setStatus2nd7(pstEmpSchedule.getInt(FLD_STATUS2ND7));
            empschedule.setStatus2nd8(pstEmpSchedule.getInt(FLD_STATUS2ND8));
            empschedule.setStatus2nd9(pstEmpSchedule.getInt(FLD_STATUS2ND9));
            empschedule.setStatus2nd10(pstEmpSchedule.getInt(FLD_STATUS2ND10));
            empschedule.setStatus2nd11(pstEmpSchedule.getInt(FLD_STATUS2ND11));
            empschedule.setStatus2nd12(pstEmpSchedule.getInt(FLD_STATUS2ND12));
            empschedule.setStatus2nd13(pstEmpSchedule.getInt(FLD_STATUS2ND13));
            empschedule.setStatus2nd14(pstEmpSchedule.getInt(FLD_STATUS2ND14));
            empschedule.setStatus2nd15(pstEmpSchedule.getInt(FLD_STATUS2ND15));
            empschedule.setStatus2nd16(pstEmpSchedule.getInt(FLD_STATUS2ND16));
            empschedule.setStatus2nd17(pstEmpSchedule.getInt(FLD_STATUS2ND17));
            empschedule.setStatus2nd18(pstEmpSchedule.getInt(FLD_STATUS2ND18));
            empschedule.setStatus2nd19(pstEmpSchedule.getInt(FLD_STATUS2ND19));
            empschedule.setStatus2nd20(pstEmpSchedule.getInt(FLD_STATUS2ND20));
            empschedule.setStatus2nd21(pstEmpSchedule.getInt(FLD_STATUS2ND21));
            empschedule.setStatus2nd22(pstEmpSchedule.getInt(FLD_STATUS2ND22));
            empschedule.setStatus2nd23(pstEmpSchedule.getInt(FLD_STATUS2ND23));
            empschedule.setStatus2nd24(pstEmpSchedule.getInt(FLD_STATUS2ND24));
            empschedule.setStatus2nd25(pstEmpSchedule.getInt(FLD_STATUS2ND25));
            empschedule.setStatus2nd26(pstEmpSchedule.getInt(FLD_STATUS2ND26));
            empschedule.setStatus2nd27(pstEmpSchedule.getInt(FLD_STATUS2ND27));
            empschedule.setStatus2nd28(pstEmpSchedule.getInt(FLD_STATUS2ND28));
            empschedule.setStatus2nd29(pstEmpSchedule.getInt(FLD_STATUS2ND29));
            empschedule.setStatus2nd30(pstEmpSchedule.getInt(FLD_STATUS2ND30));
            empschedule.setStatus2nd31(pstEmpSchedule.getInt(FLD_STATUS2ND31));

            empschedule.setReason1(pstEmpSchedule.getInt(FLD_REASON1));
            empschedule.setReason2(pstEmpSchedule.getInt(FLD_REASON2));
            empschedule.setReason3(pstEmpSchedule.getInt(FLD_REASON3));
            empschedule.setReason4(pstEmpSchedule.getInt(FLD_REASON4));
            empschedule.setReason5(pstEmpSchedule.getInt(FLD_REASON5));
            empschedule.setReason6(pstEmpSchedule.getInt(FLD_REASON6));
            empschedule.setReason7(pstEmpSchedule.getInt(FLD_REASON7));
            empschedule.setReason8(pstEmpSchedule.getInt(FLD_REASON8));
            empschedule.setReason9(pstEmpSchedule.getInt(FLD_REASON9));
            empschedule.setReason10(pstEmpSchedule.getInt(FLD_REASON10));
            empschedule.setReason11(pstEmpSchedule.getInt(FLD_REASON11));
            empschedule.setReason12(pstEmpSchedule.getInt(FLD_REASON12));
            empschedule.setReason13(pstEmpSchedule.getInt(FLD_REASON13));
            empschedule.setReason14(pstEmpSchedule.getInt(FLD_REASON14));
            empschedule.setReason15(pstEmpSchedule.getInt(FLD_REASON15));
            empschedule.setReason16(pstEmpSchedule.getInt(FLD_REASON16));
            empschedule.setReason17(pstEmpSchedule.getInt(FLD_REASON17));
            empschedule.setReason18(pstEmpSchedule.getInt(FLD_REASON18));
            empschedule.setReason19(pstEmpSchedule.getInt(FLD_REASON19));
            empschedule.setReason20(pstEmpSchedule.getInt(FLD_REASON20));
            empschedule.setReason21(pstEmpSchedule.getInt(FLD_REASON21));
            empschedule.setReason22(pstEmpSchedule.getInt(FLD_REASON22));
            empschedule.setReason23(pstEmpSchedule.getInt(FLD_REASON23));
            empschedule.setReason24(pstEmpSchedule.getInt(FLD_REASON24));
            empschedule.setReason25(pstEmpSchedule.getInt(FLD_REASON25));
            empschedule.setReason26(pstEmpSchedule.getInt(FLD_REASON26));
            empschedule.setReason27(pstEmpSchedule.getInt(FLD_REASON27));
            empschedule.setReason28(pstEmpSchedule.getInt(FLD_REASON28));
            empschedule.setReason29(pstEmpSchedule.getInt(FLD_REASON29));
            empschedule.setReason30(pstEmpSchedule.getInt(FLD_REASON30));
            empschedule.setReason31(pstEmpSchedule.getInt(FLD_REASON31));
            empschedule.setReason2nd1(pstEmpSchedule.getInt(FLD_REASON2ND1));
            empschedule.setReason2nd2(pstEmpSchedule.getInt(FLD_REASON2ND2));
            empschedule.setReason2nd3(pstEmpSchedule.getInt(FLD_REASON2ND3));
            empschedule.setReason2nd4(pstEmpSchedule.getInt(FLD_REASON2ND4));
            empschedule.setReason2nd5(pstEmpSchedule.getInt(FLD_REASON2ND5));
            empschedule.setReason2nd6(pstEmpSchedule.getInt(FLD_REASON2ND6));
            empschedule.setReason2nd7(pstEmpSchedule.getInt(FLD_REASON2ND7));
            empschedule.setReason2nd8(pstEmpSchedule.getInt(FLD_REASON2ND8));
            empschedule.setReason2nd9(pstEmpSchedule.getInt(FLD_REASON2ND9));
            empschedule.setReason2nd10(pstEmpSchedule.getInt(FLD_REASON2ND10));
            empschedule.setReason2nd11(pstEmpSchedule.getInt(FLD_REASON2ND11));
            empschedule.setReason2nd12(pstEmpSchedule.getInt(FLD_REASON2ND12));
            empschedule.setReason2nd13(pstEmpSchedule.getInt(FLD_REASON2ND13));
            empschedule.setReason2nd14(pstEmpSchedule.getInt(FLD_REASON2ND14));
            empschedule.setReason2nd15(pstEmpSchedule.getInt(FLD_REASON2ND15));
            empschedule.setReason2nd16(pstEmpSchedule.getInt(FLD_REASON2ND16));
            empschedule.setReason2nd17(pstEmpSchedule.getInt(FLD_REASON2ND17));
            empschedule.setReason2nd18(pstEmpSchedule.getInt(FLD_REASON2ND18));
            empschedule.setReason2nd19(pstEmpSchedule.getInt(FLD_REASON2ND19));
            empschedule.setReason2nd20(pstEmpSchedule.getInt(FLD_REASON2ND20));
            empschedule.setReason2nd21(pstEmpSchedule.getInt(FLD_REASON2ND21));
            empschedule.setReason2nd22(pstEmpSchedule.getInt(FLD_REASON2ND22));
            empschedule.setReason2nd23(pstEmpSchedule.getInt(FLD_REASON2ND23));
            empschedule.setReason2nd24(pstEmpSchedule.getInt(FLD_REASON2ND24));
            empschedule.setReason2nd25(pstEmpSchedule.getInt(FLD_REASON2ND25));
            empschedule.setReason2nd26(pstEmpSchedule.getInt(FLD_REASON2ND26));
            empschedule.setReason2nd27(pstEmpSchedule.getInt(FLD_REASON2ND27));
            empschedule.setReason2nd28(pstEmpSchedule.getInt(FLD_REASON2ND28));
            empschedule.setReason2nd29(pstEmpSchedule.getInt(FLD_REASON2ND29));
            empschedule.setReason2nd30(pstEmpSchedule.getInt(FLD_REASON2ND30));
            empschedule.setReason2nd31(pstEmpSchedule.getInt(FLD_REASON2ND31));

            empschedule.setNote1(pstEmpSchedule.getString(FLD_NOTE1));
            empschedule.setNote2(pstEmpSchedule.getString(FLD_NOTE2));
            empschedule.setNote3(pstEmpSchedule.getString(FLD_NOTE3));
            empschedule.setNote4(pstEmpSchedule.getString(FLD_NOTE4));
            empschedule.setNote5(pstEmpSchedule.getString(FLD_NOTE5));
            empschedule.setNote6(pstEmpSchedule.getString(FLD_NOTE6));
            empschedule.setNote7(pstEmpSchedule.getString(FLD_NOTE7));
            empschedule.setNote8(pstEmpSchedule.getString(FLD_NOTE8));
            empschedule.setNote9(pstEmpSchedule.getString(FLD_NOTE9));
            empschedule.setNote10(pstEmpSchedule.getString(FLD_NOTE10));
            empschedule.setNote11(pstEmpSchedule.getString(FLD_NOTE11));
            empschedule.setNote12(pstEmpSchedule.getString(FLD_NOTE12));
            empschedule.setNote13(pstEmpSchedule.getString(FLD_NOTE13));
            empschedule.setNote14(pstEmpSchedule.getString(FLD_NOTE14));
            empschedule.setNote15(pstEmpSchedule.getString(FLD_NOTE15));
            empschedule.setNote16(pstEmpSchedule.getString(FLD_NOTE16));
            empschedule.setNote17(pstEmpSchedule.getString(FLD_NOTE17));
            empschedule.setNote18(pstEmpSchedule.getString(FLD_NOTE18));
            empschedule.setNote19(pstEmpSchedule.getString(FLD_NOTE19));
            empschedule.setNote20(pstEmpSchedule.getString(FLD_NOTE20));
            empschedule.setNote21(pstEmpSchedule.getString(FLD_NOTE21));
            empschedule.setNote22(pstEmpSchedule.getString(FLD_NOTE22));
            empschedule.setNote23(pstEmpSchedule.getString(FLD_NOTE23));
            empschedule.setNote24(pstEmpSchedule.getString(FLD_NOTE24));
            empschedule.setNote25(pstEmpSchedule.getString(FLD_NOTE25));
            empschedule.setNote26(pstEmpSchedule.getString(FLD_NOTE26));
            empschedule.setNote27(pstEmpSchedule.getString(FLD_NOTE27));
            empschedule.setNote28(pstEmpSchedule.getString(FLD_NOTE28));
            empschedule.setNote29(pstEmpSchedule.getString(FLD_NOTE29));
            empschedule.setNote30(pstEmpSchedule.getString(FLD_NOTE30));
            empschedule.setNote31(pstEmpSchedule.getString(FLD_NOTE31));
            empschedule.setNote2nd1(pstEmpSchedule.getString(FLD_NOTE2ND1));
            empschedule.setNote2nd2(pstEmpSchedule.getString(FLD_NOTE2ND2));
            empschedule.setNote2nd3(pstEmpSchedule.getString(FLD_NOTE2ND3));
            empschedule.setNote2nd4(pstEmpSchedule.getString(FLD_NOTE2ND4));
            empschedule.setNote2nd5(pstEmpSchedule.getString(FLD_NOTE2ND5));
            empschedule.setNote2nd6(pstEmpSchedule.getString(FLD_NOTE2ND6));
            empschedule.setNote2nd7(pstEmpSchedule.getString(FLD_NOTE2ND7));
            empschedule.setNote2nd8(pstEmpSchedule.getString(FLD_NOTE2ND8));
            empschedule.setNote2nd9(pstEmpSchedule.getString(FLD_NOTE2ND9));
            empschedule.setNote2nd10(pstEmpSchedule.getString(FLD_NOTE2ND10));
            empschedule.setNote2nd11(pstEmpSchedule.getString(FLD_NOTE2ND11));
            empschedule.setNote2nd12(pstEmpSchedule.getString(FLD_NOTE2ND12));
            empschedule.setNote2nd13(pstEmpSchedule.getString(FLD_NOTE2ND13));
            empschedule.setNote2nd14(pstEmpSchedule.getString(FLD_NOTE2ND14));
            empschedule.setNote2nd15(pstEmpSchedule.getString(FLD_NOTE2ND15));
            empschedule.setNote2nd16(pstEmpSchedule.getString(FLD_NOTE2ND16));
            empschedule.setNote2nd17(pstEmpSchedule.getString(FLD_NOTE2ND17));
            empschedule.setNote2nd18(pstEmpSchedule.getString(FLD_NOTE2ND18));
            empschedule.setNote2nd19(pstEmpSchedule.getString(FLD_NOTE2ND19));
            empschedule.setNote2nd20(pstEmpSchedule.getString(FLD_NOTE2ND20));
            empschedule.setNote2nd21(pstEmpSchedule.getString(FLD_NOTE2ND21));
            empschedule.setNote2nd22(pstEmpSchedule.getString(FLD_NOTE2ND22));
            empschedule.setNote2nd23(pstEmpSchedule.getString(FLD_NOTE2ND23));
            empschedule.setNote2nd24(pstEmpSchedule.getString(FLD_NOTE2ND24));
            empschedule.setNote2nd25(pstEmpSchedule.getString(FLD_NOTE2ND25));
            empschedule.setNote2nd26(pstEmpSchedule.getString(FLD_NOTE2ND26));
            empschedule.setNote2nd27(pstEmpSchedule.getString(FLD_NOTE2ND27));
            empschedule.setNote2nd28(pstEmpSchedule.getString(FLD_NOTE2ND28));
            empschedule.setNote2nd29(pstEmpSchedule.getString(FLD_NOTE2ND29));
            empschedule.setNote2nd30(pstEmpSchedule.getString(FLD_NOTE2ND30));
            empschedule.setNote2nd31(pstEmpSchedule.getString(FLD_NOTE2ND31));

            empschedule.setIn1(pstEmpSchedule.getDate(FLD_IN1));
            empschedule.setIn2(pstEmpSchedule.getDate(FLD_IN2));
            empschedule.setIn3(pstEmpSchedule.getDate(FLD_IN3));
            empschedule.setIn4(pstEmpSchedule.getDate(FLD_IN4));
            empschedule.setIn5(pstEmpSchedule.getDate(FLD_IN5));
            empschedule.setIn6(pstEmpSchedule.getDate(FLD_IN6));
            empschedule.setIn7(pstEmpSchedule.getDate(FLD_IN7));
            empschedule.setIn8(pstEmpSchedule.getDate(FLD_IN8));
            empschedule.setIn9(pstEmpSchedule.getDate(FLD_IN9));
            empschedule.setIn10(pstEmpSchedule.getDate(FLD_IN10));
            empschedule.setIn11(pstEmpSchedule.getDate(FLD_IN11));
            empschedule.setIn12(pstEmpSchedule.getDate(FLD_IN12));
            empschedule.setIn13(pstEmpSchedule.getDate(FLD_IN13));
            empschedule.setIn14(pstEmpSchedule.getDate(FLD_IN14));
            empschedule.setIn15(pstEmpSchedule.getDate(FLD_IN15));
            empschedule.setIn16(pstEmpSchedule.getDate(FLD_IN16));
            empschedule.setIn17(pstEmpSchedule.getDate(FLD_IN17));
            empschedule.setIn18(pstEmpSchedule.getDate(FLD_IN18));
            empschedule.setIn19(pstEmpSchedule.getDate(FLD_IN19));
            empschedule.setIn20(pstEmpSchedule.getDate(FLD_IN20));
            empschedule.setIn21(pstEmpSchedule.getDate(FLD_IN21));
            empschedule.setIn22(pstEmpSchedule.getDate(FLD_IN22));
            empschedule.setIn23(pstEmpSchedule.getDate(FLD_IN23));
            empschedule.setIn24(pstEmpSchedule.getDate(FLD_IN24));
            empschedule.setIn25(pstEmpSchedule.getDate(FLD_IN25));
            empschedule.setIn26(pstEmpSchedule.getDate(FLD_IN26));
            empschedule.setIn27(pstEmpSchedule.getDate(FLD_IN27));
            empschedule.setIn28(pstEmpSchedule.getDate(FLD_IN28));
            empschedule.setIn29(pstEmpSchedule.getDate(FLD_IN29));
            empschedule.setIn30(pstEmpSchedule.getDate(FLD_IN30));
            empschedule.setIn31(pstEmpSchedule.getDate(FLD_IN31));
            empschedule.setIn2nd1(pstEmpSchedule.getDate(FLD_IN2ND1));
            empschedule.setIn2nd2(pstEmpSchedule.getDate(FLD_IN2ND2));
            empschedule.setIn2nd3(pstEmpSchedule.getDate(FLD_IN2ND3));
            empschedule.setIn2nd4(pstEmpSchedule.getDate(FLD_IN2ND4));
            empschedule.setIn2nd5(pstEmpSchedule.getDate(FLD_IN2ND5));
            empschedule.setIn2nd6(pstEmpSchedule.getDate(FLD_IN2ND6));
            empschedule.setIn2nd7(pstEmpSchedule.getDate(FLD_IN2ND7));
            empschedule.setIn2nd8(pstEmpSchedule.getDate(FLD_IN2ND8));
            empschedule.setIn2nd9(pstEmpSchedule.getDate(FLD_IN2ND9));
            empschedule.setIn2nd10(pstEmpSchedule.getDate(FLD_IN2ND10));
            empschedule.setIn2nd11(pstEmpSchedule.getDate(FLD_IN2ND11));
            empschedule.setIn2nd12(pstEmpSchedule.getDate(FLD_IN2ND12));
            empschedule.setIn2nd13(pstEmpSchedule.getDate(FLD_IN2ND13));
            empschedule.setIn2nd14(pstEmpSchedule.getDate(FLD_IN2ND14));
            empschedule.setIn2nd15(pstEmpSchedule.getDate(FLD_IN2ND15));
            empschedule.setIn2nd16(pstEmpSchedule.getDate(FLD_IN2ND16));
            empschedule.setIn2nd17(pstEmpSchedule.getDate(FLD_IN2ND17));
            empschedule.setIn2nd18(pstEmpSchedule.getDate(FLD_IN2ND18));
            empschedule.setIn2nd19(pstEmpSchedule.getDate(FLD_IN2ND19));
            empschedule.setIn2nd20(pstEmpSchedule.getDate(FLD_IN2ND20));
            empschedule.setIn2nd21(pstEmpSchedule.getDate(FLD_IN2ND21));
            empschedule.setIn2nd22(pstEmpSchedule.getDate(FLD_IN2ND22));
            empschedule.setIn2nd23(pstEmpSchedule.getDate(FLD_IN2ND23));
            empschedule.setIn2nd24(pstEmpSchedule.getDate(FLD_IN2ND24));
            empschedule.setIn2nd25(pstEmpSchedule.getDate(FLD_IN2ND25));
            empschedule.setIn2nd26(pstEmpSchedule.getDate(FLD_IN2ND26));
            empschedule.setIn2nd27(pstEmpSchedule.getDate(FLD_IN2ND27));
            empschedule.setIn2nd28(pstEmpSchedule.getDate(FLD_IN2ND28));
            empschedule.setIn2nd29(pstEmpSchedule.getDate(FLD_IN2ND29));
            empschedule.setIn2nd30(pstEmpSchedule.getDate(FLD_IN2ND30));
            empschedule.setIn2nd31(pstEmpSchedule.getDate(FLD_IN2ND31));

            empschedule.setOut1(pstEmpSchedule.getDate(FLD_OUT1));
            empschedule.setOut2(pstEmpSchedule.getDate(FLD_OUT2));
            empschedule.setOut3(pstEmpSchedule.getDate(FLD_OUT3));
            empschedule.setOut4(pstEmpSchedule.getDate(FLD_OUT4));
            empschedule.setOut5(pstEmpSchedule.getDate(FLD_OUT5));
            empschedule.setOut6(pstEmpSchedule.getDate(FLD_OUT6));
            empschedule.setOut7(pstEmpSchedule.getDate(FLD_OUT7));
            empschedule.setOut8(pstEmpSchedule.getDate(FLD_OUT8));
            empschedule.setOut9(pstEmpSchedule.getDate(FLD_OUT9));
            empschedule.setOut10(pstEmpSchedule.getDate(FLD_OUT10));
            empschedule.setOut11(pstEmpSchedule.getDate(FLD_OUT11));
            empschedule.setOut12(pstEmpSchedule.getDate(FLD_OUT12));
            empschedule.setOut13(pstEmpSchedule.getDate(FLD_OUT13));
            empschedule.setOut14(pstEmpSchedule.getDate(FLD_OUT14));
            empschedule.setOut15(pstEmpSchedule.getDate(FLD_OUT15));
            empschedule.setOut16(pstEmpSchedule.getDate(FLD_OUT16));
            empschedule.setOut17(pstEmpSchedule.getDate(FLD_OUT17));
            empschedule.setOut18(pstEmpSchedule.getDate(FLD_OUT18));
            empschedule.setOut19(pstEmpSchedule.getDate(FLD_OUT19));
            empschedule.setOut20(pstEmpSchedule.getDate(FLD_OUT20));
            empschedule.setOut21(pstEmpSchedule.getDate(FLD_OUT21));
            empschedule.setOut22(pstEmpSchedule.getDate(FLD_OUT22));
            empschedule.setOut23(pstEmpSchedule.getDate(FLD_OUT23));
            empschedule.setOut24(pstEmpSchedule.getDate(FLD_OUT24));
            empschedule.setOut25(pstEmpSchedule.getDate(FLD_OUT25));
            empschedule.setOut26(pstEmpSchedule.getDate(FLD_OUT26));
            empschedule.setOut27(pstEmpSchedule.getDate(FLD_OUT27));
            empschedule.setOut28(pstEmpSchedule.getDate(FLD_OUT28));
            empschedule.setOut29(pstEmpSchedule.getDate(FLD_OUT29));
            empschedule.setOut30(pstEmpSchedule.getDate(FLD_OUT30));
            empschedule.setOut31(pstEmpSchedule.getDate(FLD_OUT31));
            empschedule.setOut2nd1(pstEmpSchedule.getDate(FLD_OUT2ND1));
            empschedule.setOut2nd2(pstEmpSchedule.getDate(FLD_OUT2ND2));
            empschedule.setOut2nd3(pstEmpSchedule.getDate(FLD_OUT2ND3));
            empschedule.setOut2nd4(pstEmpSchedule.getDate(FLD_OUT2ND4));
            empschedule.setOut2nd5(pstEmpSchedule.getDate(FLD_OUT2ND5));
            empschedule.setOut2nd6(pstEmpSchedule.getDate(FLD_OUT2ND6));
            empschedule.setOut2nd7(pstEmpSchedule.getDate(FLD_OUT2ND7));
            empschedule.setOut2nd8(pstEmpSchedule.getDate(FLD_OUT2ND8));
            empschedule.setOut2nd9(pstEmpSchedule.getDate(FLD_OUT2ND9));
            empschedule.setOut2nd10(pstEmpSchedule.getDate(FLD_OUT2ND10));
            empschedule.setOut2nd11(pstEmpSchedule.getDate(FLD_OUT2ND11));
            empschedule.setOut2nd12(pstEmpSchedule.getDate(FLD_OUT2ND12));
            empschedule.setOut2nd13(pstEmpSchedule.getDate(FLD_OUT2ND13));
            empschedule.setOut2nd14(pstEmpSchedule.getDate(FLD_OUT2ND14));
            empschedule.setOut2nd15(pstEmpSchedule.getDate(FLD_OUT2ND15));
            empschedule.setOut2nd16(pstEmpSchedule.getDate(FLD_OUT2ND16));
            empschedule.setOut2nd17(pstEmpSchedule.getDate(FLD_OUT2ND17));
            empschedule.setOut2nd18(pstEmpSchedule.getDate(FLD_OUT2ND18));
            empschedule.setOut2nd19(pstEmpSchedule.getDate(FLD_OUT2ND19));
            empschedule.setOut2nd20(pstEmpSchedule.getDate(FLD_OUT2ND20));
            empschedule.setOut2nd21(pstEmpSchedule.getDate(FLD_OUT2ND21));
            empschedule.setOut2nd22(pstEmpSchedule.getDate(FLD_OUT2ND22));
            empschedule.setOut2nd23(pstEmpSchedule.getDate(FLD_OUT2ND23));
            empschedule.setOut2nd24(pstEmpSchedule.getDate(FLD_OUT2ND24));
            empschedule.setOut2nd25(pstEmpSchedule.getDate(FLD_OUT2ND25));
            empschedule.setOut2nd26(pstEmpSchedule.getDate(FLD_OUT2ND26));
            empschedule.setOut2nd27(pstEmpSchedule.getDate(FLD_OUT2ND27));
            empschedule.setOut2nd28(pstEmpSchedule.getDate(FLD_OUT2ND28));
            empschedule.setOut2nd29(pstEmpSchedule.getDate(FLD_OUT2ND29));
            empschedule.setOut2nd30(pstEmpSchedule.getDate(FLD_OUT2ND30));
            empschedule.setOut2nd31(pstEmpSchedule.getDate(FLD_OUT2ND31));

            empschedule.setScheduleType(pstEmpSchedule.getInt(FLD_SCHEDULE_TYPE));

            return empschedule;
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstEmpSchedule(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(EmpSchedule empschedule) throws DBException {
        try {
            PstEmpSchedule pstEmpSchedule = new PstEmpSchedule(0);

            pstEmpSchedule.setLong(FLD_PERIOD_ID, empschedule.getPeriodId());
            pstEmpSchedule.setLong(FLD_EMPLOYEE_ID, empschedule.getEmployeeId());

            // schedule
            pstEmpSchedule.setLong(FLD_D1, empschedule.getD1());
            pstEmpSchedule.setLong(FLD_D2, empschedule.getD2());
            pstEmpSchedule.setLong(FLD_D3, empschedule.getD3());
            pstEmpSchedule.setLong(FLD_D4, empschedule.getD4());
            pstEmpSchedule.setLong(FLD_D5, empschedule.getD5());
            pstEmpSchedule.setLong(FLD_D6, empschedule.getD6());
            pstEmpSchedule.setLong(FLD_D7, empschedule.getD7());
            pstEmpSchedule.setLong(FLD_D8, empschedule.getD8());
            pstEmpSchedule.setLong(FLD_D9, empschedule.getD9());
            pstEmpSchedule.setLong(FLD_D10, empschedule.getD10());
            pstEmpSchedule.setLong(FLD_D11, empschedule.getD11());
            pstEmpSchedule.setLong(FLD_D12, empschedule.getD12());
            pstEmpSchedule.setLong(FLD_D13, empschedule.getD13());
            pstEmpSchedule.setLong(FLD_D14, empschedule.getD14());
            pstEmpSchedule.setLong(FLD_D15, empschedule.getD15());
            pstEmpSchedule.setLong(FLD_D16, empschedule.getD16());
            pstEmpSchedule.setLong(FLD_D17, empschedule.getD17());
            pstEmpSchedule.setLong(FLD_D18, empschedule.getD18());
            pstEmpSchedule.setLong(FLD_D19, empschedule.getD19());
            pstEmpSchedule.setLong(FLD_D20, empschedule.getD20());
            pstEmpSchedule.setLong(FLD_D21, empschedule.getD21());
            pstEmpSchedule.setLong(FLD_D22, empschedule.getD22());
            pstEmpSchedule.setLong(FLD_D23, empschedule.getD23());
            pstEmpSchedule.setLong(FLD_D24, empschedule.getD24());
            pstEmpSchedule.setLong(FLD_D25, empschedule.getD25());
            pstEmpSchedule.setLong(FLD_D26, empschedule.getD26());
            pstEmpSchedule.setLong(FLD_D27, empschedule.getD27());
            pstEmpSchedule.setLong(FLD_D28, empschedule.getD28());
            pstEmpSchedule.setLong(FLD_D29, empschedule.getD29());
            pstEmpSchedule.setLong(FLD_D30, empschedule.getD30());
            pstEmpSchedule.setLong(FLD_D31, empschedule.getD31());
            pstEmpSchedule.setLong(FLD_D2ND1, empschedule.getD2nd1());
            pstEmpSchedule.setLong(FLD_D2ND2, empschedule.getD2nd2());
            pstEmpSchedule.setLong(FLD_D2ND3, empschedule.getD2nd3());
            pstEmpSchedule.setLong(FLD_D2ND4, empschedule.getD2nd4());
            pstEmpSchedule.setLong(FLD_D2ND5, empschedule.getD2nd5());
            pstEmpSchedule.setLong(FLD_D2ND6, empschedule.getD2nd6());
            pstEmpSchedule.setLong(FLD_D2ND7, empschedule.getD2nd7());
            pstEmpSchedule.setLong(FLD_D2ND8, empschedule.getD2nd8());
            pstEmpSchedule.setLong(FLD_D2ND9, empschedule.getD2nd9());
            pstEmpSchedule.setLong(FLD_D2ND10, empschedule.getD2nd10());
            pstEmpSchedule.setLong(FLD_D2ND11, empschedule.getD2nd11());
            pstEmpSchedule.setLong(FLD_D2ND12, empschedule.getD2nd12());
            pstEmpSchedule.setLong(FLD_D2ND13, empschedule.getD2nd13());
            pstEmpSchedule.setLong(FLD_D2ND14, empschedule.getD2nd14());
            pstEmpSchedule.setLong(FLD_D2ND15, empschedule.getD2nd15());
            pstEmpSchedule.setLong(FLD_D2ND16, empschedule.getD2nd16());
            pstEmpSchedule.setLong(FLD_D2ND17, empschedule.getD2nd17());
            pstEmpSchedule.setLong(FLD_D2ND18, empschedule.getD2nd18());
            pstEmpSchedule.setLong(FLD_D2ND19, empschedule.getD2nd19());
            pstEmpSchedule.setLong(FLD_D2ND20, empschedule.getD2nd20());
            pstEmpSchedule.setLong(FLD_D2ND21, empschedule.getD2nd21());
            pstEmpSchedule.setLong(FLD_D2ND22, empschedule.getD2nd22());
            pstEmpSchedule.setLong(FLD_D2ND23, empschedule.getD2nd23());
            pstEmpSchedule.setLong(FLD_D2ND24, empschedule.getD2nd24());
            pstEmpSchedule.setLong(FLD_D2ND25, empschedule.getD2nd25());
            pstEmpSchedule.setLong(FLD_D2ND26, empschedule.getD2nd26());
            pstEmpSchedule.setLong(FLD_D2ND27, empschedule.getD2nd27());
            pstEmpSchedule.setLong(FLD_D2ND28, empschedule.getD2nd28());
            pstEmpSchedule.setLong(FLD_D2ND29, empschedule.getD2nd29());
            pstEmpSchedule.setLong(FLD_D2ND30, empschedule.getD2nd30());
            pstEmpSchedule.setLong(FLD_D2ND31, empschedule.getD2nd31());

            // status
            pstEmpSchedule.setInt(FLD_STATUS1, empschedule.getStatus1());
            pstEmpSchedule.setInt(FLD_STATUS2, empschedule.getStatus2());
            pstEmpSchedule.setInt(FLD_STATUS3, empschedule.getStatus3());
            pstEmpSchedule.setInt(FLD_STATUS4, empschedule.getStatus4());
            pstEmpSchedule.setInt(FLD_STATUS5, empschedule.getStatus5());
            pstEmpSchedule.setInt(FLD_STATUS6, empschedule.getStatus6());
            pstEmpSchedule.setInt(FLD_STATUS7, empschedule.getStatus7());
            pstEmpSchedule.setInt(FLD_STATUS8, empschedule.getStatus8());
            pstEmpSchedule.setInt(FLD_STATUS9, empschedule.getStatus9());
            pstEmpSchedule.setInt(FLD_STATUS10, empschedule.getStatus10());
            pstEmpSchedule.setInt(FLD_STATUS11, empschedule.getStatus11());
            pstEmpSchedule.setInt(FLD_STATUS12, empschedule.getStatus12());
            pstEmpSchedule.setInt(FLD_STATUS13, empschedule.getStatus13());
            pstEmpSchedule.setInt(FLD_STATUS14, empschedule.getStatus14());
            pstEmpSchedule.setInt(FLD_STATUS15, empschedule.getStatus15());
            pstEmpSchedule.setInt(FLD_STATUS16, empschedule.getStatus16());
            pstEmpSchedule.setInt(FLD_STATUS17, empschedule.getStatus17());
            pstEmpSchedule.setInt(FLD_STATUS18, empschedule.getStatus18());
            pstEmpSchedule.setInt(FLD_STATUS19, empschedule.getStatus19());
            pstEmpSchedule.setInt(FLD_STATUS20, empschedule.getStatus20());
            pstEmpSchedule.setInt(FLD_STATUS21, empschedule.getStatus21());
            pstEmpSchedule.setInt(FLD_STATUS22, empschedule.getStatus22());
            pstEmpSchedule.setInt(FLD_STATUS23, empschedule.getStatus23());
            pstEmpSchedule.setInt(FLD_STATUS24, empschedule.getStatus24());
            pstEmpSchedule.setInt(FLD_STATUS25, empschedule.getStatus25());
            pstEmpSchedule.setInt(FLD_STATUS26, empschedule.getStatus26());
            pstEmpSchedule.setInt(FLD_STATUS27, empschedule.getStatus27());
            pstEmpSchedule.setInt(FLD_STATUS28, empschedule.getStatus28());
            pstEmpSchedule.setInt(FLD_STATUS29, empschedule.getStatus29());
            pstEmpSchedule.setInt(FLD_STATUS30, empschedule.getStatus30());
            pstEmpSchedule.setInt(FLD_STATUS31, empschedule.getStatus31());
            pstEmpSchedule.setInt(FLD_STATUS2ND1, empschedule.getStatus2nd1());
            pstEmpSchedule.setInt(FLD_STATUS2ND2, empschedule.getStatus2nd2());
            pstEmpSchedule.setInt(FLD_STATUS2ND3, empschedule.getStatus2nd3());
            pstEmpSchedule.setInt(FLD_STATUS2ND4, empschedule.getStatus2nd4());
            pstEmpSchedule.setInt(FLD_STATUS2ND5, empschedule.getStatus2nd5());
            pstEmpSchedule.setInt(FLD_STATUS2ND6, empschedule.getStatus2nd6());
            pstEmpSchedule.setInt(FLD_STATUS2ND7, empschedule.getStatus2nd7());
            pstEmpSchedule.setInt(FLD_STATUS2ND8, empschedule.getStatus2nd8());
            pstEmpSchedule.setInt(FLD_STATUS2ND9, empschedule.getStatus2nd9());
            pstEmpSchedule.setInt(FLD_STATUS2ND10, empschedule.getStatus2nd10());
            pstEmpSchedule.setInt(FLD_STATUS2ND11, empschedule.getStatus2nd11());
            pstEmpSchedule.setInt(FLD_STATUS2ND12, empschedule.getStatus2nd12());
            pstEmpSchedule.setInt(FLD_STATUS2ND13, empschedule.getStatus2nd13());
            pstEmpSchedule.setInt(FLD_STATUS2ND14, empschedule.getStatus2nd14());
            pstEmpSchedule.setInt(FLD_STATUS2ND15, empschedule.getStatus2nd15());
            pstEmpSchedule.setInt(FLD_STATUS2ND16, empschedule.getStatus2nd16());
            pstEmpSchedule.setInt(FLD_STATUS2ND17, empschedule.getStatus2nd17());
            pstEmpSchedule.setInt(FLD_STATUS2ND18, empschedule.getStatus2nd18());
            pstEmpSchedule.setInt(FLD_STATUS2ND19, empschedule.getStatus2nd19());
            pstEmpSchedule.setInt(FLD_STATUS2ND20, empschedule.getStatus2nd20());
            pstEmpSchedule.setInt(FLD_STATUS2ND21, empschedule.getStatus2nd21());
            pstEmpSchedule.setInt(FLD_STATUS2ND22, empschedule.getStatus2nd22());
            pstEmpSchedule.setInt(FLD_STATUS2ND23, empschedule.getStatus2nd23());
            pstEmpSchedule.setInt(FLD_STATUS2ND24, empschedule.getStatus2nd24());
            pstEmpSchedule.setInt(FLD_STATUS2ND25, empschedule.getStatus2nd25());
            pstEmpSchedule.setInt(FLD_STATUS2ND26, empschedule.getStatus2nd26());
            pstEmpSchedule.setInt(FLD_STATUS2ND27, empschedule.getStatus2nd27());
            pstEmpSchedule.setInt(FLD_STATUS2ND28, empschedule.getStatus2nd28());
            pstEmpSchedule.setInt(FLD_STATUS2ND29, empschedule.getStatus2nd29());
            pstEmpSchedule.setInt(FLD_STATUS2ND30, empschedule.getStatus2nd30());
            pstEmpSchedule.setInt(FLD_STATUS2ND31, empschedule.getStatus2nd31());

            // reason
            pstEmpSchedule.setInt(FLD_REASON1, empschedule.getReason1());
            pstEmpSchedule.setInt(FLD_REASON2, empschedule.getReason2());
            pstEmpSchedule.setInt(FLD_REASON3, empschedule.getReason3());
            pstEmpSchedule.setInt(FLD_REASON4, empschedule.getReason4());
            pstEmpSchedule.setInt(FLD_REASON5, empschedule.getReason5());
            pstEmpSchedule.setInt(FLD_REASON6, empschedule.getReason6());
            pstEmpSchedule.setInt(FLD_REASON7, empschedule.getReason7());
            pstEmpSchedule.setInt(FLD_REASON8, empschedule.getReason8());
            pstEmpSchedule.setInt(FLD_REASON9, empschedule.getReason9());
            pstEmpSchedule.setInt(FLD_REASON10, empschedule.getReason10());
            pstEmpSchedule.setInt(FLD_REASON11, empschedule.getReason11());
            pstEmpSchedule.setInt(FLD_REASON12, empschedule.getReason12());
            pstEmpSchedule.setInt(FLD_REASON13, empschedule.getReason13());
            pstEmpSchedule.setInt(FLD_REASON14, empschedule.getReason14());
            pstEmpSchedule.setInt(FLD_REASON15, empschedule.getReason15());
            pstEmpSchedule.setInt(FLD_REASON16, empschedule.getReason16());
            pstEmpSchedule.setInt(FLD_REASON17, empschedule.getReason17());
            pstEmpSchedule.setInt(FLD_REASON18, empschedule.getReason18());
            pstEmpSchedule.setInt(FLD_REASON19, empschedule.getReason19());
            pstEmpSchedule.setInt(FLD_REASON20, empschedule.getReason20());
            pstEmpSchedule.setInt(FLD_REASON21, empschedule.getReason21());
            pstEmpSchedule.setInt(FLD_REASON22, empschedule.getReason22());
            pstEmpSchedule.setInt(FLD_REASON23, empschedule.getReason23());
            pstEmpSchedule.setInt(FLD_REASON24, empschedule.getReason24());
            pstEmpSchedule.setInt(FLD_REASON25, empschedule.getReason25());
            pstEmpSchedule.setInt(FLD_REASON26, empschedule.getReason26());
            pstEmpSchedule.setInt(FLD_REASON27, empschedule.getReason27());
            pstEmpSchedule.setInt(FLD_REASON28, empschedule.getReason28());
            pstEmpSchedule.setInt(FLD_REASON29, empschedule.getReason29());
            pstEmpSchedule.setInt(FLD_REASON30, empschedule.getReason30());
            pstEmpSchedule.setInt(FLD_REASON31, empschedule.getReason31());
            pstEmpSchedule.setInt(FLD_REASON2ND1, empschedule.getReason2nd1());
            pstEmpSchedule.setInt(FLD_REASON2ND2, empschedule.getReason2nd2());
            pstEmpSchedule.setInt(FLD_REASON2ND3, empschedule.getReason2nd3());
            pstEmpSchedule.setInt(FLD_REASON2ND4, empschedule.getReason2nd4());
            pstEmpSchedule.setInt(FLD_REASON2ND5, empschedule.getReason2nd5());
            pstEmpSchedule.setInt(FLD_REASON2ND6, empschedule.getReason2nd6());
            pstEmpSchedule.setInt(FLD_REASON2ND7, empschedule.getReason2nd7());
            pstEmpSchedule.setInt(FLD_REASON2ND8, empschedule.getReason2nd8());
            pstEmpSchedule.setInt(FLD_REASON2ND9, empschedule.getReason2nd9());
            pstEmpSchedule.setInt(FLD_REASON2ND10, empschedule.getReason2nd10());
            pstEmpSchedule.setInt(FLD_REASON2ND11, empschedule.getReason2nd11());
            pstEmpSchedule.setInt(FLD_REASON2ND12, empschedule.getReason2nd12());
            pstEmpSchedule.setInt(FLD_REASON2ND13, empschedule.getReason2nd13());
            pstEmpSchedule.setInt(FLD_REASON2ND14, empschedule.getReason2nd14());
            pstEmpSchedule.setInt(FLD_REASON2ND15, empschedule.getReason2nd15());
            pstEmpSchedule.setInt(FLD_REASON2ND16, empschedule.getReason2nd16());
            pstEmpSchedule.setInt(FLD_REASON2ND17, empschedule.getReason2nd17());
            pstEmpSchedule.setInt(FLD_REASON2ND18, empschedule.getReason2nd18());
            pstEmpSchedule.setInt(FLD_REASON2ND19, empschedule.getReason2nd19());
            pstEmpSchedule.setInt(FLD_REASON2ND20, empschedule.getReason2nd20());
            pstEmpSchedule.setInt(FLD_REASON2ND21, empschedule.getReason2nd21());
            pstEmpSchedule.setInt(FLD_REASON2ND22, empschedule.getReason2nd22());
            pstEmpSchedule.setInt(FLD_REASON2ND23, empschedule.getReason2nd23());
            pstEmpSchedule.setInt(FLD_REASON2ND24, empschedule.getReason2nd24());
            pstEmpSchedule.setInt(FLD_REASON2ND25, empschedule.getReason2nd25());
            pstEmpSchedule.setInt(FLD_REASON2ND26, empschedule.getReason2nd26());
            pstEmpSchedule.setInt(FLD_REASON2ND27, empschedule.getReason2nd27());
            pstEmpSchedule.setInt(FLD_REASON2ND28, empschedule.getReason2nd28());
            pstEmpSchedule.setInt(FLD_REASON2ND29, empschedule.getReason2nd29());
            pstEmpSchedule.setInt(FLD_REASON2ND30, empschedule.getReason2nd30());
            pstEmpSchedule.setInt(FLD_REASON2ND31, empschedule.getReason2nd31());

            // note
            pstEmpSchedule.setString(FLD_NOTE1, empschedule.getNote1());
            pstEmpSchedule.setString(FLD_NOTE2, empschedule.getNote2());
            pstEmpSchedule.setString(FLD_NOTE3, empschedule.getNote3());
            pstEmpSchedule.setString(FLD_NOTE4, empschedule.getNote4());
            pstEmpSchedule.setString(FLD_NOTE5, empschedule.getNote5());
            pstEmpSchedule.setString(FLD_NOTE6, empschedule.getNote6());
            pstEmpSchedule.setString(FLD_NOTE7, empschedule.getNote7());
            pstEmpSchedule.setString(FLD_NOTE8, empschedule.getNote8());
            pstEmpSchedule.setString(FLD_NOTE9, empschedule.getNote9());
            pstEmpSchedule.setString(FLD_NOTE10, empschedule.getNote10());
            pstEmpSchedule.setString(FLD_NOTE11, empschedule.getNote11());
            pstEmpSchedule.setString(FLD_NOTE12, empschedule.getNote12());
            pstEmpSchedule.setString(FLD_NOTE13, empschedule.getNote13());
            pstEmpSchedule.setString(FLD_NOTE14, empschedule.getNote14());
            pstEmpSchedule.setString(FLD_NOTE15, empschedule.getNote15());
            pstEmpSchedule.setString(FLD_NOTE16, empschedule.getNote16());
            pstEmpSchedule.setString(FLD_NOTE17, empschedule.getNote17());
            pstEmpSchedule.setString(FLD_NOTE18, empschedule.getNote18());
            pstEmpSchedule.setString(FLD_NOTE19, empschedule.getNote19());
            pstEmpSchedule.setString(FLD_NOTE20, empschedule.getNote20());
            pstEmpSchedule.setString(FLD_NOTE21, empschedule.getNote21());
            pstEmpSchedule.setString(FLD_NOTE22, empschedule.getNote22());
            pstEmpSchedule.setString(FLD_NOTE23, empschedule.getNote23());
            pstEmpSchedule.setString(FLD_NOTE24, empschedule.getNote24());
            pstEmpSchedule.setString(FLD_NOTE25, empschedule.getNote25());
            pstEmpSchedule.setString(FLD_NOTE26, empschedule.getNote26());
            pstEmpSchedule.setString(FLD_NOTE27, empschedule.getNote27());
            pstEmpSchedule.setString(FLD_NOTE28, empschedule.getNote28());
            pstEmpSchedule.setString(FLD_NOTE29, empschedule.getNote29());
            pstEmpSchedule.setString(FLD_NOTE30, empschedule.getNote30());
            pstEmpSchedule.setString(FLD_NOTE31, empschedule.getNote31());
            pstEmpSchedule.setString(FLD_NOTE2ND1, empschedule.getNote2nd1());
            pstEmpSchedule.setString(FLD_NOTE2ND2, empschedule.getNote2nd2());
            pstEmpSchedule.setString(FLD_NOTE2ND3, empschedule.getNote2nd3());
            pstEmpSchedule.setString(FLD_NOTE2ND4, empschedule.getNote2nd4());
            pstEmpSchedule.setString(FLD_NOTE2ND5, empschedule.getNote2nd5());
            pstEmpSchedule.setString(FLD_NOTE2ND6, empschedule.getNote2nd6());
            pstEmpSchedule.setString(FLD_NOTE2ND7, empschedule.getNote2nd7());
            pstEmpSchedule.setString(FLD_NOTE2ND8, empschedule.getNote2nd8());
            pstEmpSchedule.setString(FLD_NOTE2ND9, empschedule.getNote2nd9());
            pstEmpSchedule.setString(FLD_NOTE2ND10, empschedule.getNote2nd10());
            pstEmpSchedule.setString(FLD_NOTE2ND11, empschedule.getNote2nd11());
            pstEmpSchedule.setString(FLD_NOTE2ND12, empschedule.getNote2nd12());
            pstEmpSchedule.setString(FLD_NOTE2ND13, empschedule.getNote2nd13());
            pstEmpSchedule.setString(FLD_NOTE2ND14, empschedule.getNote2nd14());
            pstEmpSchedule.setString(FLD_NOTE2ND15, empschedule.getNote2nd15());
            pstEmpSchedule.setString(FLD_NOTE2ND16, empschedule.getNote2nd16());
            pstEmpSchedule.setString(FLD_NOTE2ND17, empschedule.getNote2nd17());
            pstEmpSchedule.setString(FLD_NOTE2ND18, empschedule.getNote2nd18());
            pstEmpSchedule.setString(FLD_NOTE2ND19, empschedule.getNote2nd19());
            pstEmpSchedule.setString(FLD_NOTE2ND20, empschedule.getNote2nd20());
            pstEmpSchedule.setString(FLD_NOTE2ND21, empschedule.getNote2nd21());
            pstEmpSchedule.setString(FLD_NOTE2ND22, empschedule.getNote2nd22());
            pstEmpSchedule.setString(FLD_NOTE2ND23, empschedule.getNote2nd23());
            pstEmpSchedule.setString(FLD_NOTE2ND24, empschedule.getNote2nd24());
            pstEmpSchedule.setString(FLD_NOTE2ND25, empschedule.getNote2nd25());
            pstEmpSchedule.setString(FLD_NOTE2ND26, empschedule.getNote2nd26());
            pstEmpSchedule.setString(FLD_NOTE2ND27, empschedule.getNote2nd27());
            pstEmpSchedule.setString(FLD_NOTE2ND28, empschedule.getNote2nd28());
            pstEmpSchedule.setString(FLD_NOTE2ND29, empschedule.getNote2nd29());
            pstEmpSchedule.setString(FLD_NOTE2ND30, empschedule.getNote2nd30());
            pstEmpSchedule.setString(FLD_NOTE2ND31, empschedule.getNote2nd31());

            pstEmpSchedule.setInt(FLD_SCHEDULE_TYPE, empschedule.getScheduleType());

            pstEmpSchedule.insert();
            empschedule.setOID(pstEmpSchedule.getlong(FLD_EMP_SCHEDULE_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstEmpSchedule(0), DBException.UNKNOWN);
        }
        return empschedule.getOID();
    }

    public static long updateExc(EmpSchedule empschedule) throws DBException {
        try {
            if (empschedule.getOID() != 0) {
                PstEmpSchedule pstEmpSchedule = new PstEmpSchedule(empschedule.getOID());

                pstEmpSchedule.setLong(FLD_PERIOD_ID, empschedule.getPeriodId());
                pstEmpSchedule.setLong(FLD_EMPLOYEE_ID, empschedule.getEmployeeId());

                pstEmpSchedule.setLong(FLD_D1, empschedule.getD1());
                pstEmpSchedule.setLong(FLD_D2, empschedule.getD2());
                pstEmpSchedule.setLong(FLD_D3, empschedule.getD3());
                pstEmpSchedule.setLong(FLD_D4, empschedule.getD4());
                pstEmpSchedule.setLong(FLD_D5, empschedule.getD5());
                pstEmpSchedule.setLong(FLD_D6, empschedule.getD6());
                pstEmpSchedule.setLong(FLD_D7, empschedule.getD7());
                pstEmpSchedule.setLong(FLD_D8, empschedule.getD8());
                pstEmpSchedule.setLong(FLD_D9, empschedule.getD9());
                pstEmpSchedule.setLong(FLD_D10, empschedule.getD10());
                pstEmpSchedule.setLong(FLD_D11, empschedule.getD11());
                pstEmpSchedule.setLong(FLD_D12, empschedule.getD12());
                pstEmpSchedule.setLong(FLD_D13, empschedule.getD13());
                pstEmpSchedule.setLong(FLD_D14, empschedule.getD14());
                pstEmpSchedule.setLong(FLD_D15, empschedule.getD15());
                pstEmpSchedule.setLong(FLD_D16, empschedule.getD16());
                pstEmpSchedule.setLong(FLD_D17, empschedule.getD17());
                pstEmpSchedule.setLong(FLD_D18, empschedule.getD18());
                pstEmpSchedule.setLong(FLD_D19, empschedule.getD19());
                pstEmpSchedule.setLong(FLD_D20, empschedule.getD20());
                pstEmpSchedule.setLong(FLD_D21, empschedule.getD21());
                pstEmpSchedule.setLong(FLD_D22, empschedule.getD22());
                pstEmpSchedule.setLong(FLD_D23, empschedule.getD23());
                pstEmpSchedule.setLong(FLD_D24, empschedule.getD24());
                pstEmpSchedule.setLong(FLD_D25, empschedule.getD25());
                pstEmpSchedule.setLong(FLD_D26, empschedule.getD26());
                pstEmpSchedule.setLong(FLD_D27, empschedule.getD27());
                pstEmpSchedule.setLong(FLD_D28, empschedule.getD28());
                pstEmpSchedule.setLong(FLD_D29, empschedule.getD29());
                pstEmpSchedule.setLong(FLD_D30, empschedule.getD30());
                pstEmpSchedule.setLong(FLD_D31, empschedule.getD31());
                pstEmpSchedule.setLong(FLD_D2ND1, empschedule.getD2nd1());
                pstEmpSchedule.setLong(FLD_D2ND2, empschedule.getD2nd2());
                pstEmpSchedule.setLong(FLD_D2ND3, empschedule.getD2nd3());
                pstEmpSchedule.setLong(FLD_D2ND4, empschedule.getD2nd4());
                pstEmpSchedule.setLong(FLD_D2ND5, empschedule.getD2nd5());
                pstEmpSchedule.setLong(FLD_D2ND6, empschedule.getD2nd6());
                pstEmpSchedule.setLong(FLD_D2ND7, empschedule.getD2nd7());
                pstEmpSchedule.setLong(FLD_D2ND8, empschedule.getD2nd8());
                pstEmpSchedule.setLong(FLD_D2ND9, empschedule.getD2nd9());
                pstEmpSchedule.setLong(FLD_D2ND10, empschedule.getD2nd10());
                pstEmpSchedule.setLong(FLD_D2ND11, empschedule.getD2nd11());
                pstEmpSchedule.setLong(FLD_D2ND12, empschedule.getD2nd12());
                pstEmpSchedule.setLong(FLD_D2ND13, empschedule.getD2nd13());
                pstEmpSchedule.setLong(FLD_D2ND14, empschedule.getD2nd14());
                pstEmpSchedule.setLong(FLD_D2ND15, empschedule.getD2nd15());
                pstEmpSchedule.setLong(FLD_D2ND16, empschedule.getD2nd16());
                pstEmpSchedule.setLong(FLD_D2ND17, empschedule.getD2nd17());
                pstEmpSchedule.setLong(FLD_D2ND18, empschedule.getD2nd18());
                pstEmpSchedule.setLong(FLD_D2ND19, empschedule.getD2nd19());
                pstEmpSchedule.setLong(FLD_D2ND20, empschedule.getD2nd20());
                pstEmpSchedule.setLong(FLD_D2ND21, empschedule.getD2nd21());
                pstEmpSchedule.setLong(FLD_D2ND22, empschedule.getD2nd22());
                pstEmpSchedule.setLong(FLD_D2ND23, empschedule.getD2nd23());
                pstEmpSchedule.setLong(FLD_D2ND24, empschedule.getD2nd24());
                pstEmpSchedule.setLong(FLD_D2ND25, empschedule.getD2nd25());
                pstEmpSchedule.setLong(FLD_D2ND26, empschedule.getD2nd26());
                pstEmpSchedule.setLong(FLD_D2ND27, empschedule.getD2nd27());
                pstEmpSchedule.setLong(FLD_D2ND28, empschedule.getD2nd28());
                pstEmpSchedule.setLong(FLD_D2ND29, empschedule.getD2nd29());
                pstEmpSchedule.setLong(FLD_D2ND30, empschedule.getD2nd30());
                pstEmpSchedule.setLong(FLD_D2ND31, empschedule.getD2nd31());

                // status
                pstEmpSchedule.setInt(FLD_STATUS1, empschedule.getStatus1());
                pstEmpSchedule.setInt(FLD_STATUS2, empschedule.getStatus2());
                pstEmpSchedule.setInt(FLD_STATUS3, empschedule.getStatus3());
                pstEmpSchedule.setInt(FLD_STATUS4, empschedule.getStatus4());
                pstEmpSchedule.setInt(FLD_STATUS5, empschedule.getStatus5());
                pstEmpSchedule.setInt(FLD_STATUS6, empschedule.getStatus6());
                pstEmpSchedule.setInt(FLD_STATUS7, empschedule.getStatus7());
                pstEmpSchedule.setInt(FLD_STATUS8, empschedule.getStatus8());
                pstEmpSchedule.setInt(FLD_STATUS9, empschedule.getStatus9());
                pstEmpSchedule.setInt(FLD_STATUS10, empschedule.getStatus10());
                pstEmpSchedule.setInt(FLD_STATUS11, empschedule.getStatus11());
                pstEmpSchedule.setInt(FLD_STATUS12, empschedule.getStatus12());
                pstEmpSchedule.setInt(FLD_STATUS13, empschedule.getStatus13());
                pstEmpSchedule.setInt(FLD_STATUS14, empschedule.getStatus14());
                pstEmpSchedule.setInt(FLD_STATUS15, empschedule.getStatus15());
                pstEmpSchedule.setInt(FLD_STATUS16, empschedule.getStatus16());
                pstEmpSchedule.setInt(FLD_STATUS17, empschedule.getStatus17());
                pstEmpSchedule.setInt(FLD_STATUS18, empschedule.getStatus18());
                pstEmpSchedule.setInt(FLD_STATUS19, empschedule.getStatus19());
                pstEmpSchedule.setInt(FLD_STATUS20, empschedule.getStatus20());
                pstEmpSchedule.setInt(FLD_STATUS21, empschedule.getStatus21());
                pstEmpSchedule.setInt(FLD_STATUS22, empschedule.getStatus22());
                pstEmpSchedule.setInt(FLD_STATUS23, empschedule.getStatus23());
                pstEmpSchedule.setInt(FLD_STATUS24, empschedule.getStatus24());
                pstEmpSchedule.setInt(FLD_STATUS25, empschedule.getStatus25());
                pstEmpSchedule.setInt(FLD_STATUS26, empschedule.getStatus26());
                pstEmpSchedule.setInt(FLD_STATUS27, empschedule.getStatus27());
                pstEmpSchedule.setInt(FLD_STATUS28, empschedule.getStatus28());
                pstEmpSchedule.setInt(FLD_STATUS29, empschedule.getStatus29());
                pstEmpSchedule.setInt(FLD_STATUS30, empschedule.getStatus30());
                pstEmpSchedule.setInt(FLD_STATUS31, empschedule.getStatus31());
                pstEmpSchedule.setInt(FLD_STATUS2ND1, empschedule.getStatus2nd1());
                pstEmpSchedule.setInt(FLD_STATUS2ND2, empschedule.getStatus2nd2());
                pstEmpSchedule.setInt(FLD_STATUS2ND3, empschedule.getStatus2nd3());
                pstEmpSchedule.setInt(FLD_STATUS2ND4, empschedule.getStatus2nd4());
                pstEmpSchedule.setInt(FLD_STATUS2ND5, empschedule.getStatus2nd5());
                pstEmpSchedule.setInt(FLD_STATUS2ND6, empschedule.getStatus2nd6());
                pstEmpSchedule.setInt(FLD_STATUS2ND7, empschedule.getStatus2nd7());
                pstEmpSchedule.setInt(FLD_STATUS2ND8, empschedule.getStatus2nd8());
                pstEmpSchedule.setInt(FLD_STATUS2ND9, empschedule.getStatus2nd9());
                pstEmpSchedule.setInt(FLD_STATUS2ND10, empschedule.getStatus2nd10());
                pstEmpSchedule.setInt(FLD_STATUS2ND11, empschedule.getStatus2nd11());
                pstEmpSchedule.setInt(FLD_STATUS2ND12, empschedule.getStatus2nd12());
                pstEmpSchedule.setInt(FLD_STATUS2ND13, empschedule.getStatus2nd13());
                pstEmpSchedule.setInt(FLD_STATUS2ND14, empschedule.getStatus2nd14());
                pstEmpSchedule.setInt(FLD_STATUS2ND15, empschedule.getStatus2nd15());
                pstEmpSchedule.setInt(FLD_STATUS2ND16, empschedule.getStatus2nd16());
                pstEmpSchedule.setInt(FLD_STATUS2ND17, empschedule.getStatus2nd17());
                pstEmpSchedule.setInt(FLD_STATUS2ND18, empschedule.getStatus2nd18());
                pstEmpSchedule.setInt(FLD_STATUS2ND19, empschedule.getStatus2nd19());
                pstEmpSchedule.setInt(FLD_STATUS2ND20, empschedule.getStatus2nd20());
                pstEmpSchedule.setInt(FLD_STATUS2ND21, empschedule.getStatus2nd21());
                pstEmpSchedule.setInt(FLD_STATUS2ND22, empschedule.getStatus2nd22());
                pstEmpSchedule.setInt(FLD_STATUS2ND23, empschedule.getStatus2nd23());
                pstEmpSchedule.setInt(FLD_STATUS2ND24, empschedule.getStatus2nd24());
                pstEmpSchedule.setInt(FLD_STATUS2ND25, empschedule.getStatus2nd25());
                pstEmpSchedule.setInt(FLD_STATUS2ND26, empschedule.getStatus2nd26());
                pstEmpSchedule.setInt(FLD_STATUS2ND27, empschedule.getStatus2nd27());
                pstEmpSchedule.setInt(FLD_STATUS2ND28, empschedule.getStatus2nd28());
                pstEmpSchedule.setInt(FLD_STATUS2ND29, empschedule.getStatus2nd29());
                pstEmpSchedule.setInt(FLD_STATUS2ND30, empschedule.getStatus2nd30());
                pstEmpSchedule.setInt(FLD_STATUS2ND31, empschedule.getStatus2nd31());

                // reason
                pstEmpSchedule.setInt(FLD_REASON1, empschedule.getReason1());
                pstEmpSchedule.setInt(FLD_REASON2, empschedule.getReason2());
                pstEmpSchedule.setInt(FLD_REASON3, empschedule.getReason3());
                pstEmpSchedule.setInt(FLD_REASON4, empschedule.getReason4());
                pstEmpSchedule.setInt(FLD_REASON5, empschedule.getReason5());
                pstEmpSchedule.setInt(FLD_REASON6, empschedule.getReason6());
                pstEmpSchedule.setInt(FLD_REASON7, empschedule.getReason7());
                pstEmpSchedule.setInt(FLD_REASON8, empschedule.getReason8());
                pstEmpSchedule.setInt(FLD_REASON9, empschedule.getReason9());
                pstEmpSchedule.setInt(FLD_REASON10, empschedule.getReason10());
                pstEmpSchedule.setInt(FLD_REASON11, empschedule.getReason11());
                pstEmpSchedule.setInt(FLD_REASON12, empschedule.getReason12());
                pstEmpSchedule.setInt(FLD_REASON13, empschedule.getReason13());
                pstEmpSchedule.setInt(FLD_REASON14, empschedule.getReason14());
                pstEmpSchedule.setInt(FLD_REASON15, empschedule.getReason15());
                pstEmpSchedule.setInt(FLD_REASON16, empschedule.getReason16());
                pstEmpSchedule.setInt(FLD_REASON17, empschedule.getReason17());
                pstEmpSchedule.setInt(FLD_REASON18, empschedule.getReason18());
                pstEmpSchedule.setInt(FLD_REASON19, empschedule.getReason19());
                pstEmpSchedule.setInt(FLD_REASON20, empschedule.getReason20());
                pstEmpSchedule.setInt(FLD_REASON21, empschedule.getReason21());
                pstEmpSchedule.setInt(FLD_REASON22, empschedule.getReason22());
                pstEmpSchedule.setInt(FLD_REASON23, empschedule.getReason23());
                pstEmpSchedule.setInt(FLD_REASON24, empschedule.getReason24());
                pstEmpSchedule.setInt(FLD_REASON25, empschedule.getReason25());
                pstEmpSchedule.setInt(FLD_REASON26, empschedule.getReason26());
                pstEmpSchedule.setInt(FLD_REASON27, empschedule.getReason27());
                pstEmpSchedule.setInt(FLD_REASON28, empschedule.getReason28());
                pstEmpSchedule.setInt(FLD_REASON29, empschedule.getReason29());
                pstEmpSchedule.setInt(FLD_REASON30, empschedule.getReason30());
                pstEmpSchedule.setInt(FLD_REASON31, empschedule.getReason31());
                pstEmpSchedule.setInt(FLD_REASON2ND1, empschedule.getReason2nd1());
                pstEmpSchedule.setInt(FLD_REASON2ND2, empschedule.getReason2nd2());
                pstEmpSchedule.setInt(FLD_REASON2ND3, empschedule.getReason2nd3());
                pstEmpSchedule.setInt(FLD_REASON2ND4, empschedule.getReason2nd4());
                pstEmpSchedule.setInt(FLD_REASON2ND5, empschedule.getReason2nd5());
                pstEmpSchedule.setInt(FLD_REASON2ND6, empschedule.getReason2nd6());
                pstEmpSchedule.setInt(FLD_REASON2ND7, empschedule.getReason2nd7());
                pstEmpSchedule.setInt(FLD_REASON2ND8, empschedule.getReason2nd8());
                pstEmpSchedule.setInt(FLD_REASON2ND9, empschedule.getReason2nd9());
                pstEmpSchedule.setInt(FLD_REASON2ND10, empschedule.getReason2nd10());
                pstEmpSchedule.setInt(FLD_REASON2ND11, empschedule.getReason2nd11());
                pstEmpSchedule.setInt(FLD_REASON2ND12, empschedule.getReason2nd12());
                pstEmpSchedule.setInt(FLD_REASON2ND13, empschedule.getReason2nd13());
                pstEmpSchedule.setInt(FLD_REASON2ND14, empschedule.getReason2nd14());
                pstEmpSchedule.setInt(FLD_REASON2ND15, empschedule.getReason2nd15());
                pstEmpSchedule.setInt(FLD_REASON2ND16, empschedule.getReason2nd16());
                pstEmpSchedule.setInt(FLD_REASON2ND17, empschedule.getReason2nd17());
                pstEmpSchedule.setInt(FLD_REASON2ND18, empschedule.getReason2nd18());
                pstEmpSchedule.setInt(FLD_REASON2ND19, empschedule.getReason2nd19());
                pstEmpSchedule.setInt(FLD_REASON2ND20, empschedule.getReason2nd20());
                pstEmpSchedule.setInt(FLD_REASON2ND21, empschedule.getReason2nd21());
                pstEmpSchedule.setInt(FLD_REASON2ND22, empschedule.getReason2nd22());
                pstEmpSchedule.setInt(FLD_REASON2ND23, empschedule.getReason2nd23());
                pstEmpSchedule.setInt(FLD_REASON2ND24, empschedule.getReason2nd24());
                pstEmpSchedule.setInt(FLD_REASON2ND25, empschedule.getReason2nd25());
                pstEmpSchedule.setInt(FLD_REASON2ND26, empschedule.getReason2nd26());
                pstEmpSchedule.setInt(FLD_REASON2ND27, empschedule.getReason2nd27());
                pstEmpSchedule.setInt(FLD_REASON2ND28, empschedule.getReason2nd28());
                pstEmpSchedule.setInt(FLD_REASON2ND29, empschedule.getReason2nd29());
                pstEmpSchedule.setInt(FLD_REASON2ND30, empschedule.getReason2nd30());
                pstEmpSchedule.setInt(FLD_REASON2ND31, empschedule.getReason2nd31());

                // note
                pstEmpSchedule.setString(FLD_NOTE1, empschedule.getNote1());
                pstEmpSchedule.setString(FLD_NOTE2, empschedule.getNote2());
                pstEmpSchedule.setString(FLD_NOTE3, empschedule.getNote3());
                pstEmpSchedule.setString(FLD_NOTE4, empschedule.getNote4());
                pstEmpSchedule.setString(FLD_NOTE5, empschedule.getNote5());
                pstEmpSchedule.setString(FLD_NOTE6, empschedule.getNote6());
                pstEmpSchedule.setString(FLD_NOTE7, empschedule.getNote7());
                pstEmpSchedule.setString(FLD_NOTE8, empschedule.getNote8());
                pstEmpSchedule.setString(FLD_NOTE9, empschedule.getNote9());
                pstEmpSchedule.setString(FLD_NOTE10, empschedule.getNote10());
                pstEmpSchedule.setString(FLD_NOTE11, empschedule.getNote11());
                pstEmpSchedule.setString(FLD_NOTE12, empschedule.getNote12());
                pstEmpSchedule.setString(FLD_NOTE13, empschedule.getNote13());
                pstEmpSchedule.setString(FLD_NOTE14, empschedule.getNote14());
                pstEmpSchedule.setString(FLD_NOTE15, empschedule.getNote15());
                pstEmpSchedule.setString(FLD_NOTE16, empschedule.getNote16());
                pstEmpSchedule.setString(FLD_NOTE17, empschedule.getNote17());
                pstEmpSchedule.setString(FLD_NOTE18, empschedule.getNote18());
                pstEmpSchedule.setString(FLD_NOTE19, empschedule.getNote19());
                pstEmpSchedule.setString(FLD_NOTE20, empschedule.getNote20());
                pstEmpSchedule.setString(FLD_NOTE21, empschedule.getNote21());
                pstEmpSchedule.setString(FLD_NOTE22, empschedule.getNote22());
                pstEmpSchedule.setString(FLD_NOTE23, empschedule.getNote23());
                pstEmpSchedule.setString(FLD_NOTE24, empschedule.getNote24());
                pstEmpSchedule.setString(FLD_NOTE25, empschedule.getNote25());
                pstEmpSchedule.setString(FLD_NOTE26, empschedule.getNote26());
                pstEmpSchedule.setString(FLD_NOTE27, empschedule.getNote27());
                pstEmpSchedule.setString(FLD_NOTE28, empschedule.getNote28());
                pstEmpSchedule.setString(FLD_NOTE29, empschedule.getNote29());
                pstEmpSchedule.setString(FLD_NOTE30, empschedule.getNote30());
                pstEmpSchedule.setString(FLD_NOTE31, empschedule.getNote31());
                pstEmpSchedule.setString(FLD_NOTE2ND1, empschedule.getNote2nd1());
                pstEmpSchedule.setString(FLD_NOTE2ND2, empschedule.getNote2nd2());
                pstEmpSchedule.setString(FLD_NOTE2ND3, empschedule.getNote2nd3());
                pstEmpSchedule.setString(FLD_NOTE2ND4, empschedule.getNote2nd4());
                pstEmpSchedule.setString(FLD_NOTE2ND5, empschedule.getNote2nd5());
                pstEmpSchedule.setString(FLD_NOTE2ND6, empschedule.getNote2nd6());
                pstEmpSchedule.setString(FLD_NOTE2ND7, empschedule.getNote2nd7());
                pstEmpSchedule.setString(FLD_NOTE2ND8, empschedule.getNote2nd8());
                pstEmpSchedule.setString(FLD_NOTE2ND9, empschedule.getNote2nd9());
                pstEmpSchedule.setString(FLD_NOTE2ND10, empschedule.getNote2nd10());
                pstEmpSchedule.setString(FLD_NOTE2ND11, empschedule.getNote2nd11());
                pstEmpSchedule.setString(FLD_NOTE2ND12, empschedule.getNote2nd12());
                pstEmpSchedule.setString(FLD_NOTE2ND13, empschedule.getNote2nd13());
                pstEmpSchedule.setString(FLD_NOTE2ND14, empschedule.getNote2nd14());
                pstEmpSchedule.setString(FLD_NOTE2ND15, empschedule.getNote2nd15());
                pstEmpSchedule.setString(FLD_NOTE2ND16, empschedule.getNote2nd16());
                pstEmpSchedule.setString(FLD_NOTE2ND17, empschedule.getNote2nd17());
                pstEmpSchedule.setString(FLD_NOTE2ND18, empschedule.getNote2nd18());
                pstEmpSchedule.setString(FLD_NOTE2ND19, empschedule.getNote2nd19());
                pstEmpSchedule.setString(FLD_NOTE2ND20, empschedule.getNote2nd20());
                pstEmpSchedule.setString(FLD_NOTE2ND21, empschedule.getNote2nd21());
                pstEmpSchedule.setString(FLD_NOTE2ND22, empschedule.getNote2nd22());
                pstEmpSchedule.setString(FLD_NOTE2ND23, empschedule.getNote2nd23());
                pstEmpSchedule.setString(FLD_NOTE2ND24, empschedule.getNote2nd24());
                pstEmpSchedule.setString(FLD_NOTE2ND25, empschedule.getNote2nd25());
                pstEmpSchedule.setString(FLD_NOTE2ND26, empschedule.getNote2nd26());
                pstEmpSchedule.setString(FLD_NOTE2ND27, empschedule.getNote2nd27());
                pstEmpSchedule.setString(FLD_NOTE2ND28, empschedule.getNote2nd28());
                pstEmpSchedule.setString(FLD_NOTE2ND29, empschedule.getNote2nd29());
                pstEmpSchedule.setString(FLD_NOTE2ND30, empschedule.getNote2nd30());
                pstEmpSchedule.setString(FLD_NOTE2ND31, empschedule.getNote2nd31());

                // actual in
                pstEmpSchedule.setDate(FLD_IN1, empschedule.getIn1());
                pstEmpSchedule.setDate(FLD_IN2, empschedule.getIn2());
                pstEmpSchedule.setDate(FLD_IN3, empschedule.getIn3());
                pstEmpSchedule.setDate(FLD_IN4, empschedule.getIn4());
                pstEmpSchedule.setDate(FLD_IN5, empschedule.getIn5());
                pstEmpSchedule.setDate(FLD_IN6, empschedule.getIn6());
                pstEmpSchedule.setDate(FLD_IN7, empschedule.getIn7());
                pstEmpSchedule.setDate(FLD_IN8, empschedule.getIn8());
                pstEmpSchedule.setDate(FLD_IN9, empschedule.getIn9());
                pstEmpSchedule.setDate(FLD_IN10, empschedule.getIn10());
                pstEmpSchedule.setDate(FLD_IN11, empschedule.getIn11());
                pstEmpSchedule.setDate(FLD_IN12, empschedule.getIn12());
                pstEmpSchedule.setDate(FLD_IN13, empschedule.getIn13());
                pstEmpSchedule.setDate(FLD_IN14, empschedule.getIn14());
                pstEmpSchedule.setDate(FLD_IN15, empschedule.getIn15());
                pstEmpSchedule.setDate(FLD_IN16, empschedule.getIn16());
                pstEmpSchedule.setDate(FLD_IN17, empschedule.getIn17());
                pstEmpSchedule.setDate(FLD_IN18, empschedule.getIn18());
                pstEmpSchedule.setDate(FLD_IN19, empschedule.getIn19());
                pstEmpSchedule.setDate(FLD_IN20, empschedule.getIn20());
                pstEmpSchedule.setDate(FLD_IN21, empschedule.getIn21());
                pstEmpSchedule.setDate(FLD_IN22, empschedule.getIn22());
                pstEmpSchedule.setDate(FLD_IN23, empschedule.getIn23());
                pstEmpSchedule.setDate(FLD_IN24, empschedule.getIn24());
                pstEmpSchedule.setDate(FLD_IN25, empschedule.getIn25());
                pstEmpSchedule.setDate(FLD_IN26, empschedule.getIn26());
                pstEmpSchedule.setDate(FLD_IN27, empschedule.getIn27());
                pstEmpSchedule.setDate(FLD_IN28, empschedule.getIn28());
                pstEmpSchedule.setDate(FLD_IN29, empschedule.getIn29());
                pstEmpSchedule.setDate(FLD_IN30, empschedule.getIn30());
                pstEmpSchedule.setDate(FLD_IN31, empschedule.getIn31());
                pstEmpSchedule.setDate(FLD_IN2ND1, empschedule.getIn2nd1());
                pstEmpSchedule.setDate(FLD_IN2ND2, empschedule.getIn2nd2());
                pstEmpSchedule.setDate(FLD_IN2ND3, empschedule.getIn2nd3());
                pstEmpSchedule.setDate(FLD_IN2ND4, empschedule.getIn2nd4());
                pstEmpSchedule.setDate(FLD_IN2ND5, empschedule.getIn2nd5());
                pstEmpSchedule.setDate(FLD_IN2ND6, empschedule.getIn2nd6());
                pstEmpSchedule.setDate(FLD_IN2ND7, empschedule.getIn2nd7());
                pstEmpSchedule.setDate(FLD_IN2ND8, empschedule.getIn2nd8());
                pstEmpSchedule.setDate(FLD_IN2ND9, empschedule.getIn2nd9());
                pstEmpSchedule.setDate(FLD_IN2ND10, empschedule.getIn2nd10());
                pstEmpSchedule.setDate(FLD_IN2ND11, empschedule.getIn2nd11());
                pstEmpSchedule.setDate(FLD_IN2ND12, empschedule.getIn2nd12());
                pstEmpSchedule.setDate(FLD_IN2ND13, empschedule.getIn2nd13());
                pstEmpSchedule.setDate(FLD_IN2ND14, empschedule.getIn2nd14());
                pstEmpSchedule.setDate(FLD_IN2ND15, empschedule.getIn2nd15());
                pstEmpSchedule.setDate(FLD_IN2ND16, empschedule.getIn2nd16());
                pstEmpSchedule.setDate(FLD_IN2ND17, empschedule.getIn2nd17());
                pstEmpSchedule.setDate(FLD_IN2ND18, empschedule.getIn2nd18());
                pstEmpSchedule.setDate(FLD_IN2ND19, empschedule.getIn2nd19());
                pstEmpSchedule.setDate(FLD_IN2ND20, empschedule.getIn2nd20());
                pstEmpSchedule.setDate(FLD_IN2ND21, empschedule.getIn2nd21());
                pstEmpSchedule.setDate(FLD_IN2ND22, empschedule.getIn2nd22());
                pstEmpSchedule.setDate(FLD_IN2ND23, empschedule.getIn2nd23());
                pstEmpSchedule.setDate(FLD_IN2ND24, empschedule.getIn2nd24());
                pstEmpSchedule.setDate(FLD_IN2ND25, empschedule.getIn2nd25());
                pstEmpSchedule.setDate(FLD_IN2ND26, empschedule.getIn2nd26());
                pstEmpSchedule.setDate(FLD_IN2ND27, empschedule.getIn2nd27());
                pstEmpSchedule.setDate(FLD_IN2ND28, empschedule.getIn2nd28());
                pstEmpSchedule.setDate(FLD_IN2ND29, empschedule.getIn2nd29());
                pstEmpSchedule.setDate(FLD_IN2ND30, empschedule.getIn2nd30());
                pstEmpSchedule.setDate(FLD_IN2ND31, empschedule.getIn2nd31());

                // actual out
                pstEmpSchedule.setDate(FLD_OUT1, empschedule.getOut1());
                pstEmpSchedule.setDate(FLD_OUT2, empschedule.getOut2());
                pstEmpSchedule.setDate(FLD_OUT3, empschedule.getOut3());
                pstEmpSchedule.setDate(FLD_OUT4, empschedule.getOut4());
                pstEmpSchedule.setDate(FLD_OUT5, empschedule.getOut5());
                pstEmpSchedule.setDate(FLD_OUT6, empschedule.getOut6());
                pstEmpSchedule.setDate(FLD_OUT7, empschedule.getOut7());
                pstEmpSchedule.setDate(FLD_OUT8, empschedule.getOut8());
                pstEmpSchedule.setDate(FLD_OUT9, empschedule.getOut9());
                pstEmpSchedule.setDate(FLD_OUT10, empschedule.getOut10());
                pstEmpSchedule.setDate(FLD_OUT11, empschedule.getOut11());
                pstEmpSchedule.setDate(FLD_OUT12, empschedule.getOut12());
                pstEmpSchedule.setDate(FLD_OUT13, empschedule.getOut13());
                pstEmpSchedule.setDate(FLD_OUT14, empschedule.getOut14());
                pstEmpSchedule.setDate(FLD_OUT15, empschedule.getOut15());
                pstEmpSchedule.setDate(FLD_OUT16, empschedule.getOut16());
                pstEmpSchedule.setDate(FLD_OUT17, empschedule.getOut17());
                pstEmpSchedule.setDate(FLD_OUT18, empschedule.getOut18());
                pstEmpSchedule.setDate(FLD_OUT19, empschedule.getOut19());
                pstEmpSchedule.setDate(FLD_OUT20, empschedule.getOut20());
                pstEmpSchedule.setDate(FLD_OUT21, empschedule.getOut21());
                pstEmpSchedule.setDate(FLD_OUT22, empschedule.getOut22());
                pstEmpSchedule.setDate(FLD_OUT23, empschedule.getOut23());
                pstEmpSchedule.setDate(FLD_OUT24, empschedule.getOut24());
                pstEmpSchedule.setDate(FLD_OUT25, empschedule.getOut25());
                pstEmpSchedule.setDate(FLD_OUT26, empschedule.getOut26());
                pstEmpSchedule.setDate(FLD_OUT27, empschedule.getOut27());
                pstEmpSchedule.setDate(FLD_OUT28, empschedule.getOut28());
                pstEmpSchedule.setDate(FLD_OUT29, empschedule.getOut29());
                pstEmpSchedule.setDate(FLD_OUT30, empschedule.getOut30());
                pstEmpSchedule.setDate(FLD_OUT31, empschedule.getOut31());
                pstEmpSchedule.setDate(FLD_OUT2ND1, empschedule.getOut2nd1());
                pstEmpSchedule.setDate(FLD_OUT2ND2, empschedule.getOut2nd2());
                pstEmpSchedule.setDate(FLD_OUT2ND3, empschedule.getOut2nd3());
                pstEmpSchedule.setDate(FLD_OUT2ND4, empschedule.getOut2nd4());
                pstEmpSchedule.setDate(FLD_OUT2ND5, empschedule.getOut2nd5());
                pstEmpSchedule.setDate(FLD_OUT2ND6, empschedule.getOut2nd6());
                pstEmpSchedule.setDate(FLD_OUT2ND7, empschedule.getOut2nd7());
                pstEmpSchedule.setDate(FLD_OUT2ND8, empschedule.getOut2nd8());
                pstEmpSchedule.setDate(FLD_OUT2ND9, empschedule.getOut2nd9());
                pstEmpSchedule.setDate(FLD_OUT2ND10, empschedule.getOut2nd10());
                pstEmpSchedule.setDate(FLD_OUT2ND11, empschedule.getOut2nd11());
                pstEmpSchedule.setDate(FLD_OUT2ND12, empschedule.getOut2nd12());
                pstEmpSchedule.setDate(FLD_OUT2ND13, empschedule.getOut2nd13());
                pstEmpSchedule.setDate(FLD_OUT2ND14, empschedule.getOut2nd14());
                pstEmpSchedule.setDate(FLD_OUT2ND15, empschedule.getOut2nd15());
                pstEmpSchedule.setDate(FLD_OUT2ND16, empschedule.getOut2nd16());
                pstEmpSchedule.setDate(FLD_OUT2ND17, empschedule.getOut2nd17());
                pstEmpSchedule.setDate(FLD_OUT2ND18, empschedule.getOut2nd18());
                pstEmpSchedule.setDate(FLD_OUT2ND19, empschedule.getOut2nd19());
                pstEmpSchedule.setDate(FLD_OUT2ND20, empschedule.getOut2nd20());
                pstEmpSchedule.setDate(FLD_OUT2ND21, empschedule.getOut2nd21());
                pstEmpSchedule.setDate(FLD_OUT2ND22, empschedule.getOut2nd22());
                pstEmpSchedule.setDate(FLD_OUT2ND23, empschedule.getOut2nd23());
                pstEmpSchedule.setDate(FLD_OUT2ND24, empschedule.getOut2nd24());
                pstEmpSchedule.setDate(FLD_OUT2ND25, empschedule.getOut2nd25());
                pstEmpSchedule.setDate(FLD_OUT2ND26, empschedule.getOut2nd26());
                pstEmpSchedule.setDate(FLD_OUT2ND27, empschedule.getOut2nd27());
                pstEmpSchedule.setDate(FLD_OUT2ND28, empschedule.getOut2nd28());
                pstEmpSchedule.setDate(FLD_OUT2ND29, empschedule.getOut2nd29());
                pstEmpSchedule.setDate(FLD_OUT2ND30, empschedule.getOut2nd30());
                pstEmpSchedule.setDate(FLD_OUT2ND31, empschedule.getOut2nd31());

                pstEmpSchedule.setInt(FLD_SCHEDULE_TYPE, empschedule.getScheduleType());

                pstEmpSchedule.update();
                return empschedule.getOID();

            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstEmpSchedule(0), DBException.UNKNOWN);
        }
        return 0;
    }

    //update by satrya 2012-12-08
    public static long updateScheduleExcVer2(EmpSchedule empschedule) throws DBException {
        try {
            if (empschedule.getOID() != 0) {
                PstEmpSchedule pstEmpSchedule = new PstEmpSchedule(empschedule.getOID());

                pstEmpSchedule.setLong(FLD_PERIOD_ID, empschedule.getPeriodId());
                pstEmpSchedule.setLong(FLD_EMPLOYEE_ID, empschedule.getEmployeeId());

                pstEmpSchedule.setLong(FLD_D1, empschedule.getD1());
                pstEmpSchedule.setLong(FLD_D2, empschedule.getD2());
                pstEmpSchedule.setLong(FLD_D3, empschedule.getD3());
                pstEmpSchedule.setLong(FLD_D4, empschedule.getD4());
                pstEmpSchedule.setLong(FLD_D5, empschedule.getD5());
                pstEmpSchedule.setLong(FLD_D6, empschedule.getD6());
                pstEmpSchedule.setLong(FLD_D7, empschedule.getD7());
                pstEmpSchedule.setLong(FLD_D8, empschedule.getD8());
                pstEmpSchedule.setLong(FLD_D9, empschedule.getD9());
                pstEmpSchedule.setLong(FLD_D10, empschedule.getD10());
                pstEmpSchedule.setLong(FLD_D11, empschedule.getD11());
                pstEmpSchedule.setLong(FLD_D12, empschedule.getD12());
                pstEmpSchedule.setLong(FLD_D13, empschedule.getD13());
                pstEmpSchedule.setLong(FLD_D14, empschedule.getD14());
                pstEmpSchedule.setLong(FLD_D15, empschedule.getD15());
                pstEmpSchedule.setLong(FLD_D16, empschedule.getD16());
                pstEmpSchedule.setLong(FLD_D17, empschedule.getD17());
                pstEmpSchedule.setLong(FLD_D18, empschedule.getD18());
                pstEmpSchedule.setLong(FLD_D19, empschedule.getD19());
                pstEmpSchedule.setLong(FLD_D20, empschedule.getD20());
                pstEmpSchedule.setLong(FLD_D21, empschedule.getD21());
                pstEmpSchedule.setLong(FLD_D22, empschedule.getD22());
                pstEmpSchedule.setLong(FLD_D23, empschedule.getD23());
                pstEmpSchedule.setLong(FLD_D24, empschedule.getD24());
                pstEmpSchedule.setLong(FLD_D25, empschedule.getD25());
                pstEmpSchedule.setLong(FLD_D26, empschedule.getD26());
                pstEmpSchedule.setLong(FLD_D27, empschedule.getD27());
                pstEmpSchedule.setLong(FLD_D28, empschedule.getD28());
                pstEmpSchedule.setLong(FLD_D29, empschedule.getD29());
                pstEmpSchedule.setLong(FLD_D30, empschedule.getD30());
                pstEmpSchedule.setLong(FLD_D31, empschedule.getD31());
                pstEmpSchedule.setLong(FLD_D2ND1, empschedule.getD2nd1());
                pstEmpSchedule.setLong(FLD_D2ND2, empschedule.getD2nd2());
                pstEmpSchedule.setLong(FLD_D2ND3, empschedule.getD2nd3());
                pstEmpSchedule.setLong(FLD_D2ND4, empschedule.getD2nd4());
                pstEmpSchedule.setLong(FLD_D2ND5, empschedule.getD2nd5());
                pstEmpSchedule.setLong(FLD_D2ND6, empschedule.getD2nd6());
                pstEmpSchedule.setLong(FLD_D2ND7, empschedule.getD2nd7());
                pstEmpSchedule.setLong(FLD_D2ND8, empschedule.getD2nd8());
                pstEmpSchedule.setLong(FLD_D2ND9, empschedule.getD2nd9());
                pstEmpSchedule.setLong(FLD_D2ND10, empschedule.getD2nd10());
                pstEmpSchedule.setLong(FLD_D2ND11, empschedule.getD2nd11());
                pstEmpSchedule.setLong(FLD_D2ND12, empschedule.getD2nd12());
                pstEmpSchedule.setLong(FLD_D2ND13, empschedule.getD2nd13());
                pstEmpSchedule.setLong(FLD_D2ND14, empschedule.getD2nd14());
                pstEmpSchedule.setLong(FLD_D2ND15, empschedule.getD2nd15());
                pstEmpSchedule.setLong(FLD_D2ND16, empschedule.getD2nd16());
                pstEmpSchedule.setLong(FLD_D2ND17, empschedule.getD2nd17());
                pstEmpSchedule.setLong(FLD_D2ND18, empschedule.getD2nd18());
                pstEmpSchedule.setLong(FLD_D2ND19, empschedule.getD2nd19());
                pstEmpSchedule.setLong(FLD_D2ND20, empschedule.getD2nd20());
                pstEmpSchedule.setLong(FLD_D2ND21, empschedule.getD2nd21());
                pstEmpSchedule.setLong(FLD_D2ND22, empschedule.getD2nd22());
                pstEmpSchedule.setLong(FLD_D2ND23, empschedule.getD2nd23());
                pstEmpSchedule.setLong(FLD_D2ND24, empschedule.getD2nd24());
                pstEmpSchedule.setLong(FLD_D2ND25, empschedule.getD2nd25());
                pstEmpSchedule.setLong(FLD_D2ND26, empschedule.getD2nd26());
                pstEmpSchedule.setLong(FLD_D2ND27, empschedule.getD2nd27());
                pstEmpSchedule.setLong(FLD_D2ND28, empschedule.getD2nd28());
                pstEmpSchedule.setLong(FLD_D2ND29, empschedule.getD2nd29());
                pstEmpSchedule.setLong(FLD_D2ND30, empschedule.getD2nd30());
                pstEmpSchedule.setLong(FLD_D2ND31, empschedule.getD2nd31());


                pstEmpSchedule.update();
                return empschedule.getOID();

            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstEmpSchedule(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long oid) throws DBException {
        try {
            PstEmpSchedule pstEmpSchedule = new PstEmpSchedule(oid);
            pstEmpSchedule.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstEmpSchedule(0), DBException.UNKNOWN);
        }
        return oid;
    }

    public static Vector listAll() {
        return list(0, 0, "", "");
    }

    public static EmpSchedule fecth(long periodId, long empId) {
        return (fetch(periodId, empId));
    }

    public static EmpSchedule fetch(long periodId, long empId) {
        String whereStr = "" + fieldNames[FLD_PERIOD_ID] + "=" + (new Long(periodId)).toString() + " AND " + fieldNames[FLD_EMPLOYEE_ID] + "=" + empId;

        Vector lst = list(0, 1, whereStr, "");
        if (lst != null && lst.size() > 0) {
            EmpSchedule empSch = (EmpSchedule) lst.get(0);
            return empSch;
        } else {
            return null;
        }

    }

    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_HR_EMP_SCHEDULE;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }
            if (limitStart == 0 && recordToGet == 0) {
                sql = sql + "";
            } else {
                sql = sql + " LIMIT " + limitStart + "," + recordToGet;
            }
            dbrs = DBHandler.execQueryResult(sql);
            //System.out.println("Listku....."+sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                EmpSchedule empschedule = new EmpSchedule();
                resultToObject(rs, empschedule);
                lists.add(empschedule);

            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    private static void resultToObject(ResultSet rs, EmpSchedule empschedule) {
        try {
            empschedule.setOID(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID]));
            empschedule.setPeriodId(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]));
            empschedule.setEmployeeId(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]));

            empschedule.setD1(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D1]));
            empschedule.setD2(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2]));
            empschedule.setD3(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D3]));
            empschedule.setD4(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D4]));
            empschedule.setD5(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D5]));
            empschedule.setD6(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D6]));
            empschedule.setD7(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D7]));
            empschedule.setD8(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D8]));
            empschedule.setD9(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D9]));
            empschedule.setD10(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D10]));
            empschedule.setD11(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D11]));
            empschedule.setD12(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D12]));
            empschedule.setD13(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D13]));
            empschedule.setD14(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D14]));
            empschedule.setD15(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D15]));
            empschedule.setD16(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D16]));
            empschedule.setD17(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D17]));
            empschedule.setD18(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D18]));
            empschedule.setD19(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D19]));
            empschedule.setD20(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D20]));
            empschedule.setD21(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D21]));
            empschedule.setD22(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D22]));
            empschedule.setD23(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D23]));
            empschedule.setD24(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D24]));
            empschedule.setD25(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D25]));
            empschedule.setD26(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D26]));
            empschedule.setD27(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D27]));
            empschedule.setD28(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D28]));
            empschedule.setD29(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D29]));
            empschedule.setD30(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D30]));
            empschedule.setD31(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D31]));
            empschedule.setD2nd1(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND1]));
            empschedule.setD2nd2(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND2]));
            empschedule.setD2nd3(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND3]));
            empschedule.setD2nd4(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND4]));
            empschedule.setD2nd5(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND5]));
            empschedule.setD2nd6(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND6]));
            empschedule.setD2nd7(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND7]));
            empschedule.setD2nd8(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND8]));
            empschedule.setD2nd9(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND9]));
            empschedule.setD2nd10(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND10]));
            empschedule.setD2nd11(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND11]));
            empschedule.setD2nd12(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND12]));
            empschedule.setD2nd13(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND13]));
            empschedule.setD2nd14(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND14]));
            empschedule.setD2nd15(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND15]));
            empschedule.setD2nd16(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND16]));
            empschedule.setD2nd17(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND17]));
            empschedule.setD2nd18(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND18]));
            empschedule.setD2nd19(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND19]));
            empschedule.setD2nd20(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND20]));
            empschedule.setD2nd21(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND21]));
            empschedule.setD2nd22(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND22]));
            empschedule.setD2nd23(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND23]));
            empschedule.setD2nd24(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND24]));
            empschedule.setD2nd25(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND25]));
            empschedule.setD2nd26(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND26]));
            empschedule.setD2nd27(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND27]));
            empschedule.setD2nd28(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND28]));
            empschedule.setD2nd29(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND29]));
            empschedule.setD2nd30(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND30]));
            empschedule.setD2nd31(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND31]));

            empschedule.setStatus1(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1]));
            empschedule.setStatus2(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2]));
            empschedule.setStatus3(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS3]));
            empschedule.setStatus4(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS4]));
            empschedule.setStatus5(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS5]));
            empschedule.setStatus6(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS6]));
            empschedule.setStatus7(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS7]));
            empschedule.setStatus8(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS8]));
            empschedule.setStatus9(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS9]));
            empschedule.setStatus10(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS10]));
            empschedule.setStatus11(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS11]));
            empschedule.setStatus12(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS12]));
            empschedule.setStatus13(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS13]));
            empschedule.setStatus14(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS14]));
            empschedule.setStatus15(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS15]));
            empschedule.setStatus16(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS16]));
            empschedule.setStatus17(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS17]));
            empschedule.setStatus18(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS18]));
            empschedule.setStatus19(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS19]));
            empschedule.setStatus20(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS20]));
            empschedule.setStatus21(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS21]));
            empschedule.setStatus22(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS22]));
            empschedule.setStatus23(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS23]));
            empschedule.setStatus24(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS24]));
            empschedule.setStatus25(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS25]));
            empschedule.setStatus26(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS26]));
            empschedule.setStatus27(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS27]));
            empschedule.setStatus28(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS28]));
            empschedule.setStatus29(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS29]));
            empschedule.setStatus30(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS30]));
            empschedule.setStatus31(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS31]));
            empschedule.setStatus2nd1(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND1]));
            empschedule.setStatus2nd2(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND2]));
            empschedule.setStatus2nd3(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND3]));
            empschedule.setStatus2nd4(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND4]));
            empschedule.setStatus2nd5(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND5]));
            empschedule.setStatus2nd6(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND6]));
            empschedule.setStatus2nd7(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND7]));
            empschedule.setStatus2nd8(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND8]));
            empschedule.setStatus2nd9(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND9]));
            empschedule.setStatus2nd10(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND10]));
            empschedule.setStatus2nd11(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND11]));
            empschedule.setStatus2nd12(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND12]));
            empschedule.setStatus2nd13(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND13]));
            empschedule.setStatus2nd14(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND14]));
            empschedule.setStatus2nd15(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND15]));
            empschedule.setStatus2nd16(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND16]));
            empschedule.setStatus2nd17(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND17]));
            empschedule.setStatus2nd18(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND18]));
            empschedule.setStatus2nd19(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND19]));
            empschedule.setStatus2nd20(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND20]));
            empschedule.setStatus2nd21(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND21]));
            empschedule.setStatus2nd22(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND22]));
            empschedule.setStatus2nd23(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND23]));
            empschedule.setStatus2nd24(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND24]));
            empschedule.setStatus2nd25(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND25]));
            empschedule.setStatus2nd26(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND26]));
            empschedule.setStatus2nd27(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND27]));
            empschedule.setStatus2nd28(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND28]));
            empschedule.setStatus2nd29(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND29]));
            empschedule.setStatus2nd30(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND30]));
            empschedule.setStatus2nd31(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2ND31]));

            empschedule.setReason1(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON1]));
            empschedule.setReason2(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2]));
            empschedule.setReason3(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON3]));
            empschedule.setReason4(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON4]));
            empschedule.setReason5(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON5]));
            empschedule.setReason6(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON6]));
            empschedule.setReason7(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON7]));
            empschedule.setReason8(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON8]));
            empschedule.setReason9(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON9]));
            empschedule.setReason10(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON10]));
            empschedule.setReason11(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON11]));
            empschedule.setReason12(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON12]));
            empschedule.setReason13(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON13]));
            empschedule.setReason14(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON14]));
            empschedule.setReason15(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON15]));
            empschedule.setReason16(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON16]));
            empschedule.setReason17(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON17]));
            empschedule.setReason18(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON18]));
            empschedule.setReason19(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON19]));
            empschedule.setReason20(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON20]));
            empschedule.setReason21(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON21]));
            empschedule.setReason22(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON22]));
            empschedule.setReason23(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON23]));
            empschedule.setReason24(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON24]));
            empschedule.setReason25(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON25]));
            empschedule.setReason26(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON26]));
            empschedule.setReason27(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON27]));
            empschedule.setReason28(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON28]));
            empschedule.setReason29(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON29]));
            empschedule.setReason30(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON30]));
            empschedule.setReason31(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON31]));
            empschedule.setReason2nd1(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND1]));
            empschedule.setReason2nd2(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND2]));
            empschedule.setReason2nd3(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND3]));
            empschedule.setReason2nd4(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND4]));
            empschedule.setReason2nd5(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND5]));
            empschedule.setReason2nd6(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND6]));
            empschedule.setReason2nd7(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND7]));
            empschedule.setReason2nd8(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND8]));
            empschedule.setReason2nd9(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND9]));
            empschedule.setReason2nd10(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND10]));
            empschedule.setReason2nd11(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND11]));
            empschedule.setReason2nd12(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND12]));
            empschedule.setReason2nd13(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND13]));
            empschedule.setReason2nd14(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND14]));
            empschedule.setReason2nd15(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND15]));
            empschedule.setReason2nd16(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND16]));
            empschedule.setReason2nd17(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND17]));
            empschedule.setReason2nd18(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND18]));
            empschedule.setReason2nd19(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND19]));
            empschedule.setReason2nd20(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND20]));
            empschedule.setReason2nd21(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND21]));
            empschedule.setReason2nd22(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND22]));
            empschedule.setReason2nd23(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND23]));
            empschedule.setReason2nd24(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND24]));
            empschedule.setReason2nd25(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND25]));
            empschedule.setReason2nd26(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND26]));
            empschedule.setReason2nd27(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND27]));
            empschedule.setReason2nd28(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND28]));
            empschedule.setReason2nd29(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND29]));
            empschedule.setReason2nd30(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND30]));
            empschedule.setReason2nd31(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2ND31]));

            empschedule.setNote1(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE1]));
            empschedule.setNote2(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2]));
            empschedule.setNote3(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE3]));
            empschedule.setNote4(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE4]));
            empschedule.setNote5(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE5]));
            empschedule.setNote6(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE6]));
            empschedule.setNote7(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE7]));
            empschedule.setNote8(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE8]));
            empschedule.setNote9(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE9]));
            empschedule.setNote10(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE10]));
            empschedule.setNote11(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE11]));
            empschedule.setNote12(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE12]));
            empschedule.setNote13(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE13]));
            empschedule.setNote14(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE14]));
            empschedule.setNote15(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE15]));
            empschedule.setNote16(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE16]));
            empschedule.setNote17(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE17]));
            empschedule.setNote18(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE18]));
            empschedule.setNote19(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE19]));
            empschedule.setNote20(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE20]));
            empschedule.setNote21(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE21]));
            empschedule.setNote22(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE22]));
            empschedule.setNote23(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE23]));
            empschedule.setNote24(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE24]));
            empschedule.setNote25(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE25]));
            empschedule.setNote26(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE26]));
            empschedule.setNote27(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE27]));
            empschedule.setNote28(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE28]));
            empschedule.setNote29(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE29]));
            empschedule.setNote30(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE30]));
            empschedule.setNote31(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE31]));
            empschedule.setNote2nd1(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND1]));
            empschedule.setNote2nd2(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND2]));
            empschedule.setNote2nd3(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND3]));
            empschedule.setNote2nd4(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND4]));
            empschedule.setNote2nd5(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND5]));
            empschedule.setNote2nd6(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND6]));
            empschedule.setNote2nd7(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND7]));
            empschedule.setNote2nd8(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND8]));
            empschedule.setNote2nd9(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND9]));
            empschedule.setNote2nd10(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND10]));
            empschedule.setNote2nd11(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND11]));
            empschedule.setNote2nd12(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND12]));
            empschedule.setNote2nd13(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND13]));
            empschedule.setNote2nd14(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND14]));
            empschedule.setNote2nd15(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND15]));
            empschedule.setNote2nd16(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND16]));
            empschedule.setNote2nd17(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND17]));
            empschedule.setNote2nd18(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND18]));
            empschedule.setNote2nd19(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND19]));
            empschedule.setNote2nd20(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND20]));
            empschedule.setNote2nd21(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND21]));
            empschedule.setNote2nd22(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND22]));
            empschedule.setNote2nd23(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND23]));
            empschedule.setNote2nd24(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND24]));
            empschedule.setNote2nd25(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND25]));
            empschedule.setNote2nd26(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND26]));
            empschedule.setNote2nd27(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND27]));
            empschedule.setNote2nd28(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND28]));
            empschedule.setNote2nd29(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND29]));
            empschedule.setNote2nd30(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND30]));
            empschedule.setNote2nd31(rs.getString(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_NOTE2ND31]));

            empschedule.setIn1(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN1]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN1])) : null);
            empschedule.setIn2(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2])) : null);
            empschedule.setIn3(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN3]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN3]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN3])) : null);
            empschedule.setIn4(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN4]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN4]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN4])) : null);
            empschedule.setIn5(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN5]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN5]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN5])) : null);
            empschedule.setIn6(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN6]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN6]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN6])) : null);
            empschedule.setIn7(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN7]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN7]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN7])) : null);
            empschedule.setIn8(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN8]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN8]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN8])) : null);
            empschedule.setIn9(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN9]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN9]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN9])) : null);
            empschedule.setIn10(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN10]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN10]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN10])) : null);
            empschedule.setIn11(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN11]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN11]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN11])) : null);
            empschedule.setIn12(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN12]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN12]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN12])) : null);
            empschedule.setIn13(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN13]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN13]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN13])) : null);
            empschedule.setIn14(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN14]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN14]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN14])) : null);
            empschedule.setIn15(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN15]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN15]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN15])) : null);
            empschedule.setIn16(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN16]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN16]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN16])) : null);
            empschedule.setIn17(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN17]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN17]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN17])) : null);
            empschedule.setIn18(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN18]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN18]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN18])) : null);
            empschedule.setIn19(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN19]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN19]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN19])) : null);
            empschedule.setIn20(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN20]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN20]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN20])) : null);
            empschedule.setIn21(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN21]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN21]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN21])) : null);
            empschedule.setIn22(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN22]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN22]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN22])) : null);
            empschedule.setIn23(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN23]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN23]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN23])) : null);
            empschedule.setIn24(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN24]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN24]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN24])) : null);
            empschedule.setIn25(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN25]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN25]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN25])) : null);
            empschedule.setIn26(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN26]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN26]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN26])) : null);
            empschedule.setIn27(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN27]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN27]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN27])) : null);
            empschedule.setIn28(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN28]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN28]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN28])) : null);
            empschedule.setIn29(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN29]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN29]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN29])) : null);
            empschedule.setIn30(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN30]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN30]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN30])) : null);
            empschedule.setIn31(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN31]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN31]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN31])) : null);
            empschedule.setIn2nd1(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND1]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND1])) : null);
            empschedule.setIn2nd2(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND2]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND2]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND2])) : null);
            empschedule.setIn2nd3(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND3]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND3]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND3])) : null);
            empschedule.setIn2nd4(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND4]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND4]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND4])) : null);
            empschedule.setIn2nd5(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND5]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND5]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND5])) : null);
            empschedule.setIn2nd6(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND6]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND6]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND6])) : null);
            empschedule.setIn2nd7(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND7]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND7]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND7])) : null);
            empschedule.setIn2nd8(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND8]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND8]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND8])) : null);
            empschedule.setIn2nd9(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND9]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND9]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND9])) : null);
            empschedule.setIn2nd10(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND10]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND10]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND10])) : null);
            empschedule.setIn2nd11(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND11]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND11]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND11])) : null);
            empschedule.setIn2nd12(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND12]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND12]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND12])) : null);
            empschedule.setIn2nd13(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND13]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND13]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND13])) : null);
            empschedule.setIn2nd14(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND14]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND14]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND14])) : null);
            empschedule.setIn2nd15(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND15]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND15]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND15])) : null);
            empschedule.setIn2nd16(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND16]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND16]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND16])) : null);
            empschedule.setIn2nd17(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND17]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND17]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND17])) : null);
            empschedule.setIn2nd18(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND18]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND18]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND18])) : null);
            empschedule.setIn2nd19(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND19]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND19]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND19])) : null);
            empschedule.setIn2nd20(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND20]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND20]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND20])) : null);
            empschedule.setIn2nd21(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND21]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND21]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND21])) : null);
            empschedule.setIn2nd22(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND22]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND22]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND22])) : null);
            empschedule.setIn2nd23(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND23]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND23]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND23])) : null);
            empschedule.setIn2nd24(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND24]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND24]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND24])) : null);
            empschedule.setIn2nd25(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND25]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND25]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND25])) : null);
            empschedule.setIn2nd26(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND26]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND26]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND26])) : null);
            empschedule.setIn2nd27(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND27]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND27]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND27])) : null);
            empschedule.setIn2nd28(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND28]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND28]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND28])) : null);
            empschedule.setIn2nd29(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND29]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND29]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND29])) : null);
            empschedule.setIn2nd30(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND30]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND30]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND30])) : null);
            empschedule.setIn2nd31(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND31]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND31]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND31])) : null);

            empschedule.setOut1(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT1]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT1])) : null);
            empschedule.setOut2(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2])) : null);
            empschedule.setOut3(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT3]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT3]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT3])) : null);
            empschedule.setOut4(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT4]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT4]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT4])) : null);
            empschedule.setOut5(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT5]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT5]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT5])) : null);
            empschedule.setOut6(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT6]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT6]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT6])) : null);
            empschedule.setOut7(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT7]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT7]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT7])) : null);
            empschedule.setOut8(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT8]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT8]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT8])) : null);
            empschedule.setOut9(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT9]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT9]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT9])) : null);
            empschedule.setOut10(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT10]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT10]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT10])) : null);
            empschedule.setOut11(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT11]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT11]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT11])) : null);
            empschedule.setOut12(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT12]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT12]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT12])) : null);
            empschedule.setOut13(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT13]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT13]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT13])) : null);
            empschedule.setOut14(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT14]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT14]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT14])) : null);
            empschedule.setOut15(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT15]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT15]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT15])) : null);
            empschedule.setOut16(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT16]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT16]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT16])) : null);
            empschedule.setOut17(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT17]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT17]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT17])) : null);
            empschedule.setOut18(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT18]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT18]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT18])) : null);
            empschedule.setOut19(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT19]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT19]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT19])) : null);
            empschedule.setOut20(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT20]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT20]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT20])) : null);
            empschedule.setOut21(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT21]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT21]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT21])) : null);
            empschedule.setOut22(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT22]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT22]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT22])) : null);
            empschedule.setOut23(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT23]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT23]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT23])) : null);
            empschedule.setOut24(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT24]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT24]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT24])) : null);
            empschedule.setOut25(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT25]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT25]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT25])) : null);
            empschedule.setOut26(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT26]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT26]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT26])) : null);
            empschedule.setOut27(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT27]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT27]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT27])) : null);
            empschedule.setOut28(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT28]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT28]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT28])) : null);
            empschedule.setOut29(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT29]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT29]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT29])) : null);
            empschedule.setOut30(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT30]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT30]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT30])) : null);
            empschedule.setOut31(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT31]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT31]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT31])) : null);
            empschedule.setOut2nd1(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND1]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND1])) : null);
            empschedule.setOut2nd2(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND2]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND2]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND2])) : null);
            empschedule.setOut2nd3(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND3]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND3]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND3])) : null);
            empschedule.setOut2nd4(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND4]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND4]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND4])) : null);
            empschedule.setOut2nd5(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND5]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND5]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND5])) : null);
            empschedule.setOut2nd6(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND6]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND6]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND6])) : null);
            empschedule.setOut2nd7(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND7]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND7]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND7])) : null);
            empschedule.setOut2nd8(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND8]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND8]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND8])) : null);
            empschedule.setOut2nd9(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND9]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND9]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND9])) : null);
            empschedule.setOut2nd10(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND10]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND10]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND10])) : null);
            empschedule.setOut2nd11(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND11]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND11]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND11])) : null);
            empschedule.setOut2nd12(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND12]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND12]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND12])) : null);
            empschedule.setOut2nd13(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND13]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND13]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND13])) : null);
            empschedule.setOut2nd14(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND14]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND14]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND14])) : null);
            empschedule.setOut2nd15(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND15]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND15]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND15])) : null);
            empschedule.setOut2nd16(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND16]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND16]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND16])) : null);
            empschedule.setOut2nd17(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND17]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND17]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND17])) : null);
            empschedule.setOut2nd18(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND18]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND18]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND18])) : null);
            empschedule.setOut2nd19(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND19]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND19]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND19])) : null);
            empschedule.setOut2nd20(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND20]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND20]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND20])) : null);
            empschedule.setOut2nd21(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND21]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND21]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND21])) : null);
            empschedule.setOut2nd22(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND22]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND22]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND22])) : null);
            empschedule.setOut2nd23(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND23]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND23]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND23])) : null);
            empschedule.setOut2nd24(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND24]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND24]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND24])) : null);
            empschedule.setOut2nd25(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND25]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND25]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND25])) : null);
            empschedule.setOut2nd26(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND26]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND26]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND26])) : null);
            empschedule.setOut2nd27(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND27]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND27]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND27])) : null);
            empschedule.setOut2nd28(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND28]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND28]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND28])) : null);
            empschedule.setOut2nd29(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND29]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND29]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND29])) : null);
            empschedule.setOut2nd30(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND30]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND30]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND30])) : null);
            empschedule.setOut2nd31(rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND31]) != null ? PstEmpSchedule.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND31]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND31])) : null);

            empschedule.setScheduleType(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_SCHEDULE_TYPE]));

        } catch (Exception e) {
        }
    }

    public static boolean checkOID(long empScheduleId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_HR_EMP_SCHEDULE + " WHERE "
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID] + " = '" + empScheduleId + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    public static int getCount(String whereClause) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID] + ") FROM " + TBL_HR_EMP_SCHEDULE;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }

            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }


    /* This method used to find current data */
    public static int findLimitStart(long oid, int recordToGet, String whereClause) {
        String order = "";
        int size = getCount(whereClause);
        int start = 0;
        boolean found = false;
        for (int i = 0; (i < size) && !found; i = i + recordToGet) {
            Vector list = list(i, recordToGet, whereClause, order);
            start = i;
            if (list.size() > 0) {
                for (int ls = 0; ls < list.size(); ls++) {
                    EmpSchedule empschedule = (EmpSchedule) list.get(ls);
                    if (oid == empschedule.getOID()) {
                        found = true;
                    }
                }
            }
        }
        if ((start >= size) && (size > 0)) {
            start = start - recordToGet;
        }

        return start;
    }

    public static long deleteByEmployee(long emplOID) {
        try {
            String sql = " DELETE FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                    + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + emplOID;
            int status = DBHandler.execUpdate(sql);
        } catch (Exception exc) {
            System.out.println("error delete empschedule by employee " + exc.toString());
        }
        return emplOID;
    }

    public static boolean checkPeriode(long periodeId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_HR_EMP_SCHEDULE + " WHERE "
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " = '" + periodeId + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    public static boolean checkScheduleSymbol(long scheduleSymbolId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_HR_EMP_SCHEDULE + " WHERE "
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D1] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D3] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D4] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D5] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D6] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D7] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D8] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D9] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D10] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D11] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D12] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D13] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D14] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D15] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D16] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D17] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D18] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D19] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D20] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D21] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D22] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D23] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D24] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D25] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D26] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D27] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D28] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D29] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D30] + " = '" + scheduleSymbolId + "'"
                    + " OR " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D31] + " = '" + scheduleSymbolId + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /**
     * get apopriate field on empschedule table
     *
     * @param selectedDate
     * @return
     * @created by Edhy
     */
    public static int getIdxNameOfTableBySelectedDate(Date selectedDate) {
        if (selectedDate != null) {
            return selectedDate.getDate();
        } else {
            return 0;
        }
    }

    /**
     * get field index that will update Fungsi ini di pakai di Presence Edit.jsp
     *
     * @param periodId
     * @param employeeId
     * @param presenceStatus
     * @param idxFieldName
     * @return
     * @created by Edhy
     */
    public static Vector getFieldIndexWillUpdated(long periodId, long employeeId, int presenceStatus, Date presenceDate) {

        Vector result = new Vector();
        DBResultSet dbrs = null;
        int idxFieldName = getIdxNameOfTableBySelectedDate(presenceDate);
        try {

            String sql = "SELECT SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    //update by satrya 2012-10-13
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]
                    //end
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " LEFT JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM2"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]
                    + " = SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

            //System.out.println("getFieldIndexWillUpdated : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int intYear = presenceDate.getYear();
            int intMonth = presenceDate.getMonth();
            int intDate = presenceDate.getDate();

            long longSchld1stIn = 0;
            long longSchld1stOut = 0;
            long longSchld2ndIn = 0;
            long longSchld2ndOut = 0;

            //update by satrya 2012-10-13
            long longSchldBreakIn = 0;
            long longSchldBreakOut = 0;

            boolean rsNull = true;

            //System.out.println("");                

            // --- start of iterasi ---
            while (rs.next()) {
                rsNull = false;

                // first schedule IN
                if (rs.getTime(1) != null) {
                    longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                }

                // first schedule OUT
                if (rs.getTime(2) != null) {
                    if (rs.getTime(1).getHours() < rs.getTime(2).getHours()) {
                        longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                    } //update by satrya 2012-08-31
                    else {
                        longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                    }

                }

                // second schedule IN
                if (rs.getTime(3) != null) {
                    longSchld2ndIn = (new Date(intYear, intMonth, intDate, rs.getTime(3).getHours(), rs.getTime(3).getMinutes(), rs.getTime(3).getSeconds())).getTime();
                }

                // second schedule OUT
                if (rs.getTime(4) != null) {
                    if (rs.getTime(3).getHours() < rs.getTime(4).getHours()) {
                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime();
                    } //update by satrya 2012-08-31
                    else {
                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                    }
                }

                //update by satrya 2012-10-13
                //menentukan break OUT
                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                    longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                }
                //menentukan break IN
                //update by satrya 2012-10-13
                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
                        longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                    } else {
                        longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                    }
                }


                //update by satrya 2012-10-13
                //menambahkan schedule break out
                result = getPeriodAndTableIndex(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, periodId, employeeId, presenceStatus, presenceDate);
                //update by satrya 2012-10-13
                //result = getPeriodAndTableIndex(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, periodId, employeeId, presenceStatus, presenceDate);
            }


            // jika resultset adalah null  
            if (rsNull) {
                //result = getPeriodAndTableIndex(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, periodId, employeeId, presenceStatus, presenceDate);
                result = getPeriodAndTableIndex(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, periodId, employeeId, presenceStatus, presenceDate);
            }

            return result;
        } catch (Exception e) {
            System.out.println("getFieldIndexWillUpdated Exception : " + e.toString());
            return new Vector(1, 1);
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * create by devin 2014-04-09
     *
     * @param startDate
     * @return
     */
    public static Hashtable cariSymbol(Date startDate) {
        Hashtable result = new Hashtable();
        DBResultSet dbrs = null;
        long period = 0;
        long idSymbol = 0;

        int idxFieldName = PstEmpSchedule.getIdxNameOfTableBySelectedDate(startDate);
        String fieldIn = PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1];
        period = PstPeriod.getPeriodIdBySelectedDate(startDate);
        try {
            String sql = "SELECT sym." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL] + ", empsch."
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS empsch INNER JOIN "
                    + PstPeriod.TBL_HR_PERIOD + " AS period ON empsch." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + "=period."
                    + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID] + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS sym ON empsch." + fieldIn
                    + "=sym." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID] + " where empsch." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + "=" + period;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                result.put(rs.getLong("empsch." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]), rs.getString("sym." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL]));

            }
        } catch (Exception exc) {
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }


    }

    /**
     * keterangan: create by satrya 2013-07-09
     *
     * @param prevPeriod
     * @param currPeriod
     * @param nexPeriod
     * @param employeeId
     * @param presenceStatus
     * @param presenceDate
     * @return
     */
    //update by devin 2014-03-04
    //devin
    public static Vector getFieldIndexSearchSchedule(Period prevPeriod, Period currPeriod, Period nexPeriod, long employeeId, int presenceStatus, boolean isInNull, Presence presence, boolean isCrossDays) {

        Vector result = new Vector();
        DBResultSet dbrs = null;
        Date dtPresence = presence.getPresenceDatetime();
        Date dtYesterday = new Date(presence.getPresenceDatetime().getYear(), presence.getPresenceDatetime().getMonth(), presence.getPresenceDatetime().getDate() - 1);
        Date presenceRounded = presence.getPresenceRounded();
        String sPresenceRounded = presenceRounded != null ? Formater.formatDate(presenceRounded, "HH:mm:00") : "";
        //int idxFieldName = getIdxNameOfTableBySelectedDate(dtPresence);

        try {
            if (sPresenceRounded != null && sPresenceRounded.length() > 0 && dtPresence != null) {
                String sql = "SELECT SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                        + ",SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                        + ",SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]
                        + ",SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]
                        + ",SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                        + " FROM " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL;
                if (isInNull) {
                    sql = sql + " AS SYM WHERE SYM."
                            + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN] + "!=\"00:00:00\" AND SYM."
                            + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT] + "!=\"00:00:00\" AND SYM."
                            + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                            + " >=\"" + sPresenceRounded + "\" ORDER BY SYM."
                            + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT] + " ASC LIMIT 0,1";
                } else {
                    sql = sql + " AS SYM WHERE SYM."
                            + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN] + "!=\"00:00:00\" AND SYM."
                            + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT] + "!=\"00:00:00\" AND SYM."
                            + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                            + " >=\"" + sPresenceRounded + "\" ORDER BY SYM."
                            + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN] + " ASC LIMIT 0,1";
                }
                //System.out.println("getFieldIndexWillUpdated : " + sql);
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();
                //jika dtPresence  maka di set -1 agar nannti schedulenya tidak di set alias 0
                int intYear = dtPresence.getYear();
                int intMonth = dtPresence.getMonth();
                int intDate = dtPresence.getDate();

                //untuk cek
                int intTmpYear = dtPresence.getYear();
                int intTmpMonth = dtPresence.getMonth();
                int intTmpDate = dtPresence.getDate();
                /*long longSchld1stIn = 0;
                 long longSchld1stOut = 0;
                 long longSchld2ndIn = 0;
                 long longSchld2ndOut = 0;

                 //update by satrya 2012-10-13
                 long longSchldBreakIn = 0;
                 long longSchldBreakOut = 0;*/
                Date dtSchld1stIn = null;
                Date dtSchld1stOut = null;
                Date dtSchld2ndIn = null;
                Date dtSchld2ndOut = null;

                //tmp untuk check schedule
                Date dtTmpSchld1stOut = null;

                //update by satrya 2012-10-13
                Date dtSchldBreakIn = null;
                Date dtSchldBreakOut = null;

                boolean rsNull = true;

                //System.out.println("");                

                // --- start of iterasi ---
                long oidScheduleId = 0;
                while (rs.next()) {
                    rsNull = false;
                    oidScheduleId = rs.getLong(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]);
                    // first schedule IN
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]) != null) {
                        dtSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds()));
                        // second schedule IN
                        //longSchld2ndIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                    }

                    // first schedule OUT
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]) != null) {
                        if (rs.getTime(1).getHours() < rs.getTime(2).getHours()) {
                            dtSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds()));

                            //dianggap ada cross day tpi schedulenya tidak cross mis schedulenya tgl 21 16:00 s/d 21 23:59, akan tetapi dia datang di outnya tgl 22 jam 00:00:01 
                            // if(isCrossDays || ((longPresenceTime <= (longOutYesterdaySchdl + lookUpAfterOutYesterday))) && presence.getStatus()==Presence.STATUS_OUT){
                            //     long  longTmpSchld1stOut = (new Date(intTmpYear, intTmpMonth, intTmpDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getSeconds())).getTime()+ (1000 * 60 * 60 * 24);
                            //     dtTmpSchld1stOut = new Date(longTmpSchld1stOut);
                            // }else{
                            dtTmpSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getSeconds()));
                            //}
                            // second schedule OUT
                            //longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                        } //update by satrya 2012-08-31
                        else {
                            long longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                            dtSchld1stOut = new Date(longSchld1stOut);
                            intTmpYear = dtYesterday.getYear();
                            intTmpMonth = dtYesterday.getMonth();
                            intTmpDate = dtYesterday.getDate();

                            long longTmpSchld1stOut = (new Date(intTmpYear, intTmpMonth, intTmpDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                            dtTmpSchld1stOut = new Date(longTmpSchld1stOut);
                            // second schedule OUT
                            //longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                        }

                    }
                    //update by satrya 2012-10-13
                    //menentukan break OUT
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                        dtSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds()));
                    }
                    //menentukan break IN
                    //update by satrya 2012-10-13
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                        if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
                            dtSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds()));
                        } else {
                            long longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                            dtSchldBreakIn = new Date(longSchldBreakIn);

                        }
                    }
                    //agar mencegah dia -24jam atau + 24 jam
                    if (presence.getStatus() == Presence.STATUS_OUT) {
                        //Date notSecondPresence = presence.getPresenceDatetime();
                        //notSecondPresence.setSeconds(0);
                        // Date dtSchedule = new Date(dtSchld1stOut.getYear(), dtSchld1stOut.getMonth(), dtSchld1stOut.getDate(), dtSchld1stOut.getHours(), dtSchld1stOut.getMinutes());
                        long iDuration = dtTmpSchld1stOut != null ? presence.getPresenceDatetime().getTime() / 60000 - dtTmpSchld1stOut.getTime() / 60000 : 0;
                        long iDurationHour = (iDuration - (iDuration % 60)) / 60;
                        //boolean MaxSchNormal=true;
                        if (iDurationHour != 0 && iDurationHour < ((MAX_WORKING_HOUR - 1) * -1)) {
                            isCrossDays = true;
                        } else {
                            isCrossDays = false;
                        }/*else if(iDurationHour!=0 && iDurationHour < ((MAX_WORKING_HOUR -1)  * -1) ){
                         //kemungkinan dia di hari sebelumnya
                         isCrossDays=true;
                    
                         }*/
                    }

                    //update by satrya 2012-10-13
                    //menambahkan schedule break out
                    result = getPeriodeTableSchedule(prevPeriod, currPeriod, nexPeriod, rsNull, dtSchld1stIn, dtSchld1stOut, dtSchld2ndIn, dtSchld2ndOut, dtSchldBreakOut, dtSchldBreakIn, employeeId, presenceStatus, presence, oidScheduleId, isCrossDays, 0, 0, 0);
                    // result = getPeriodeTableSchedule(prevPeriod,currPeriod,nexPeriod ,rsNull, dtSchld1stIn, dtSchld1stOut, dtSchld2ndIn, dtSchld2ndOut, dtSchldBreakOut, dtSchldBreakIn,employeeId, presenceStatus, presence,oidScheduleId);
                    //update by satrya 2012-10-13
                    //result = getPeriodAndTableIndex(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, periodId, employeeId, presenceStatus, presenceDate);
                }


                // jika resultset adalah null  
                if (rsNull) {
                    //result = getPeriodAndTableIndex(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, periodId, employeeId, presenceStatus, presenceDate);
                    result = getPeriodeTableSchedule(prevPeriod, currPeriod, nexPeriod, rsNull, dtSchld1stIn, dtSchld1stOut, dtSchld2ndIn, dtSchld2ndOut, dtSchldBreakOut, dtSchldBreakIn, employeeId, presenceStatus, presence, oidScheduleId, false, 0, 0, 0);
                    //result = getPeriodeTableSchedule(prevPeriod,currPeriod,nexPeriod ,rsNull, dtSchld1stIn, dtSchld1stOut, dtSchld2ndIn, dtSchld2ndOut, dtSchldBreakOut, dtSchldBreakIn,employeeId, presenceStatus, presence,oidScheduleId);
                }
            }
            return result;
        } catch (Exception e) {
            System.out.println("getFieldIndexWillUpdated Exception : " + e.toString());
            return new Vector(1, 1);
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * create by satrya 2013-07-11
     *
     * @param prevPeriod
     * @param currPeriod
     * @param nexPeriod
     * @param employeeId
     * @param presenceStatus
     * @param isInNull
     * @param presence
     * @return
     */
    public static Vector getFieldIndexTableSchedule(Period prevPeriod, Period currPeriod, Period nexPeriod, long employeeId, int presenceStatus, boolean isInNull, Presence presence, boolean isCrossDays, long longOutYesterdaySchdl, long lookUpBeforeOutYesterday, long lookUpAfterOutYesterday, Date existPresenceSch1In) {


        DBResultSet dbrs = null;
        Vector result = new Vector();

        Date dtYesterday = new Date(presence.getPresenceDatetime().getYear(), presence.getPresenceDatetime().getMonth(), presence.getPresenceDatetime().getDate() - 1);
        Date dtPresence = presence.getPresenceDatetime();
        int idxFieldName = 0;
        //pengecekan jika di crosdays di hari kemarin
        long periodId = currPeriod != null ? currPeriod.getOID() : 0;//PstPeriod.getPeriodIdBySelectedDate(dtPresence);
        long longPresenceTime = presence.getPresenceDatetime().getTime();

        int intTmpYear = dtPresence.getYear();
        int intTmpMonth = dtPresence.getMonth();
        int intTmpDate = dtPresence.getDate();

        if (isInNull || presence.getStatus() == Presence.STATUS_OUT) {
            //if(isCrossDays || (existPresenceSch1In!=null && (longPresenceTime - existPresenceSch1In.getTime() < PstEmpSchedule.MAX_NORMAL_SCH_DISTANCE_TODAY))&& presence.getStatus()==Presence.STATUS_OUT){
            if (isCrossDays || ((longPresenceTime <= (longOutYesterdaySchdl + lookUpAfterOutYesterday))) && presence.getStatus() == Presence.STATUS_OUT) {
                idxFieldName = getIdxNameOfTableBySelectedDate(dtYesterday);
                //jika dia cross day, maka dia mengambil di hari sebelumnya
                intTmpYear = dtYesterday.getYear();
                intTmpMonth = dtYesterday.getMonth();
                intTmpDate = dtYesterday.getDate();
                isCrossDays = true;
                if (DateCalc.dayDifference(presence.getPresenceDatetime(), currPeriod.getStartDate()) == 0) {
                    if (prevPeriod != null) {
                        periodId = prevPeriod.getOID();
                    }
                } else {
                    //result.add(String.valueOf(currPeriod.getOID()));
                    if (currPeriod != null) {
                        periodId = currPeriod.getOID();
                    }
                }
            } else {
                idxFieldName = getIdxNameOfTableBySelectedDate(presence.getPresenceDatetime());
            }
            ///merubah schedule outnya
        } else {
            ///  Time Out mengikuti schedule IN
            idxFieldName = getIdxNameOfTableBySelectedDate(presence.getPresenceDatetime());
        }
        /*if(isCrossDays || presence.getPresenceDatetime().getTime()<lAverage){
         idxFieldName = getIdxNameOfTableBySelectedDate(dtYesterday);
         //periodId = prevPeriod!=null?prevPeriod.getOID():0;
         }else{
         idxFieldName =  getIdxNameOfTableBySelectedDate(presence.getPresenceDatetime());
         //periodId = currPeriod!=null?currPeriod.getOID():0;
         }*/


        Date presenceRounded = presence.getPresenceRounded();
        String sPresenceRounded = presenceRounded != null ? Formater.formatDate(presenceRounded, "HH:mm:00") : "";
        //int idxFieldName = getIdxNameOfTableBySelectedDate(dtPresence);

        try {
            if (sPresenceRounded != null && sPresenceRounded.length() > 0 && dtPresence != null) {
                String sql = "SELECT SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                        + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                        + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                        + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                        + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                        //update by satrya 2012-10-13
                        + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]
                        + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]
                        //end
                        + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                        + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                        + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                        + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                        + " LEFT JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM2"
                        + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]
                        + " = SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                        + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId
                        + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " = " + employeeId;
                //System.out.println("getFieldIndexWillUpdated : " + sql);
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();


                //jika dtPresence  maka di set -1 agar nannti schedulenya tidak di set alias 0
                int intYear = dtPresence.getYear();
                int intMonth = dtPresence.getMonth();
                int intDate = dtPresence.getDate();

                /*long longSchld1stIn = 0;
                 long longSchld1stOut = 0;
                 long longSchld2ndIn = 0;
                 long longSchld2ndOut = 0;

                 //update by satrya 2012-10-13
                 long longSchldBreakIn = 0;
                 long longSchldBreakOut = 0;*/
                Date dtSchld1stIn = null;
                Date dtSchld1stOut = null;
                Date dtSchld2ndIn = null;
                Date dtSchld2ndOut = null;

                //untuk sbb parameter check saja
                Date dtTmpSchld1stOut = null;

                //update by satrya 2012-10-13
                Date dtSchldBreakIn = null;
                Date dtSchldBreakOut = null;

                boolean rsNull = true;

                //System.out.println("");                

                // --- start of iterasi ---
                long oidScheduleId = 0;
                while (rs.next()) {
                    rsNull = false;
                    oidScheduleId = rs.getLong(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]);
                    // first schedule IN
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]) != null) {
                        dtSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]).getSeconds()));
                        // second schedule IN
                        //longSchld2ndIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                    }

                    // first schedule OUT
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]) != null) {
                        if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]).getHours() < rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getHours()) {
                            dtSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getSeconds()));

                            //dianggap ada cross day di hari sebelumnya tpi schedulenya tidak cross hari mis schedulenya tgl 21 16:00 s/d 21 23:59, akan tetapi dia datang di outnya tgl 22 jam 00:00:01, maka dia di set di hari sebelumnya
                            if (isCrossDays || ((longPresenceTime <= (longOutYesterdaySchdl + lookUpAfterOutYesterday))) && presence.getStatus() == Presence.STATUS_OUT) {
                                long longTmpSchld1stOut = (new Date(intTmpYear, intTmpMonth, intTmpDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getSeconds())).getTime();
                                dtTmpSchld1stOut = new Date(longTmpSchld1stOut);
                            } else {
                                dtTmpSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getSeconds()));
                            }
                            // second schedule OUT
                            //longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                        } //update by satrya 2012-08-31
                        else {
                            long longSchl1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                            dtSchld1stOut = new Date(longSchl1stOut);

                            long longTmpSchld1stOut = (new Date(intTmpYear, intTmpMonth, intTmpDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                            dtTmpSchld1stOut = new Date(longTmpSchld1stOut);
                            // second schedule OUT
                            //longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                        }





                    }
                    //update by satrya 2012-10-13
                    //menentukan break OUT
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                        dtSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds()));
                    }
                    //menentukan break IN
                    //update by satrya 2012-10-13
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                        if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
                            dtSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds()));
                        } else {
                            long longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                            dtSchldBreakIn = new Date(longSchldBreakIn);

                        }
                    }
                    boolean MaxSchNormal = true;
                    if (presence.getStatus() == Presence.STATUS_OUT) {
                        //Date notSecondPresence = presence.getPresenceDatetime();
                        //notSecondPresence.setSeconds(0);
                        //Date dtSchedule = new Date(dtSchld1stOut.getYear(), dtSchld1stOut.getMonth(), dtSchld1stOut.getDate(), dtSchld1stOut.getHours(), dtSchld1stOut.getMinutes());
                        long iDuration = dtTmpSchld1stOut != null ? presence.getPresenceDatetime().getTime() / 60000 - dtTmpSchld1stOut.getTime() / 60000 : 0;
                        long iDurationHour = (iDuration - (iDuration % 60)) / 60;

                        if (iDurationHour > MAX_WORKING_HOUR) {
                            //kemungkinan dia tummorow
                            //int x=0;
                            result = PstEmpSchedule.getFieldIndexSearchSchedule(prevPeriod, currPeriod, nexPeriod, employeeId, presenceStatus, isInNull, presence, isCrossDays);
                            MaxSchNormal = false;
                        } else if (iDurationHour != 0 && iDurationHour < ((MAX_WORKING_HOUR - 1) * -1)) {
                            //kemungkinan dia di hari sebelumnya
                            isCrossDays = true;
                            result = PstEmpSchedule.getFieldIndexSearchSchedule(prevPeriod, currPeriod, nexPeriod, employeeId, presenceStatus, isInNull, presence, isCrossDays);
                            MaxSchNormal = false;
                        }
                    }


                    //update by satrya 2012-10-13
                    //menambahkan schedule break out
                    if (MaxSchNormal) {
                        result = getPeriodeTableSchedule(prevPeriod, currPeriod, nexPeriod, rsNull, dtSchld1stIn, dtSchld1stOut, dtSchld2ndIn, dtSchld2ndOut, dtSchldBreakOut, dtSchldBreakIn, employeeId, presenceStatus, presence, oidScheduleId, isCrossDays, longOutYesterdaySchdl, lookUpBeforeOutYesterday, lookUpAfterOutYesterday);
                    }
                    //update by satrya 2012-10-13
                    //result = getPeriodAndTableIndex(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, periodId, employeeId, presenceStatus, presenceDate);
                }


                // jika resultset adalah null  
                if (rsNull) {
                    //result = getPeriodAndTableIndex(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, periodId, employeeId, presenceStatus, presenceDate);
                    result = getPeriodeTableSchedule(prevPeriod, currPeriod, nexPeriod, rsNull, dtSchld1stIn, dtSchld1stOut, dtSchld2ndIn, dtSchld2ndOut, dtSchldBreakOut, dtSchldBreakIn, employeeId, presenceStatus, presence, oidScheduleId, isCrossDays, longOutYesterdaySchdl, lookUpBeforeOutYesterday, lookUpAfterOutYesterday);
                }
            }
            return result;
        } catch (Exception e) {
            System.out.println("getFieldIndexWillUpdated Exception : " + "EmployeeId=" + employeeId + "tanggal:" + "" + presence.getPresenceDatetime() + e.toString());
            return new Vector(1, 1);
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * get field index that will update
     *
     * @param periodId
     * @param employeeId
     * @param presenceStatus
     * @param idxFieldName
     * @return
     * @created by Kartika
     */
    //update by satrya 2012-09-03
    //service center
    public static Vector getFieldIndexWillUpdatedVer2(Period prevPeriod, Period currentPeriod, Period nextPeriod, long employeeId, Presence presence, Date presenceDate) {

        Vector result = new Vector();
        DBResultSet dbrs = null;
        int idxFieldName = getIdxNameOfTableBySelectedDate(presenceDate);
        if (currentPeriod == null) {
            new Vector(1, 1);
        }
        try {

            String sql = "SELECT SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    //update by satrya 2012-08-10
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]
                    //update by satrya 2013-08-12
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL]
                    //end
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " LEFT JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM2"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]
                    + " = SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + currentPeriod.getOID() //update by satrya 2012-09-03
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

            //System.out.println("getFieldIndexWillUpdated : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int intYear = presenceDate.getYear();
            int intMonth = presenceDate.getMonth();
            int intDate = presenceDate.getDate();

            long longSchld1stIn = 0;
            long longSchld1stOut = 0;
            long longSchld2ndIn = 0;
            long longSchld2ndOut = 0;
            //update by satrya 2012-08-10
            long longSchldBreakIn = 0;
            long longSchldBreakOut = 0;
            //update by devin 2014-02-24
            long longSchldBreakInOvertime = 0;
            long longSchldBreakOutOvertime = 0;
            boolean rsNull = true;

            OvertimeDetail overtimeDetail = new OvertimeDetail();
            //update by satrya 2013-08-12
            Date dtRestEndOt = null;
            //System.out.println("");    
            long lSelectedDateFrom = presenceDate.getTime();
            long lSelectedDateTo = presenceDate.getTime();
            Date selectedDateFrom = new Date(lSelectedDateFrom);
            Date selectedDateTo = new Date(lSelectedDateTo);
            selectedDateFrom.setHours(0);
            selectedDateFrom.setMinutes(0);
            selectedDateFrom.setSeconds(0);
            selectedDateTo.setHours(23);
            selectedDateTo.setMinutes(59);
            selectedDateTo.setSeconds(59);
            //System.out.println("");                

            // --- start of iterasi ---
            while (rs.next()) {
                rsNull = false;

//                // first schedule IN
//                if (rs.getTime(1) != null) {
//                    longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
//                }
//
//                // first schedule OUT
//                if (rs.getTime(2) != null) {
//                    //update by ramayu 2012-07-11
//                    //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
//                    if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
//                        longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
//                    } else {
//                        longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
//                    }
//
//                }
//
//                // second schedule IN
//                if (rs.getTime(3) != null) {
//                    longSchld2ndIn = (new Date(intYear, intMonth, intDate, rs.getTime(3).getHours(), rs.getTime(3).getMinutes(), rs.getTime(3).getSeconds())).getTime();
//                }
//
//                // second schedule OUT
//                if (rs.getTime(4) != null) {
//                    //update by ramayu 2012-07-11
//                    if (rs.getTime(3).getHours() < rs.getTime(4).getHours()) {
//                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime();
//                    } else {
//                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
//                    }
//
//                }
//                //update by satrya 2012-08-10
//                //menentukan break OUT
//                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
//                    longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
//                }
//                //menentukan break IN
//                //update by satrya 2012-08-31
//                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
//                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
//                        longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
//                    } else {
//                        longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
//
//                    }
//                }
                //update by satrya 2013-08-12
                String sSymbol = rs.getString(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL]);
                //mencari hari yg sebelumnya,spa tau ada cross days
                //karna loopnya hanya sekali saja
                if (rs.getTime(1) != null && rs.getTime(2) != null && rs.getTime(1).getHours() != 0 && rs.getTime(2).getHours() != 0 && rs.getTime(1).getHours() >= rs.getTime(2).getHours()) {
                    selectedDateFrom.setTime(selectedDateFrom.getTime() - 24 * 60 * 60 * 1000);
                    selectedDateTo.setTime(selectedDateTo.getTime() + 24 * 60 * 60 * 1000);
                    Hashtable hasOvertimeExist = PstOvertimeDetail.getListOvertimeExistPerEmpId(0, 0, 0, 0, "", selectedDateFrom, selectedDateTo, 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");
                    if (hasOvertimeExist.get(employeeId) != null) {
                        long startOt = 0;
                        long endOt = 0;
                        long restStart = 0;
                        long restEnd = 0;
                        OvertimeTblExis overtimeTblExis = (OvertimeTblExis) hasOvertimeExist.get(employeeId);

                        for (int indOt = 0; indOt < overtimeTblExis.sizeStartDate(); indOt++) {
                            Date dtStart = overtimeTblExis.getStartDate(indOt);
                            if (dtStart != null && startOt < dtStart.getTime()) {
                                startOt = dtStart.getTime();
                            }

                        }
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeEndDate(); indEnd++) {
                            Date dtEnd = overtimeTblExis.getEndDate(indEnd);
                            if (dtEnd != null && dtEnd.getTime() > endOt) {
                                endOt = dtEnd.getTime();
                            }
                        }
                        //istirahat mulai
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeRestStart(); indEnd++) {
                            Date dtRestStart = overtimeTblExis.getRestStart(indEnd);
                            if (dtRestStart != null && dtRestStart.getTime() > restStart) {
                                restStart = dtRestStart.getTime();
                            }
                        }
                        //istirahat selesai
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeRestEnd(); indEnd++) {
                            Date dtRestEnd = overtimeTblExis.getRestEnd(indEnd);
                            if (dtRestEnd != null && dtRestEnd.getTime() > restEnd) {
                                restEnd = dtRestEnd.getTime();
                            }
                        }
                        if (startOt != 0 && endOt != 0) {
                            overtimeDetail.setDateFrom(new Date(startOt));
                            overtimeDetail.setDateTo(new Date(endOt));
                            overtimeDetail.setOID(overtimeTblExis.getOvertimeDetailId());
                            dtRestEndOt = new Date(restEnd);
                        }

                    }

                } else {
                    selectedDateFrom.setTime(selectedDateFrom.getTime());
                    selectedDateTo.setTime(selectedDateTo.getTime());
                    Hashtable hasOvertimeExist = PstOvertimeDetail.getListOvertimeExistPerEmpId(0, 0, 0, 0, "", selectedDateFrom, selectedDateTo, 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");
                    if (hasOvertimeExist != null && hasOvertimeExist.get(employeeId) != null) {
                        long startOt = 0;
                        long endOt = 0;
                        long restStart = 0;
                        long restEnd = 0;
                        OvertimeTblExis overtimeTblExis = (OvertimeTblExis) hasOvertimeExist.get(employeeId);

                        for (int indOt = 0; indOt < overtimeTblExis.sizeStartDate(); indOt++) {
                            Date dtStart = overtimeTblExis.getStartDate(indOt);
                            if (dtStart != null && (startOt == 0 || dtStart.getTime() < startOt)) {
                                startOt = dtStart.getTime();
                            }

                        }
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeEndDate(); indEnd++) {
                            Date dtEnd = overtimeTblExis.getEndDate(indEnd);
                            if (dtEnd != null && dtEnd.getTime() > endOt) {
                                endOt = dtEnd.getTime();
                            }
                        }
                        //istirahat mulai
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeRestStart(); indEnd++) {
                            Date dtRestStart = overtimeTblExis.getRestStart(indEnd);
                            if (dtRestStart != null && dtRestStart.getTime() > restStart) {
                                restStart = dtRestStart.getTime();
                            }
                        }
                        //istirahat selesai
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeRestEnd(); indEnd++) {
                            Date dtRestEnd = overtimeTblExis.getRestEnd(indEnd);
                            if (dtRestEnd != null && dtRestEnd.getTime() > restEnd) {
                                restEnd = dtRestEnd.getTime();
                            }
                        }
                        if (startOt != 0 && endOt != 0) {
                            overtimeDetail.setDateFrom(new Date(startOt));
                            overtimeDetail.setDateTo(new Date(endOt));
                            overtimeDetail.setOID(overtimeTblExis.getOvertimeDetailId());
                            if (restStart != 0) {
                                overtimeDetail.setRestStart(new Date(restStart));
                            } else {
                                overtimeDetail.setRestStart(null);
                            }
                            if (restEnd != 0) {
                                dtRestEndOt = (new Date(restEnd));
                            } else {
                                dtRestEndOt = null;
                            }
                            //dtRestEndOt = new Date(restEnd);
                        }

                    }

                }
//         if(hasOvertimeExist!=null && hasOvertimeExist.size()==0 && hasOvertimeExist.get(selectedDateFrom)==null){
//            Vector listCekOvertime = PstOvertimeDetail.getListOvertimeExist(0, 0, 0, 0, "", selectedDateFrom, selectedDateTo, 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");
//            //Vector listCekOvertime = PstOvertimeDetail.listOvertimeOverlap(0, 0, 1, 0, "", selectedDateFrom, selectedDateTo, 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");
//            
//            if (listCekOvertime != null && listCekOvertime.size() > 0) {
//                overtimeDetail = (OvertimeDetail) listCekOvertime.get(0);
//                hasOvertimeExist.put(selectedDateFrom, selectedDateTo);
//            }
//         }

                if (overtimeDetail.getOID() != 0) {

                    if (sSymbol.equalsIgnoreCase("OFF")) {
                        if (overtimeDetail.getDateFrom() != null) {
                            longSchld1stIn = overtimeDetail.getDateFrom().getTime();
                        } else {
                            if (rs.getTime(1) != null) {
                                longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                            }
                        }
                    } //update bvy satrya 2013-05-06
                    // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                    else if (rs.getTime(1) != null && rs.getTime(1).getHours() == 0 && rs.getTime(1).getMinutes() == 0) {
                        if (overtimeDetail.getDateFrom() != null) {
                            longSchld1stIn = overtimeDetail.getDateFrom().getTime();
                        } else {
                            if (rs.getTime(1) != null) {
                                longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                            }
                        }
                    } else if (rs.getTime(1) != null && overtimeDetail.getDateFrom() != null && overtimeDetail.getDateFrom().getHours() < rs.getTime(1).getHours()) {
                        longSchld1stIn = overtimeDetail.getDateFrom().getTime();
                    } else {
                        if (rs.getTime(1) != null) {
                            longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                        }
                    }
                } else {
                    if (rs.getTime(1) != null) {
                        longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                    }
                }



                // first schedule OUT
                if (overtimeDetail.getOID() != 0) {
                    if (sSymbol.equalsIgnoreCase("OFF")) {
                        if (overtimeDetail.getDateTo() != null) {
                            longSchld1stOut = overtimeDetail.getDateTo().getTime();
                        } else {
                            if (rs.getTime(2) != null) {
                                //update by ramayu 2012-07-11
                                //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
                                if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                                    longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                                } else {
                                    longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                                }

                            }
                        }
                    } //update bvy satrya 2013-05-06
                    // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                    else if (rs.getTime(2) != null && rs.getTime(2).getHours() == 0 && rs.getTime(2).getMinutes() == 0) {
                        if (overtimeDetail.getDateTo() != null) {
                            longSchld1stOut = overtimeDetail.getDateTo().getTime();
                        } else {
                            if (rs.getTime(2) != null) {
                                //update by ramayu 2012-07-11
                                //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
                                if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                                    longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                                } else {
                                    longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                                }

                            }
                        }
                    } else if (rs.getTime(2) != null && rs.getTime(1).getHours() <= rs.getTime(2).getHours() && overtimeDetail.getDateTo() != null && overtimeDetail.getDateTo().getHours() > rs.getTime(2).getHours()) {
                        longSchld1stOut = overtimeDetail.getDateTo().getTime();
                    } else {

                        if (rs.getTime(2) != null) {
                            //update by ramayu 2012-07-11
                            //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
                            if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                                longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                            } else {
                                longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                            }

                        }
                    }
                } else {
                    if (rs.getTime(2) != null) {
                        //update by ramayu 2012-07-11
                        //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
                        if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                            longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                        } else {
                            longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                        }

                    }
                }



                // second schedule IN
                if (rs.getTime(3) != null) {
                    longSchld2ndIn = (new Date(intYear, intMonth, intDate, rs.getTime(3).getHours(), rs.getTime(3).getMinutes(), rs.getTime(3).getSeconds())).getTime();
                }

                // second schedule OUT
                if (rs.getTime(4) != null) {
                    //update by ramayu 2012-07-11
                    if (rs.getTime(3).getHours() < rs.getTime(4).getHours()) {
                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime();
                    } else {
                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                    }

                }
                //update by satrya 2012-08-10
                //menentukan break OUT
                //update by satrya 2012-12-09
                if (overtimeDetail.getOID() != 0) {

                    if (sSymbol.equalsIgnoreCase("OFF")) {
                        if (overtimeDetail.getRestStart() != null) {
                            longSchldBreakOut = overtimeDetail.getRestStart().getTime();
                        } else {
                            if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                                longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                            }
                        }
                    } //update bvy satrya 2013-05-06
                    // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                    else if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() == 0 && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes() == 0) {
                        if (overtimeDetail.getRestStart() != null) {
                            longSchldBreakOut = overtimeDetail.getRestStart().getTime();
                        } else {
                            if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                                longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                            }
                        }
                    } else if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                        longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                    }
                } else {
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                        longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                    }
                }
                //menentukan break IN
                //update by satrya 2012-08-31
                //update by satrya 2012-12-09 penambahan overtime
                if (overtimeDetail.getOID() != 0) {
                    if (sSymbol.equalsIgnoreCase("OFF")) {
                        if (overtimeDetail.getRestStart() != null && dtRestEndOt != null) {
                            longSchldBreakIn = dtRestEndOt.getTime();
                        } else {
                            if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()
                                        && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() == 0 && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes() == 0) {
                                    longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                                } else {
                                    longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                                }
                            }
                        }
                    } //update bvy satrya 2013-05-06
                    // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                    else if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() == 0 && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes() == 0) {
                        if (overtimeDetail.getRestStart() != null && dtRestEndOt != null) {
                            longSchldBreakIn = dtRestEndOt.getTime();
                        } else {
                            if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()
                                        && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() == 0 && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes() == 0) {
                                    longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                                } else {
                                    longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                                }
                            }
                        }
                    } else if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                        if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
                            longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                        } else {
                            longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                        }
                    }
                } else {
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                        if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
                            longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                        } else {
                            longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                        }
                    }
                }


                //result = getPeriodAndTableIndexVer2(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, periodId, employeeId, presence, presenceDate);
                //update by satrya 2012-09-03
                //result = getPeriodAndTableIndexVer2(prevPeriod,currentPeriod,nextPeriod,rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, periodId, employeeId, presence, presenceDate);
                //update by devin 2014-02-24
                result = getPeriodAndTableIndexVer2(prevPeriod, currentPeriod, nextPeriod, rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, employeeId, presence, presenceDate, longSchldBreakOutOvertime, longSchldBreakInOvertime);
                //result = getPeriodAndTableIndexVer2(prevPeriod, currentPeriod, nextPeriod, rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, employeeId, presence, presenceDate);

            }


            // jika resultset adalah null  
            if (rsNull) {
                //result = getPeriodAndTableIndexVer2(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, periodId, employeeId, presence, presenceDate);
                //update by satrya 2012-09-03
                //result = getPeriodAndTableIndexVer2(prevPeriod,currentPeriod,nextPeriod,rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, periodId, employeeId, presence, presenceDate);
                //update by devin 2014-02-24
                result = getPeriodAndTableIndexVer2(prevPeriod, currentPeriod, nextPeriod, rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, employeeId, presence, presenceDate, longSchldBreakOutOvertime, longSchldBreakInOvertime);
                //result = getPeriodAndTableIndexVer2(prevPeriod, currentPeriod, nextPeriod, rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, employeeId, presence, presenceDate);

            }

            return result;
        } catch (Exception e) {
            System.out.println("getFieldIndexWillUpdated Exception : " + e.toString());
            return new Vector(1, 1);
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * create by satrya 2013-12-21 Keterangan: untuk mencari schedule yg tanpa
     * overtime
     *
     * @param prevPeriod
     * @param currentPeriod
     * @param nextPeriod
     * @param employeeId
     * @param presence
     * @param presenceDate
     * @return
     */
    public static Vector getFieldIndexWillUpdatedNoOvertime(Period prevPeriod, Period currentPeriod, Period nextPeriod, long employeeId, Presence presence, Date presenceDate) {

        Vector result = new Vector();
        DBResultSet dbrs = null;
        int idxFieldName = getIdxNameOfTableBySelectedDate(presenceDate);
        if (currentPeriod == null) {
            new Vector(1, 1);
        }
        try {

            String sql = "SELECT SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    //update by satrya 2012-08-10
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]
                    //update by satrya 2013-08-12
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL]
                    //end
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " LEFT JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM2"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]
                    + " = SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + currentPeriod.getOID() //update by satrya 2012-09-03
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

            //System.out.println("getFieldIndexWillUpdated : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int intYear = presenceDate.getYear();
            int intMonth = presenceDate.getMonth();
            int intDate = presenceDate.getDate();

            long longSchld1stIn = 0;
            long longSchld1stOut = 0;
            long longSchld2ndIn = 0;
            long longSchld2ndOut = 0;
            //update by satrya 2012-08-10
            long longSchldBreakIn = 0;
            long longSchldBreakOut = 0;

            boolean rsNull = true;

            long lSelectedDateFrom = presenceDate.getTime();
            long lSelectedDateTo = presenceDate.getTime();
            Date selectedDateFrom = new Date(lSelectedDateFrom);
            Date selectedDateTo = new Date(lSelectedDateTo);
            selectedDateFrom.setHours(0);
            selectedDateFrom.setMinutes(0);
            selectedDateFrom.setSeconds(0);
            selectedDateTo.setHours(23);
            selectedDateTo.setMinutes(59);
            selectedDateTo.setSeconds(59);
            //System.out.println("");                

            // --- start of iterasi ---
            while (rs.next()) {
                rsNull = false;

                String sSymbol = rs.getString(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL]);

                if (rs.getTime(1) != null && rs.getTime(2) != null && rs.getTime(1).getHours() != 0 && rs.getTime(2).getHours() != 0 && rs.getTime(1).getHours() >= rs.getTime(2).getHours()) {
                    selectedDateFrom.setTime(selectedDateFrom.getTime() - 24 * 60 * 60 * 1000);
                    selectedDateTo.setTime(selectedDateTo.getTime() + 24 * 60 * 60 * 1000);

                } else {
                    selectedDateFrom.setTime(selectedDateFrom.getTime());
                    selectedDateTo.setTime(selectedDateTo.getTime());


                }

                if (rs.getTime(1) != null) {
                    longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                } else if (rs.getTime(1) != null && rs.getTime(1).getHours() == 0 && rs.getTime(1).getMinutes() == 0) {
                    if (rs.getTime(1) != null) {
                        longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                    }
                }


                // first schedule OUT
                if (rs.getTime(2) != null) {
                    if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                        longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                    } else {
                        longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                    }

                } // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                else if (rs.getTime(2) != null && rs.getTime(2).getHours() == 0 && rs.getTime(2).getMinutes() == 0) {
                    if (rs.getTime(2) != null) {
                        if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                            longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                        } else {
                            longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                        }

                    }
                }


                // second schedule IN
                if (rs.getTime(3) != null) {
                    longSchld2ndIn = (new Date(intYear, intMonth, intDate, rs.getTime(3).getHours(), rs.getTime(3).getMinutes(), rs.getTime(3).getSeconds())).getTime();
                }

                // second schedule OUT
                if (rs.getTime(4) != null) {
                    //update by ramayu 2012-07-11
                    if (rs.getTime(3).getHours() < rs.getTime(4).getHours()) {
                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime();
                    } else {
                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                    }
                }

                //menentukan break OUT               
                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                    longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                }

                //menentukan break IN
                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
                        longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                    } else {
                        longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                    }
                }
                //test
                result = getPeriodAndTableIndexNoOvertime(prevPeriod, currentPeriod, nextPeriod, rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, employeeId, presence, presenceDate);
            }
            // jika resultset adalah null  
            if (rsNull) {
                result = getPeriodAndTableIndexNoOvertime(prevPeriod, currentPeriod, nextPeriod, rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, employeeId, presence, presenceDate);
            }
            return result;
        } catch (Exception e) {
            System.out.println("getFieldIndexWillUpdated Exception : " + e.toString());
            return new Vector(1, 1);
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    //update by satrya 2012-07-02
    //untuk manual registration
    /**
     * Keterangan : cek schedule baik IN,OUT,BO,BI untuk manual registration
     *
     * @param prevPeriod
     * @param currentPeriod
     * @param nextPeriod
     * @param employeeId
     * @param presence
     * @param presenceDate
     * @param departementId
     * @return
     */
    public static Vector getFieldIndexWillUpdatedVer2(Period prevPeriod, Period currentPeriod, Period nextPeriod, long employeeId, Presence presence, Date presenceDate, long departementId) {

        Vector result = new Vector();
        DBResultSet dbrs = null;
        int idxFieldName = getIdxNameOfTableBySelectedDate(presenceDate);
        if (currentPeriod == null) {
            new Vector(1, 1);
        }
        try {

            String sql = "SELECT SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    //update by satrya 2012-08-10
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]
                    //update by satrya 2012-12-09
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL]
                    //end
                    + ", SCHCAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_CATEGORY_TYPE]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " INNER JOIN " + PstScheduleCategory.TBL_HR_SCHEDULE_CATEGORY + " AS SCHCAT ON SCHCAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_SCHEDULE_CATEGORY_ID] + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_CATEGORY_ID]
                    + " LEFT JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM2"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]
                    + " = SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID];
            if (departementId != 0) {
                sql = sql + " INNER JOIN " + PstEmployee.TBL_HR_EMPLOYEE + " AS EMP ";
            }
            sql = sql + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + currentPeriod.getOID()
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;
            if (departementId != 0) {
                sql = sql + " AND EMP. " + PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID] + " = " + departementId;
            }

            //System.out.println("getFieldIndexWillUpdated : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int intYear = presenceDate.getYear();
            int intMonth = presenceDate.getMonth();
            int intDate = presenceDate.getDate();

            long longSchld1stIn = 0;
            long longSchld1stOut = 0;
            long longSchld2ndIn = 0;
            long longSchld2ndOut = 0;
            long longSchldBreakIn = 0;
            long longSchldBreakOut = 0;
            //update by devin 2014-02-24
            long longSchldBreakInOvertime = 0;
            long longSchldBreakOutOvertime = 0;
            boolean rsNull = true;
////update by satrya 2012-12-09
            OvertimeDetail overtimeDetail = new OvertimeDetail();
            //update by satrya 2013-08-12
            Date dtRestEndOt = null;
            //System.out.println("");    
            long lSelectedDateFrom = presenceDate.getTime();
            long lSelectedDateTo = presenceDate.getTime();
            Date selectedDateFrom = new Date(lSelectedDateFrom);
            Date selectedDateTo = new Date(lSelectedDateTo);
            selectedDateFrom.setHours(0);
            selectedDateFrom.setMinutes(0);
            selectedDateFrom.setSeconds(0);
            selectedDateTo.setHours(23);
            selectedDateTo.setMinutes(59);
            selectedDateTo.setSeconds(59);

            //update by satrya 2013-06-18

            // Hashtable hasOvertimeExist = new Hashtable();

            // Hashtable hasOvertimeExist = PstOvertimeDetail.getListOvertimeExist(0, 0, 0, 0, "", selectedDateFrom, selectedDateTo, 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");

            //mencari jika ada schedulenya yg cross day
//             Date selectedDateYetserday = selectedDateFrom;
//              selectedDateYetserday.setTime(selectedDateFrom.getTime() - 24*60*60*1000);
//              Date selectedDateTommorow = selectedDateTo;
//              selectedDateTommorow.setTime(selectedDateTo.getTime() + 24*60*60*1000);
//             Hashtable hasOvertimeExistIfCrossDay = PstOvertimeDetail.getListOvertimeExist(0, 0, 0, 0, "", selectedDateYetserday, selectedDateTommorow, 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");
            // --- start of iterasi ---
            while (rs.next()) {
                rsNull = false;
                String sSymbol = rs.getString(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL]);
                // first schedule IN
                //update by satrya 2012-12-10
                //update by satrya 2013-06-20
                //mencari hari yg sebelumnya,spa tau ada cross days
                //karna loopnya hanya sekali saja
                if (rs.getTime(1) != null && rs.getTime(2) != null && rs.getTime(1).getHours() != 0 && rs.getTime(2).getHours() != 0 && rs.getTime(1).getHours() >= rs.getTime(2).getHours()) {
                //if (rs.getTime(1) != null && rs.getTime(2) != null  && rs.getTime(1).getHours() >= rs.getTime(2).getHours()) {
                selectedDateFrom.setTime(selectedDateFrom.getTime() - 24 * 60 * 60 * 1000);
                    selectedDateTo.setTime(selectedDateTo.getTime() + 24 * 60 * 60 * 1000);
                    Hashtable hasOvertimeExist = PstOvertimeDetail.getListOvertimeExistPerEmpId(0, 0, 0, 0, "", selectedDateFrom, selectedDateTo, 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");
                    if (hasOvertimeExist.get(employeeId) != null) {
                        long startOt = 0;
                        long endOt = 0;
                        long restStart = 0;
                        long restEnd = 0;
                        OvertimeTblExis overtimeTblExis = (OvertimeTblExis) hasOvertimeExist.get(employeeId);

                        for (int indOt = 0; indOt < overtimeTblExis.sizeStartDate(); indOt++) {
                            Date dtStart = overtimeTblExis.getStartDate(indOt);
                            if (dtStart != null && startOt < dtStart.getTime()) {
                                startOt = dtStart.getTime();
                            }

                        }
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeEndDate(); indEnd++) {
                            Date dtEnd = overtimeTblExis.getEndDate(indEnd);
                            if (dtEnd != null && dtEnd.getTime() > endOt) {
                                endOt = dtEnd.getTime();
                            }
                        }
                        //istirahat mulai
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeRestStart(); indEnd++) {
                            Date dtRestStart = overtimeTblExis.getRestStart(indEnd);
                            if (dtRestStart != null && dtRestStart.getTime() > restStart) {
                                restStart = dtRestStart.getTime();
                            }
                        }
                        //istirahat selesai
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeRestEnd(); indEnd++) {
                            Date dtRestEnd = overtimeTblExis.getRestEnd(indEnd);
                            if (dtRestEnd != null && dtRestEnd.getTime() > restEnd) {
                                restEnd = dtRestEnd.getTime();
                            }
                        }
                        if (startOt != 0 && endOt != 0) {
                            overtimeDetail.setDateFrom(new Date(startOt));
                            overtimeDetail.setDateTo(new Date(endOt));
                            overtimeDetail.setOID(overtimeTblExis.getOvertimeDetailId());
                            dtRestEndOt = new Date(restEnd);
                        }

                    }

                } else {
                    selectedDateFrom.setTime(selectedDateFrom.getTime());
                    selectedDateTo.setTime(selectedDateTo.getTime());
                    Hashtable hasOvertimeExist = PstOvertimeDetail.getListOvertimeExistPerEmpId(0, 0, 0, 0, "", selectedDateFrom, selectedDateTo, 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");
                    if (hasOvertimeExist != null && hasOvertimeExist.get(employeeId) != null) {
                        long startOt = 0;
                        long endOt = 0;
                        long restStart = 0;
                        long restEnd = 0;
                        OvertimeTblExis overtimeTblExis = (OvertimeTblExis) hasOvertimeExist.get(employeeId);

                        for (int indOt = 0; indOt < overtimeTblExis.sizeStartDate(); indOt++) {
                            Date dtStart = overtimeTblExis.getStartDate(indOt);
                            if (dtStart != null && (startOt == 0 || dtStart.getTime() < startOt)) {
                                startOt = dtStart.getTime();
                            }

                        }
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeEndDate(); indEnd++) {
                            Date dtEnd = overtimeTblExis.getEndDate(indEnd);
                            if (dtEnd != null && dtEnd.getTime() > endOt) {
                                endOt = dtEnd.getTime();
                            }
                        }
                        //istirahat mulai
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeRestStart(); indEnd++) {
                            Date dtRestStart = overtimeTblExis.getRestStart(indEnd);
                            if (dtRestStart != null && dtRestStart.getTime() > restStart) {
                                restStart = dtRestStart.getTime();
                            }
                        }
                        //istirahat selesai
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeRestEnd(); indEnd++) {
                            Date dtRestEnd = overtimeTblExis.getRestEnd(indEnd);
                            if (dtRestEnd != null && dtRestEnd.getTime() > restEnd) {
                                restEnd = dtRestEnd.getTime();
                            }
                        }
                        if (startOt != 0 && endOt != 0) {
                            overtimeDetail.setDateFrom(new Date(startOt));
                            overtimeDetail.setDateTo(new Date(endOt));
                            overtimeDetail.setOID(overtimeTblExis.getOvertimeDetailId());
                            if (restStart != 0) {
                                overtimeDetail.setRestStart(new Date(restStart));
                            } else {
                                overtimeDetail.setRestStart(null);
                            }
                            if (restEnd != 0) {
                                dtRestEndOt = (new Date(restEnd));
                            } else {
                                dtRestEndOt = null;
                            }
                            //dtRestEndOt = new Date(restEnd);
                        }

                    }

                }
//         if(hasOvertimeExist!=null && hasOvertimeExist.size()==0 && hasOvertimeExist.get(selectedDateFrom)==null){
//            Vector listCekOvertime = PstOvertimeDetail.getListOvertimeExist(0, 0, 0, 0, "", selectedDateFrom, selectedDateTo, 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");
//            //Vector listCekOvertime = PstOvertimeDetail.listOvertimeOverlap(0, 0, 1, 0, "", selectedDateFrom, selectedDateTo, 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");
//            
//            if (listCekOvertime != null && listCekOvertime.size() > 0) {
//                overtimeDetail = (OvertimeDetail) listCekOvertime.get(0);
//                hasOvertimeExist.put(selectedDateFrom, selectedDateTo);
//            }
//         }
                if (overtimeDetail.getOID() != 0) {

                    if (sSymbol.equalsIgnoreCase("OFF")) {
                        if (overtimeDetail.getDateFrom() != null) {
                            longSchld1stIn = overtimeDetail.getDateFrom().getTime();
                        } else {
                            if (rs.getTime(1) != null) {
                                longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                            }
                        }
                    } //update bvy satrya 2013-05-06
                    // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                    //menentukan IN
                    else if (rs.getTime(1) != null && rs.getTime(1).getHours() == 0 && rs.getTime(1).getMinutes() == 0) {
                        if (overtimeDetail.getDateFrom() != null) {
                            longSchld1stIn = overtimeDetail.getDateFrom().getTime();
                        } else {
                            if (rs.getTime(1) != null) {
                                longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                            }
                        }
                    } else if (rs.getTime(1) != null && overtimeDetail.getDateFrom() != null && overtimeDetail.getDateFrom().getHours() < rs.getTime(1).getHours()) {
                        longSchld1stIn = overtimeDetail.getDateFrom().getTime();
                    } else {
                        if (rs.getTime(1) != null) {
                            longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                        }
                    }
                } else {
                    if (rs.getTime(1) != null) {
                        longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                    }
                }



                // first schedule OUT
                if (overtimeDetail.getOID() != 0) {
                    if (sSymbol.equalsIgnoreCase("OFF")) {
                        if (overtimeDetail.getDateTo() != null) {
                            longSchld1stOut = overtimeDetail.getDateTo().getTime();
                        } else {
                            if (rs.getTime(2) != null) {
                                //update by ramayu 2012-07-11
                                //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
                                if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                                    longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                                } else {
                                    longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                                }

                            }
                        }
                    } //update bvy satrya 2013-05-06
                    // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                    else if (rs.getTime(2) != null && rs.getTime(2).getHours() == 0 && rs.getTime(2).getMinutes() == 0) {
                        if (overtimeDetail.getDateTo() != null) {
                            longSchld1stOut = overtimeDetail.getDateTo().getTime();
                        } else {
                            if (rs.getTime(2) != null) {
                                //update by ramayu 2012-07-11
                                //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
                                if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                                    longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                                } else {
                                    longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                                }

                            }
                        }
                    } else if (rs.getTime(2) != null && rs.getTime(1).getHours() <= rs.getTime(2).getHours() && overtimeDetail.getDateTo() != null && overtimeDetail.getDateTo().getHours() > rs.getTime(2).getHours()) {
                        longSchld1stOut = overtimeDetail.getDateTo().getTime();
                    } else {

                        if (rs.getTime(2) != null) {
                            //update by ramayu 2012-07-11
                            //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
                            if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                                longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                            } else {
                                longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                            }

                        }
                    }
                } else {
                    if (rs.getTime(2) != null) {
                        //update by ramayu 2012-07-11
                        //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
                        if (rs.getTime(1).getHours() == 0 && rs.getTime(2).getHours() == 0) {
                            longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();

                        } //UPDATE BY DEVIN 2014-02-26 karena jika jamnya sama misalkan jam 07.00-07.00 maka dia itu crossday if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                        else if (rs.getTime(1).getHours() < rs.getTime(2).getHours()) {
                            longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                        } else {
                            longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                        }

                    }
                }



                // second schedule IN
                if (rs.getTime(3) != null) {
                    longSchld2ndIn = (new Date(intYear, intMonth, intDate, rs.getTime(3).getHours(), rs.getTime(3).getMinutes(), rs.getTime(3).getSeconds())).getTime();
                }

                // second schedule OUT
                if (rs.getTime(4) != null) {
                    //update by ramayu 2012-07-11
                    if (rs.getTime(3).getHours() < rs.getTime(4).getHours()) {
                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime();
                    } else {
                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                    }

                }
                //update by satrya 2012-08-10
                //menentukan break OUT
                //update by satrya 2012-12-09
                if (overtimeDetail.getOID() != 0) {

                    if (sSymbol.equalsIgnoreCase("OFF")) {
                        if (overtimeDetail.getRestStart() != null) {
                            longSchldBreakOut = overtimeDetail.getRestStart().getTime();
                        } else {
                            if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                                longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                            }
                        }
                    } //update bvy satrya 2013-05-06
                    // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                    //MENENTUKAN BREAK OUT
                    else if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() == 0 && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes() == 0) {
                        if (overtimeDetail.getRestStart() != null) {
                            longSchldBreakOut = overtimeDetail.getRestStart().getTime();
                        } else {
                            if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                                longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                            }
                        }
                    } else if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                        longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                    }
                } else {
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                        longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                    }
                }
                //menentukan break IN
                //update by satrya 2012-08-31
                //update by satrya 2012-12-09 penambahan overtime
                if (overtimeDetail.getOID() != 0) {
                    if (sSymbol.equalsIgnoreCase("OFF")) {
                        if (overtimeDetail.getRestStart() != null && dtRestEndOt != null) {
                            longSchldBreakIn = dtRestEndOt.getTime();
                        } else {
                            if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()
                                        && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() == 0 && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes() == 0) {
                                    longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                                } else {
                                    longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                                }
                            }
                        }
                    } //update bvy satrya 2013-05-06
                    // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                    else if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() == 0 && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes() == 0) {
                        if (overtimeDetail.getRestStart() != null && dtRestEndOt != null) {
                            longSchldBreakIn = dtRestEndOt.getTime();
                        } else {
                            if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()
                                        && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() == 0 && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes() == 0) {
                                    longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                                } else {
                                    longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                                }
                            }
                        }
                    } else if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                        if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
                            longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                        } else {
                            longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                        }
                    }
                } else {
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                        if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
                            longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                        } else {
                            longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                        }
                    }
                }


                //result = getPeriodAndTableIndexVer2(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, periodId, employeeId, presence, presenceDate);
                //update by satrya 2012-09-03
                //update by devin 2014-02-24
                //result = getPeriodAndTableIndexVer2(prevPeriod, currentPeriod, nextPeriod, rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, employeeId, presence, presenceDate);
                result = getPeriodAndTableIndexVer2(prevPeriod, currentPeriod, nextPeriod, rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, employeeId, presence, presenceDate, longSchldBreakOutOvertime, longSchldBreakInOvertime);
            }


            // jika resultset adalah null  
            if (rsNull) {
                //result = getPeriodAndTableIndexVer2(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, periodId, employeeId, presence, presenceDate);
                //update by satrya 2012-09-03
                //update by devin 2014-02-24
                //result = getPeriodAndTableIndexVer2(prevPeriod, currentPeriod, nextPeriod, rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, employeeId, presence, presenceDate);
                result = getPeriodAndTableIndexVer2(prevPeriod, currentPeriod, nextPeriod, rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, longSchldBreakOut, longSchldBreakIn, employeeId, presence, presenceDate, longSchldBreakOutOvertime, longSchldBreakInOvertime);

            }

            return result;
        } catch (Exception e) {
            System.out.println("getFieldIndexWillUpdated Exception : " + e.toString());
            return new Vector(1, 1);
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * create by satrya 2013-12-04 keterangan: untuk mencari schedule jika
     * schedulenya off
     *
     * @param currentPeriod
     * @param employeeId
     * @param presence
     * @param presenceDate
     * @param departementId
     * @return
     */
    public static Vector getFieldIndexWillScheduleOff(Period currentPeriod, Period prevPeriod, long employeeId, Presence presence, Date presenceDate) {

        Vector result = new Vector();
        DBResultSet dbrs = null;
        int idxFieldName = getIdxNameOfTableBySelectedDate(presenceDate);
        if (currentPeriod == null || prevPeriod == null) {
            return new Vector(1, 1);
        }
        long updatePeriodId = 0;
        if (DateCalc.dayDifference(presenceDate, currentPeriod.getStartDate()) == 0) {
            result.add(String.valueOf(prevPeriod.getOID()));
            updatePeriodId = prevPeriod.getOID();
        } else {
            result.add(String.valueOf(currentPeriod.getOID()));
            updatePeriodId = currentPeriod.getOID();
        }
        if (updatePeriodId == 0) {
            return new Vector();
        }
        try {

            String sql = "SELECT SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    //update by satrya 2012-08-10
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]
                    //update by satrya 2012-12-09
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL]
                    //end
                    + ", SCHCAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_CATEGORY_TYPE]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " INNER JOIN " + PstScheduleCategory.TBL_HR_SCHEDULE_CATEGORY + " AS SCHCAT ON SCHCAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_SCHEDULE_CATEGORY_ID] + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_CATEGORY_ID]
                    + " LEFT JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM2"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]
                    + " = SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID];

            sql = sql + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + updatePeriodId
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;


            //System.out.println("getFieldIndexWillUpdated : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int intYear = presenceDate.getYear();
            int intMonth = presenceDate.getMonth();
            int intDate = presenceDate.getDate();

            long longSchld1stIn = 0;
            long longSchld1stOut = 0;
            long longSchld2ndIn = 0;
            long longSchld2ndOut = 0;
            long longSchldBreakIn = 0;
            long longSchldBreakOut = 0;
            boolean rsNull = true;
////update by satrya 2012-12-09
            OvertimeDetail overtimeDetail = new OvertimeDetail();
            //update by satrya 2013-08-12
            Date dtRestEndOt = null;
            //System.out.println("");    
            long lSelectedDateFrom = presenceDate.getTime() - (1000 * 60 * 60 * 24);
            long lSelectedDateTo = presenceDate.getTime();
            Date selectedDateFrom = new Date(lSelectedDateFrom);
            Date selectedDateTo = new Date(lSelectedDateTo);
            selectedDateFrom.setHours(0);
            selectedDateFrom.setMinutes(0);
            selectedDateFrom.setSeconds(0);
            selectedDateTo.setHours(23);
            selectedDateTo.setMinutes(59);
            selectedDateTo.setSeconds(59);

            while (rs.next()) {
                rsNull = false;
                String sSymbol = rs.getString(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL]);

                if (rs.getTime(1) != null && rs.getTime(2) != null && rs.getTime(1).getHours() != 0 && rs.getTime(2).getHours() != 0 && rs.getTime(1).getHours() >= rs.getTime(2).getHours()) {
                    selectedDateFrom.setTime(selectedDateFrom.getTime() - 24 * 60 * 60 * 1000);
                    selectedDateTo.setTime(selectedDateTo.getTime() + 24 * 60 * 60 * 1000);
                    Hashtable hasOvertimeExist = PstOvertimeDetail.getListOvertimeExistPerEmpId(0, 0, 0, 0, "", selectedDateFrom, selectedDateTo, 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");
                    if (hasOvertimeExist.get(employeeId) != null) {
                        long startOt = 0;
                        long endOt = 0;
                        long restStart = 0;
                        long restEnd = 0;
                        OvertimeTblExis overtimeTblExis = (OvertimeTblExis) hasOvertimeExist.get(employeeId);

                        for (int indOt = 0; indOt < overtimeTblExis.sizeStartDate(); indOt++) {
                            Date dtStart = overtimeTblExis.getStartDate(indOt);
                            if (dtStart != null && startOt < dtStart.getTime()) {
                                startOt = dtStart.getTime();
                            }

                        }
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeEndDate(); indEnd++) {
                            Date dtEnd = overtimeTblExis.getEndDate(indEnd);
                            if (dtEnd != null && dtEnd.getTime() > endOt) {
                                endOt = dtEnd.getTime();
                            }
                        }
                        //istirahat mulai
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeRestStart(); indEnd++) {
                            Date dtRestStart = overtimeTblExis.getRestStart(indEnd);
                            if (dtRestStart != null && dtRestStart.getTime() > restStart) {
                                restStart = dtRestStart.getTime();
                            }
                        }
                        //istirahat selesai
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeRestEnd(); indEnd++) {
                            Date dtRestEnd = overtimeTblExis.getRestEnd(indEnd);
                            if (dtRestEnd != null && dtRestEnd.getTime() > restEnd) {
                                restEnd = dtRestEnd.getTime();
                            }
                        }
                        if (startOt != 0 && endOt != 0) {
                            overtimeDetail.setDateFrom(new Date(startOt));
                            overtimeDetail.setDateTo(new Date(endOt));
                            overtimeDetail.setOID(overtimeTblExis.getOvertimeDetailId());
                            dtRestEndOt = new Date(restEnd);
                        }

                    }

                } else {
                    selectedDateFrom.setTime(selectedDateFrom.getTime());
                    selectedDateTo.setTime(selectedDateTo.getTime());
                    Hashtable hasOvertimeExist = PstOvertimeDetail.getListOvertimeExistPerEmpId(0, 0, 0, 0, "", selectedDateFrom, selectedDateTo, 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");
                    if (hasOvertimeExist != null && hasOvertimeExist.get(employeeId) != null) {
                        long startOt = 0;
                        long endOt = 0;
                        long restStart = 0;
                        long restEnd = 0;
                        OvertimeTblExis overtimeTblExis = (OvertimeTblExis) hasOvertimeExist.get(employeeId);

                        for (int indOt = 0; indOt < overtimeTblExis.sizeStartDate(); indOt++) {
                            Date dtStart = overtimeTblExis.getStartDate(indOt);
                            if (dtStart != null && (startOt == 0 || dtStart.getTime() < startOt)) {
                                startOt = dtStart.getTime();
                            }

                        }
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeEndDate(); indEnd++) {
                            Date dtEnd = overtimeTblExis.getEndDate(indEnd);
                            if (dtEnd != null && dtEnd.getTime() > endOt) {
                                endOt = dtEnd.getTime();
                            }
                        }
                        //istirahat mulai
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeRestStart(); indEnd++) {
                            Date dtRestStart = overtimeTblExis.getRestStart(indEnd);
                            if (dtRestStart != null && dtRestStart.getTime() > restStart) {
                                restStart = dtRestStart.getTime();
                            }
                        }
                        //istirahat selesai
                        for (int indEnd = 0; indEnd < overtimeTblExis.sizeRestEnd(); indEnd++) {
                            Date dtRestEnd = overtimeTblExis.getRestEnd(indEnd);
                            if (dtRestEnd != null && dtRestEnd.getTime() > restEnd) {
                                restEnd = dtRestEnd.getTime();
                            }
                        }
                        if (startOt != 0 && endOt != 0) {
                            overtimeDetail.setDateFrom(new Date(startOt));
                            overtimeDetail.setDateTo(new Date(endOt));
                            overtimeDetail.setOID(overtimeTblExis.getOvertimeDetailId());
                            if (restStart != 0) {
                                overtimeDetail.setRestStart(new Date(restStart));
                            } else {
                                overtimeDetail.setRestStart(null);
                            }
                            if (restEnd != 0) {
                                dtRestEndOt = (new Date(restEnd));
                            } else {
                                dtRestEndOt = null;
                            }
                            //dtRestEndOt = new Date(restEnd);
                        }

                    }

                }
                if (overtimeDetail.getOID() != 0) {

                    if (sSymbol.equalsIgnoreCase("OFF")) {
                        if (overtimeDetail.getDateFrom() != null) {
                            longSchld1stIn = overtimeDetail.getDateFrom().getTime();
                        } else {
                            if (rs.getTime(1) != null) {
                                longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                            }
                        }
                    } //update bvy satrya 2013-05-06
                    // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                    else if (rs.getTime(1) != null && rs.getTime(1).getHours() == 0 && rs.getTime(1).getMinutes() == 0) {
                        if (overtimeDetail.getDateFrom() != null) {
                            longSchld1stIn = overtimeDetail.getDateFrom().getTime();
                        } else {
                            if (rs.getTime(1) != null) {
                                longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                            }
                        }
                    } else if (rs.getTime(1) != null && overtimeDetail.getDateFrom() != null && overtimeDetail.getDateFrom().getHours() < rs.getTime(1).getHours()) {
                        longSchld1stIn = overtimeDetail.getDateFrom().getTime();
                    } else {
                        if (rs.getTime(1) != null) {
                            longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                        }
                    }
                } else {
                    if (rs.getTime(1) != null) {
                        longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                    }
                }



                // first schedule OUT
                if (overtimeDetail.getOID() != 0) {
                    if (sSymbol.equalsIgnoreCase("OFF")) {
                        if (overtimeDetail.getDateTo() != null) {
                            longSchld1stOut = overtimeDetail.getDateTo().getTime();
                        } else {
                            if (rs.getTime(2) != null) {
                                //update by ramayu 2012-07-11
                                //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
                                if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                                    longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                                } else {
                                    longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                                }

                            }
                        }
                    } //update bvy satrya 2013-05-06
                    // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                    else if (rs.getTime(2) != null && rs.getTime(2).getHours() == 0 && rs.getTime(2).getMinutes() == 0) {
                        if (overtimeDetail.getDateTo() != null) {
                            longSchld1stOut = overtimeDetail.getDateTo().getTime();
                        } else {
                            if (rs.getTime(2) != null) {
                                //update by ramayu 2012-07-11
                                //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
                                if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                                    longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                                } else {
                                    longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                                }

                            }
                        }
                    } else if (rs.getTime(2) != null && rs.getTime(1).getHours() <= rs.getTime(2).getHours() && overtimeDetail.getDateTo() != null && overtimeDetail.getDateTo().getHours() > rs.getTime(2).getHours()) {
                        longSchld1stOut = overtimeDetail.getDateTo().getTime();
                    } else {

                        if (rs.getTime(2) != null) {
                            //update by ramayu 2012-07-11
                            //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
                            if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                                longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                            } else {
                                longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                            }

                        }
                    }
                } else {
                    if (rs.getTime(2) != null) {
                        //update by ramayu 2012-07-11
                        //Formater.formatDate(rs.getTime(1), "kk:mm:ss")
                        if (rs.getTime(1).getHours() <= rs.getTime(2).getHours()) {
                            longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                        } else {
                            longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                        }

                    }
                }



                // second schedule IN
                if (rs.getTime(3) != null) {
                    longSchld2ndIn = (new Date(intYear, intMonth, intDate, rs.getTime(3).getHours(), rs.getTime(3).getMinutes(), rs.getTime(3).getSeconds())).getTime();
                }

                // second schedule OUT
                if (rs.getTime(4) != null) {
                    //update by ramayu 2012-07-11
                    if (rs.getTime(3).getHours() < rs.getTime(4).getHours()) {
                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime();
                    } else {
                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                    }

                }
                //update by satrya 2012-08-10
                //menentukan break OUT
                //update by satrya 2012-12-09
                if (overtimeDetail.getOID() != 0) {

                    if (sSymbol.equalsIgnoreCase("OFF")) {
                        if (overtimeDetail.getRestStart() != null) {
                            longSchldBreakOut = overtimeDetail.getRestStart().getTime();
                        } else {
                            if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                                longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                            }
                        }
                    } //update bvy satrya 2013-05-06
                    // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                    else if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() == 0 && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes() == 0) {
                        if (overtimeDetail.getRestStart() != null) {
                            longSchldBreakOut = overtimeDetail.getRestStart().getTime();
                        } else {
                            if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                                longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                            }
                        }
                    } else if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                        longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                    }
                } else {
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                        longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                    }
                }
                //menentukan break IN
                //update by satrya 2012-08-31
                //update by satrya 2012-12-09 penambahan overtime
                if (overtimeDetail.getOID() != 0) {
                    if (sSymbol.equalsIgnoreCase("OFF")) {
                        if (overtimeDetail.getRestStart() != null && dtRestEndOt != null) {
                            longSchldBreakIn = dtRestEndOt.getTime();
                        } else {
                            if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()
                                        && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() == 0 && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes() == 0) {
                                    longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                                } else {
                                    longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                                }
                            }
                        }
                    } //update bvy satrya 2013-05-06
                    // jika schIN dan Out 00 maka dianggap OFF/tidak ada schedule
                    else if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() == 0 && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes() == 0) {
                        if (overtimeDetail.getRestStart() != null && dtRestEndOt != null) {
                            longSchldBreakIn = dtRestEndOt.getTime();
                        } else {
                            if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()
                                        && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() == 0 && rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes() == 0) {
                                    longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                                } else {
                                    longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                                }
                            }
                        }
                    } else if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                        if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
                            longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                        } else {
                            longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                        }
                    }
                } else {
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                        if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
                            longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                        } else {
                            longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);

                        }
                    }
                }
                result.add(longSchld1stIn);
                result.add(longSchld1stOut);
                result.add(longSchld2ndIn);
                result.add(longSchld2ndOut);
                result.add(longSchldBreakOut);
                result.add(longSchldBreakIn);




            }

            return result;
        } catch (Exception e) {
            System.out.println("getSearchSch Exception : " + e.toString());
            return new Vector(1, 1);
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * get field index that will update
     *
     * @param periodId
     * @param employeeId
     * @param presenceStatus
     * @param idxFieldName
     * @return
     * @created by Edhy
     */
    public static int updateScheduleDataByPresence(long periodId, long employeeId, int idxFieldName, Date presenceDate) {
        int result = 0;
        //System.out.println("periodId : " + periodId + ", idxFieldName : " + idxFieldName);
        if (periodId != 0 && idxFieldName != -1) {
            DBResultSet dbrs = null;
            String strPresenceTime = "null";
            if (presenceDate != null) {
                strPresenceTime = "\"" + Formater.formatDate(presenceDate, "yyyy-MM-dd HH:mm:ss") + "\"";
            }
            try {
                String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                        + " SET " + PstEmpSchedule.fieldNames[idxFieldName]
                        + " = " + strPresenceTime
                        + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " = " + employeeId;

                //System.out.println("... updateScheduleDataByPresence on " + strPresenceTime);  
                //      System.out.println("updateScheduleDataByPresence : "+sql);  
                result = DBHandler.execUpdate(sql);
            } catch (Exception e) {
                System.out.println("Exc updateScheduleDataByPresence : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
                return result;
            }
        } else {
//            System.out.println("Index updated is -1");
            return result;
        }
    }

    /**
     * create by satrya 2013-07-10
     *
     * @param periodId
     * @param employeeId
     * @param schId
     * @param idxFieldName
     * @param presenceDate
     * @return
     */
    public static int updateScheduleDataByPresenceVer2(long periodId, long employeeId, long schId, int idxFieldName, Date presenceDate, int indDtSchedule) {
        int result = 0;
        //System.out.println("periodId : " + periodId + ", idxFieldName : " + idxFieldName);
        if (periodId != 0 && idxFieldName != -1) {
            DBResultSet dbrs = null;
            String strPresenceTime = "null";
            if (presenceDate != null) {
                strPresenceTime = "\"" + Formater.formatDate(presenceDate, "yyyy-MM-dd HH:mm:ss") + "\"";
            }
            try {
                String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                        + " SET " + PstEmpSchedule.fieldNames[idxFieldName]
                        + " = " + strPresenceTime
                        + "," + PstEmpSchedule.fieldNames[indDtSchedule]
                        + " = " + schId
                        + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " = " + employeeId;

                //System.out.println("... updateScheduleDataByPresence on " + strPresenceTime);  
                //      System.out.println("updateScheduleDataByPresence : "+sql);  
                result = DBHandler.execUpdate(sql);
            } catch (Exception e) {
                System.out.println("Exc updateScheduleDataByPresence : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
                return result;
            }
        } else {
//            System.out.println("Index updated is -1");
            return result;
        }
    }

    /**
     * Keterangan : untuk update schedule berdasarkan
     * updateScheduleDataByEmpScheduleId
     *
     * @param periodId
     * @param empScheduleId
     * @param idxFieldName
     * @param presenceDate
     * @return
     */
    public static int updateScheduleDataByEmpScheduleId(long periodId, long empScheduleId, int idxFieldName, Date presenceDate) {
        int result = 0;
        //System.out.println("periodId : " + periodId + ", idxFieldName : " + idxFieldName);
        if (periodId != 0 && idxFieldName != -1) {
            DBResultSet dbrs = null;
            String strPresenceTime = "null";
            if (presenceDate != null) {
                strPresenceTime = "\"" + Formater.formatDate(presenceDate, "yyyy-MM-dd HH:mm:ss") + "\"";
            }
            try {
                String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                        + " SET " + PstEmpSchedule.fieldNames[idxFieldName]
                        + " = " + strPresenceTime
                        + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID]
                        + " = " + empScheduleId;

                //System.out.println("... updateScheduleDataByPresence on " + strPresenceTime);  
                //      System.out.println("updateScheduleDataByPresence : "+sql);  
                result = DBHandler.execUpdate(sql);
            } catch (Exception e) {
                System.out.println("Exc updateScheduleDataByEmpScheduleId : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
                return result;
            }
        } else {
            return result;
        }
    }

    public static int resetScheduleData(long periodId) {
        int result = 0;
        //System.out.println("periodId : " + periodId + ", idxFieldName : " + idxFieldName);
        if (periodId != 0) {
            DBResultSet dbrs = null;

            try {
                String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " SET ";

                for (int i = 0; i < 31; i++) {
                    //update by satrya 2012-06-28
                    sql = sql + " " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN1 + i] + " = null," + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT1 + i] + " = null," + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2ND1 + i] + " = null," + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2ND1 + i] + " = null," + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1 + i] + " = " + STATUS_PRESENCE_NOT_PROCESSED + ",";

                }
                int maxIdx = sql.length();
                sql = sql.substring(0, maxIdx - 1);



                sql = sql + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId;

                //System.out.println("... updateScheduleDataByPresence on " + strPresenceTime);  
                System.out.println("updateScheduleDataByPresence : " + sql);
                result = DBHandler.execUpdate(sql);
            } catch (Exception e) {
                System.out.println("Exc updateScheduleDataByPresence : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
                return result;
            }
        } else {
//            System.out.println("Index updated is -1");
            return result;
        }

    }

    /**
     * Keterangan : untuk mereset schedule
     *
     * @param sPayrollNum
     * @param sFullName
     * @param periodId
     * @param SelectedDate
     * @return
     */
    public static int resetScheduleData(String sPayrollNum, String sFullName, long periodId, Date SelectedDate) {
//update by satrya 2012-09-09
        int result = 0;
        if (periodId != 0) {

            DBResultSet dbrs = null;
            int idxFieldName = getIdxNameOfTableBySelectedDate(SelectedDate);
            try {
                String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS HS "
                        + " INNER JOIN " + PstEmployee.TBL_HR_EMPLOYEE + " AS HE  "
                        + " ON (HS." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " = HE." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID] + ")"
                        + " SET "
                        //for (int i = 0; i < idxFieldName; i++) {
                        //+ "HP."+ PstPresence.fieldNames[PstPresence.FLD_STATUS] + " = " + Presence.STATUS_TBD_IN_OUT +"," //untuk set secara default di presence STATUS TBD
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_IN + idxFieldName - 1] + " = null,"
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_OUT + idxFieldName - 1] + " = null,"
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_IN + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1] + " = null,"
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_OUT + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1] + " = null,"
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1] + " = " + STATUS_PRESENCE_NOT_PROCESSED + ","
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldName - 1] + " = " + STATUS_PRESENCE_NOT_PROCESSED + ","
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1] + " = " + STATUS_PRESENCE_NOT_PROCESSED + ",";

                int maxIdx = sql.length();
                sql = sql.substring(0, maxIdx - 1);

                sql = sql + " WHERE HS." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId;


                if (sPayrollNum != null && sPayrollNum.length() > 0) {
                    sql = sql + " AND HE." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_NUM]
                            + " = " + "\"" + sPayrollNum + "\"";
                }
                if (sFullName != null && sFullName.length() > 0) {
                    sql = sql + " AND HE." + PstEmployee.fieldNames[PstEmployee.FLD_FULL_NAME]
                            + " = " + "\"" + sFullName + "\"";
                }

                //System.out.println("updateScheduleDataByPresence : " + sql);
                result = DBHandler.execUpdate(sql);
            } catch (Exception e) {
                System.out.println("Exc updateScheduleDataByPresence : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
                return result;
            }
        } else {
            return result;
        }
    }
    //update by satrya 2012-09-09

    /**
     * Keterangan: untuk reset schedule di report daily create by satrya
     * 2013-05-28
     *
     * @param empId
     * @param periodId
     * @param SelectedDate
     * @return
     */
    public static int resetScheduleDataByEmployeeId(long empId, long periodId, Date SelectedDate) {
//update by satrya 2012-09-09
        int result = 0;
        if (periodId != 0) {

            DBResultSet dbrs = null;
            int idxFieldName = getIdxNameOfTableBySelectedDate(SelectedDate);
            try {
                String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS HS "
                        + " SET "
                        //for (int i = 0; i < idxFieldName; i++) {
                        //+ "HP."+ PstPresence.fieldNames[PstPresence.FLD_STATUS] + " = " + Presence.STATUS_TBD_IN_OUT +"," //untuk set secara default di presence STATUS TBD
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_IN + idxFieldName - 1] + " = null,"
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_OUT + idxFieldName - 1] + " = null,"
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_IN + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1] + " = null,"
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_OUT + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1] + " = null,"
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1] + " = " + STATUS_PRESENCE_NOT_PROCESSED + ","
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1] + " = " + STATUS_PRESENCE_NOT_PROCESSED + ",";

                int maxIdx = sql.length();
                sql = sql.substring(0, maxIdx - 1);

                sql = sql + " WHERE HS." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + "=" + empId;


                //System.out.println("updateScheduleDataByPresence : " + sql);
                result = DBHandler.execUpdate(sql);
            } catch (Exception e) {
                System.out.println("Exc updateScheduleDataByPresence : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
                return result;
            }
        } else {
            return result;
        }
    }

    /**
     *
     * @param selectFromDate
     * @param selectToDate
     * @param sPayrollNum
     * @param sFullName
     * @desc: untuk melakukan reset schedule berdasarkan DataFromDateTo Date
     * @return
     */
    public static int resetScheduleDataFromDateToDate(Date selectFromDate, Date selectToDate, String sPayrollNum, String sFullName) {

        int result = 0;
        //long periodId = 0;
        if (selectFromDate != null && selectToDate != null) {

            if (selectFromDate.getTime() > selectToDate.getTime()) {
                Date tempFromDate = selectFromDate;
                Date tempToDate = selectToDate;
                selectFromDate = tempToDate;
                selectToDate = tempFromDate;
            }
            long diffStartToFinish = selectToDate.getTime() - selectFromDate.getTime();

            if (diffStartToFinish >= 0) {

                int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                for (int i = 0; i <= itDate; i++) {
                    Date selectedDate = new Date(selectFromDate.getYear(), selectFromDate.getMonth(), (selectFromDate.getDate() + i));
                    // --- start presence data reset ---
                    long periodId = PstPeriod.getPeriodIdBySelectedDate(selectedDate);
                    PstEmpSchedule.resetScheduleData(sPayrollNum, sFullName, periodId, selectedDate);
                    PstPresence.resetPresenceData(sPayrollNum, sFullName, selectedDate);
                }
            }

        }
        return result;
    }

    /**
     * Keterangan: untuk reset menjadi TBD dlu, ini d gunakan di report daily
     * Create by satrya 2013-05-28
     *
     * @param selectFromDate
     * @param selectToDate
     * @param empId
     * @return
     */
    public static int resetScheduleDataFromDateToDateVer2(Date selectFromDate, Date selectToDate, long empId) {

        int result = 0;
        //long periodId = 0;
        if (selectFromDate != null && selectToDate != null) {

            if (selectFromDate.getTime() > selectToDate.getTime()) {
                Date tempFromDate = selectFromDate;
                Date tempToDate = selectToDate;
                selectFromDate = tempToDate;
                selectToDate = tempFromDate;
            }
            long diffStartToFinish = selectToDate.getTime() - selectFromDate.getTime();

            if (diffStartToFinish >= 0) {

                int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                for (int i = 0; i <= itDate; i++) {
                    Date selectedDate = new Date(selectFromDate.getYear(), selectFromDate.getMonth(), (selectFromDate.getDate() + i));
                    // --- start presence data reset ---
                    long periodId = PstPeriod.getPeriodIdBySelectedDate(selectedDate);
                    PstEmpSchedule.resetScheduleDataByEmployeeId(empId, periodId, selectedDate);
                    PstPresence.resetPresenceDataVer2(empId, selectedDate);
                }
            }

        }
        return result;
    }

    /**
     * import data from present to emp schedule
     *
     * @return
     * @created by Edhy
     */
    public static void importDataFromPresence() {
        String whereClause = PstPresence.fieldNames[PstPresence.FLD_TRANSFERRED] + "=" + PstPresence.PRESENCE_NOT_TRANSFERRED;
        /*
         String whereClause = PstPresence.fieldNames[PstPresence.FLD_TRANSFERRED] + "=" + PstPresence.PRESENCE_NOT_TRANSFERRED +
         " AND " + PstPresence.fieldNames[PstPresence.FLD_EMPLOYEE_ID] + "=504404240100938940" + 
         " AND " + PstPresence.fieldNames[PstPresence.FLD_PRESENCE_ID] + "=504404244575122612";                                 
         */
        String orderBy = PstPresence.fieldNames[PstPresence.FLD_PRESENCE_DATETIME];
        Vector listPresence = PstPresence.list(0, 0, whereClause, orderBy);
        if (listPresence != null && listPresence.size() > 0) {
            int maxPresence = listPresence.size();
            for (int i = 0; i < maxPresence; i++) {
                Presence presence = (Presence) listPresence.get(i);

                // update presence (IN or OUT) on employee schedule  
                long periodId = PstPeriod.getPeriodIdBySelectedDate(presence.getPresenceDatetime());
                //int updatedFieldIndex = getFieldIndexWillUpdated(periodId, presence.getEmployeeId(), presence.getStatus(), presence.getPresenceDatetime());                                

                int updatedFieldIndex = -1;
                long updatePeriodId = periodId;
                Vector vectFieldIndex = getFieldIndexWillUpdated(periodId, presence.getEmployeeId(), presence.getStatus(), presence.getPresenceDatetime());
                if (vectFieldIndex != null && vectFieldIndex.size() == 2) {
                    updatePeriodId = Long.parseLong(String.valueOf(vectFieldIndex.get(0)));
                    updatedFieldIndex = Integer.parseInt(String.valueOf(vectFieldIndex.get(1)));
                }

                int updateStatus = 0;
                try {
                    updateStatus = PstEmpSchedule.updateScheduleDataByPresence(updatePeriodId, presence.getEmployeeId(), updatedFieldIndex, presence.getPresenceDatetime());
                    if (updateStatus > 0) {
                        presence.setTransferred(PstPresence.PRESENCE_TRANSFERRED);
                        PstPresence.updateExc(presence);
                    }

                } catch (Exception e) {
                    System.out.println("Update Presence exc : " + e.toString());
                }

            }
        }
    }

    /**
     * import data from present to emp schedule
     *
     * @return
     * @created by Edhy
     */
    public static void importDataFromPresence(Date presenceDate) {
        String strPresenceDateFrom = "\"" + Formater.formatDate(presenceDate, "yyyy-MM-dd") + " 00:00:00\"";
        String strPresenceDateTo = "\"" + Formater.formatDate(presenceDate, "yyyy-MM-dd") + " 23:59:59\"";
        String whereClause = PstPresence.fieldNames[PstPresence.FLD_PRESENCE_DATETIME]
                + " BETWEEN " + strPresenceDateFrom + " AND " + strPresenceDateTo
                + " AND " + PstPresence.fieldNames[PstPresence.FLD_TRANSFERRED] + "=" + PstPresence.PRESENCE_NOT_TRANSFERRED;
        String orderBy = PstPresence.fieldNames[PstPresence.FLD_PRESENCE_DATETIME];
        Vector listPresence = PstPresence.list(0, 0, whereClause, orderBy);
        if (listPresence != null && listPresence.size() > 0) {
            int maxPresence = listPresence.size();
            for (int i = 0; i < maxPresence; i++) {
                Presence presence = (Presence) listPresence.get(i);

                // update presence (IN or OUT) on employee schedule  
                long periodId = PstPeriod.getPeriodIdBySelectedDate(presence.getPresenceDatetime());

                int updatedFieldIndex = -1;
                long updatePeriodId = periodId;
                Vector vectFieldIndex = getFieldIndexWillUpdated(periodId, presence.getEmployeeId(), presence.getStatus(), presence.getPresenceDatetime());
                if (vectFieldIndex != null && vectFieldIndex.size() == 2) {
                    updatePeriodId = Long.parseLong(String.valueOf(vectFieldIndex.get(0)));
                    updatedFieldIndex = Integer.parseInt(String.valueOf(vectFieldIndex.get(1)));
//                    System.out.println("updatePeriodId : " + updatePeriodId + ", updatedFieldIndex : " + updatedFieldIndex);
                }

                int updateStatus = 0;
                try {
                    updateStatus = PstEmpSchedule.updateScheduleDataByPresence(updatePeriodId, presence.getEmployeeId(), updatedFieldIndex, presence.getPresenceDatetime());
                    if (updateStatus > 0) {
                        presence.setTransferred(PstPresence.PRESENCE_TRANSFERRED);
                        PstPresence.updateExc(presence);

                        // process on absence and lateness
                        // absence dilakukan sebelum lateness karena lateness itu ada jika tidak absence
                        com.dimata.harisma.utility.service.presence.AbsenceAnalyser.processEmployeeAbsence(presence.getPresenceDatetime(), presence.getEmployeeId());
                        com.dimata.harisma.utility.service.presence.LatenessAnalyser.processEmployeeLateness(presence.getPresenceDatetime(), presence.getEmployeeId());
                    }

                } catch (Exception e) {
                    System.out.println("importDataFromPresence(Date presenceDate) exc : " + e.toString());
                }
            }
        }
    }

    /**
     * update reason and status of employee schedule based on absence management
     * data
     *
     * @param empScheduleOid
     * @param vectAbsenceDate
     * @param vectAbsenceReason
     * @param vectAbsenceNotes
     * @created by Edhy
     * @return
     */
    public static int updateScheduleByAbsenceManagement(long empScheduleOid, Vector vectAbsenceDate, Vector vectAbsenceReason, Vector vectAbsenceNotes) {

        int result = 0;

        if (vectAbsenceDate != null && vectAbsenceDate.size() > 0) {

            String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " SET ";

            // generate update query value
            int maxAbsenceDate = vectAbsenceDate.size();
            String sqlUpdate = "";

            for (int i = 0; i < maxAbsenceDate; i++) {

                int intAbsenceDate = Integer.parseInt(String.valueOf(vectAbsenceDate.get(i)));
                int intAbsenceReason = Integer.parseInt(String.valueOf(vectAbsenceReason.get(i)));

                Reason reason = new Reason();
                String whereReason = PstReason.fieldNames[PstReason.FLD_NO] + " = " + intAbsenceReason;

                Vector listReason = PstReason.list(0, 0, whereReason, null);
                long schId = 0;

                if (listReason != null && listReason.size() > 0) {

                    reason = (Reason) listReason.get(0);
                    schId = reason.getScheduleId();

                }

                String strAbsenceNote = String.valueOf(vectAbsenceNotes.get(i));
                sqlUpdate = sqlUpdate + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + intAbsenceDate - 1] + " = " + intAbsenceReason
                        + "," + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_NOTE + intAbsenceDate - 1] + " = \"" + strAbsenceNote + "\",";

                if (schId != 0) {

                    sqlUpdate = sqlUpdate + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + intAbsenceDate - 1] + " = " + reason.getScheduleId() + ","
                            + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + intAbsenceDate - 1] + " = " + PstEmpSchedule.STATUS_PRESENCE_OK + ",";
                } else {
                    sqlUpdate = sqlUpdate + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + intAbsenceDate - 1] + " = " + reason.getScheduleId() + ","
                            + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + intAbsenceDate - 1] + " = " + PstEmpSchedule.STATUS_PRESENCE_ABSENCE + ",";
                }

            }

            // fixing update query
            if (sqlUpdate != null && sqlUpdate.length() > 0) {
                sqlUpdate = sqlUpdate.substring(0, sqlUpdate.length() - 1);
                sql = sql + sqlUpdate + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID] + " = " + empScheduleOid;
            }

            try {
                System.out.println("\tUpdateScheduleByAbsenceManagement sql : " + sql);
                result = DBHandler.execUpdate(sql);
            } catch (Exception e) {
                System.out.println("Exception on UpdateScheduleByAbsenceManagement : " + e.toString());
            }
        }
        return result;
    }

    //update by satrya 2012-08-20
    public static int updateScheduleByAbsenceDaily(long empScheduleOid, int dateSelect, long symbol, int status, int reasonid, String note) {
        return updateScheduleByAbsenceDaily(empScheduleOid, dateSelect, symbol, status, reasonid, note, 0, 0, 0, "");
    }

    public static int updateScheduleByAbsenceDaily(long empScheduleOid, int dateSelect, long symbol, int status, int reasonid, String note, long symbol2nd, int status2nd, int reasonid2nd, String note2nd) {

        int result = 0;

        if (dateSelect != 0 && empScheduleOid != 0) {

            String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " SET ";

            String sqlUpdate = "";

            Reason reason = new Reason();
            String whereReason = PstReason.fieldNames[PstReason.FLD_NO] + " = " + reasonid;

            Vector listReason = PstReason.list(0, 0, whereReason, null);
            long schId = 0;

            if (listReason != null && listReason.size() > 0) {

                reason = (Reason) listReason.get(0);
                schId = reason.getScheduleId();

            }

            sqlUpdate = sqlUpdate + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + dateSelect - 1] + " = " + reasonid
                    + "," + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_NOTE + dateSelect - 1] + " = \"" + note + "\",";

            //update by satrya 2012-07-21


            if (schId != 0) {

                sqlUpdate = sqlUpdate + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + dateSelect - 1] + " = " + reason.getScheduleId() + ","
                        + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + dateSelect - 1] + " = " + PstEmpSchedule.STATUS_PRESENCE_OK + ",";
            }
            //untuk yg 2nd
            if (symbol2nd != 0) {
                sqlUpdate = sqlUpdate + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + PstEmpSchedule.INTERVAL_INDEX_HALF_CALENDAR + dateSelect - 1] + " = " + symbol2nd + ","
                        + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + dateSelect - 1] + " = " + status2nd + ","
                        + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + dateSelect - 1] + " = " + reasonid2nd + ","
                        + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_NOTE + dateSelect - 1] + " = " + note2nd + ",";
            }//end 2nd
            else {
                //update by satrya 2012-07-21
                //sqlUpdate = sqlUpdate + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + dateSelect - 1] + " = " + reason.getScheduleId() + "," 
                //update by satrya 2012-07-21
                sqlUpdate = sqlUpdate + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + dateSelect - 1] + " = " + symbol + ","
                        + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + dateSelect - 1] + " = " + status + ",";
            }
            // fixing update query
            if (sqlUpdate != null && sqlUpdate.length() > 0) {
                sqlUpdate = sqlUpdate.substring(0, sqlUpdate.length() - 1);
                sql = sql + sqlUpdate + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID] + " = " + empScheduleOid;
            }

            try {
                System.out.println("\tUpdateScheduleByAbsenceDaily sql : " + sql);
                result = DBHandler.execUpdate(sql);
            } catch (Exception e) {
                System.out.println("Exception on tUpdateScheduleByAbsenceDaily : " + e.toString());
            }
        }
        return result;
    }

    /**
     * get field index that will update
     *
     * @param periodId
     * @param employeeId
     * @param presenceStatus
     * @param idxFieldName
     * @return
     * @created by Edhy
     */
    public static int getScheduleCategory(long periodId, long employeeId, int idxFieldName) {
        int result = -1;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT CAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_CATEGORY_TYPE]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " INNER JOIN " + PstScheduleCategory.TBL_HR_SCHEDULE_CATEGORY + " AS CAT"
                    + " ON SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_CATEGORY_ID]
                    + " = CAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_SCHEDULE_CATEGORY_ID]
                    + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

//                System.out.println("\tgetScheduleCategory : "+sql);        
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                result = rs.getInt(1);
            }
        } catch (Exception e) {
            return -1;
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /**
     * create by satrya 2014-02-28 untuk update schedule outlet
     *
     * @param fromDate
     * @param toDate
     * @param oidSchedule
     * @param employeeId
     * @return
     */
    public static int getUpdateScheduleOutlet(Date fromDates, Date toDates, long oidSchedule, long employeeId) {
        if(fromDates==null || toDates==null){
            return 0;
        }
        Date fromDate = new Date();
        fromDate.setDate(fromDates.getDate());
        fromDate.setMonth(fromDate.getMonth());
        fromDate.setYear(fromDate.getYear());
        fromDate.setHours(0);
        fromDate.setMinutes(0);
        fromDate.setSeconds(0);
        
        Date toDate = new Date();
        toDate.setDate(toDates.getDate());
        toDate.setMonth(toDates.getMonth());
        toDate.setYear(toDates.getYear());
        toDate.setHours(23);
        toDate.setMinutes(59);
        toDate.setSeconds(0);
        Vector listPeriod = PstPeriod.getListStartEndDatePeriod(fromDate, toDate);
        String periodId = "";
        int sukes = 0;
        boolean cekMaxMonth = false;//inisilaisai awal pengambilan maxMonth
        String sql = "";
        try {
            sql = " UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " SET ";
            if (listPeriod != null && listPeriod.size() > 0) {
                for (int idxPeriod = 0; idxPeriod < listPeriod.size(); idxPeriod++) {
                    Period period = (Period) listPeriod.get(idxPeriod);
                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    long diffStartToFinish = 0;
                    if (listPeriod.size() == 1) {
                        diffStartToFinish = Math.abs(toDate.getTime() - fromDate.getTime()) /*+ 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = Math.abs(toDate.getTime() - period.getStartDate().getTime());//+ 86400000);//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = Math.abs(period.getEndDate().getTime() - fromDate.getTime());
                    }

                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    Date cloneFromDate = (Date) fromDate.clone();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) new Date(period.getStartDate().getTime()).clone();//(Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }
                    String sSqlCalendar = "";
                    if (diffStartToFinish >= 0) {
                        for (int idx = 0; idx <= itDate; idx++) {
                            Date selectedDate = new Date(cloneFromDate.getYear(), cloneFromDate.getMonth(), (cloneFromDate.getDate() + idx));
                            Date dtPeriodStart = new Date(period.getStartDate().getTime());
                            Date dtPeriodEnd = new Date(period.getEndDate().getTime());
                            if (dtPeriodStart.getTime() <= selectedDate.getTime() && selectedDate.getTime() <= dtPeriodEnd.getTime()) {
                                int dt = selectedDate.getDate();
                                sSqlCalendar = sSqlCalendar + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + dt - 1] + " = " + oidSchedule + ",";
                            }

                        }
                        // fixing update query
                        String sSql = "";
                        if (sSqlCalendar != null && sSqlCalendar.length() > 0) {
                            sSqlCalendar = sSqlCalendar.substring(0, sSqlCalendar.length() - 1);
                            sSql = sql + sSqlCalendar + " WHERE "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " = " + period.getOID()
                                    + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " = " + employeeId;
                            sukes = DBHandler.execUpdate(sSql);
                        }
                    }
                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start   
                }
            }
        } catch (Exception exc) {
            System.out.println("Exception sessPresence" + exc);
        }
        return sukes;
    }

    /**
     * get field index that will update
     *
     * @param periodId
     * @param employeeId
     * @param presenceStatus
     * @param idxFieldName
     * @return
     * @created by Edhy
     */
    public static int getScheduleCategory(int intScheduleIndex, long periodId, long employeeId, int idxFieldName) {
        int result = -1;
        DBResultSet dbrs = null;
        int addedIndex = intScheduleIndex == INT_FIRST_SCHEDULE ? 0 : INTERVAL_INDEX_HALF_CALENDAR;

        try {
            String sql = "SELECT CAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_CATEGORY_TYPE]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + addedIndex + idxFieldName - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " INNER JOIN " + PstScheduleCategory.TBL_HR_SCHEDULE_CATEGORY + " AS CAT"
                    + " ON SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_CATEGORY_ID]
                    + " = CAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_SCHEDULE_CATEGORY_ID]
                    + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

//                System.out.println("getScheduleCategory : "+sql);      
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                result = rs.getInt(1);
            }
        } catch (Exception e) {
            return -1;
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /**
     * get field index that will update
     *
     * @param periodId
     * @param employeeId
     * @param presenceStatus
     * @param idxFieldName
     * @return
     * @created by Edhy
     */
    public static int getScheduleCategory(int intScheduleIndex, long employeeId, Date presenceDate) {
        int result = -1;
        DBResultSet dbrs = null;
        int addedIndex = intScheduleIndex == INT_FIRST_SCHEDULE ? 0 : INTERVAL_INDEX_HALF_CALENDAR;
        Date dtYesterday = new Date(presenceDate.getYear(), presenceDate.getMonth(), presenceDate.getDate() - 1);// tgl kemarin
        int idxFieldName = getIdxNameOfTableBySelectedDate(dtYesterday);
        long periodSelected = PstPeriod.getPeriodIdBySelectedDate(dtYesterday);

        try {
            String sql = "SELECT CAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_CATEGORY_TYPE]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + addedIndex + idxFieldName - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " INNER JOIN " + PstScheduleCategory.TBL_HR_SCHEDULE_CATEGORY + " AS CAT"
                    + " ON SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_CATEGORY_ID]
                    + " = CAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_SCHEDULE_CATEGORY_ID]
                    + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodSelected
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

//                System.out.println("getScheduleCategory : "+sql);      
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                result = rs.getInt(1);
            }
        } catch (Exception e) {
            return -1;
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /**
     * get field index that will update
     *
     * @param periodId
     * @param employeeId
     * @param presenceStatus
     * @param idxFieldName
     * @return
     * @created by Edhy
     */
    public static long getLongPresenceDateYesterday(int intScheduleIndex, int intPresenceStatus, long employeeId, Date presenceDateCurr) {
        long result = 0;
        DBResultSet dbrs = null;
        int addedIndex = intScheduleIndex == INT_FIRST_SCHEDULE ? 0 : INTERVAL_INDEX_HALF_CALENDAR;
        int fieldSelected = PstScheduleSymbol.FLD_TIME_IN;
        //if (intPresenceStatus == STATUS_OUT_HOME || intPresenceStatus == STATUS_OUT_ON_DUTY) {
        if (intPresenceStatus == Presence.STATUS_OUT || intPresenceStatus == Presence.STATUS_OUT_ON_DUTY) {
            fieldSelected = PstScheduleSymbol.FLD_TIME_OUT;
        } ///update by satrya 2012-09-05
        else if (intPresenceStatus == Presence.STATUS_OUT_PERSONAL) {
            fieldSelected = PstScheduleSymbol.FLD_BREAK_OUT;
        } else if (intPresenceStatus == Presence.STATUS_IN_PERSONAL) {
            fieldSelected = PstScheduleSymbol.FLD_BREAK_IN;
        }

        Date dtYesterday = new Date(presenceDateCurr.getYear(), presenceDateCurr.getMonth(), presenceDateCurr.getDate() - 1, presenceDateCurr.getHours(), presenceDateCurr.getMinutes(), 0);
        long periodId = PstPeriod.getPeriodIdBySelectedDate(dtYesterday);
        int idxFieldNameYesterday = dtYesterday.getDate();

        try {
            String sql = "SELECT SYM." + PstScheduleSymbol.fieldNames[fieldSelected]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + addedIndex + idxFieldNameYesterday - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

//                System.out.println("getPresenceDate : "+sql);      
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                if (rs.getTime(PstScheduleSymbol.fieldNames[fieldSelected]) != null) {
                    int intYear = presenceDateCurr.getYear();
                    int intMonth = presenceDateCurr.getMonth();
                    int intDate = presenceDateCurr.getDate();
                    result = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                }
            }
        } catch (Exception e) {
            System.out.println("Exc when getPresenceDate : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /**
     * create by satrya 2013-07-19 mencari schedule date
     *
     * @param intScheduleIndex
     * @param intPresenceStatus
     * @param employeeId
     * @param presenceDateCurr
     * @return
     */
    public static long getLongdtSchedule(int intScheduleIndex, int intPresenceStatus, long employeeId, Date presenceDateCurr) {
        long result = 0;
        DBResultSet dbrs = null;
        int addedIndex = intScheduleIndex == INT_FIRST_SCHEDULE ? 0 : INTERVAL_INDEX_HALF_CALENDAR;
        int fieldSelected = PstScheduleSymbol.FLD_TIME_IN;
        //if (intPresenceStatus == STATUS_OUT_HOME || intPresenceStatus == STATUS_OUT_ON_DUTY) {
        if (intPresenceStatus == Presence.STATUS_OUT || intPresenceStatus == Presence.STATUS_OUT_ON_DUTY) {
            fieldSelected = PstScheduleSymbol.FLD_TIME_OUT;
        } ///update by satrya 2012-09-05
        else if (intPresenceStatus == Presence.STATUS_OUT_PERSONAL) {
            fieldSelected = PstScheduleSymbol.FLD_BREAK_OUT;
        } else if (intPresenceStatus == Presence.STATUS_IN_PERSONAL) {
            fieldSelected = PstScheduleSymbol.FLD_BREAK_IN;
        }

        Date dtcurr = new Date(presenceDateCurr.getYear(), presenceDateCurr.getMonth(), presenceDateCurr.getDate() - 1, presenceDateCurr.getHours(), presenceDateCurr.getMinutes(), 0);
        long periodId = PstPeriod.getPeriodIdBySelectedDate(dtcurr);
        int idxFieldNameYesterday = dtcurr.getDate();

        try {
            String sql = "SELECT SYM." + PstScheduleSymbol.fieldNames[fieldSelected]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + addedIndex + idxFieldNameYesterday - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

//                System.out.println("getPresenceDate : "+sql);      
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                if (rs.getTime(PstScheduleSymbol.fieldNames[fieldSelected]) != null) {
                    int intYear = presenceDateCurr.getYear();
                    int intMonth = presenceDateCurr.getMonth();
                    int intDate = presenceDateCurr.getDate();
                    result = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                }
            }
        } catch (Exception e) {
            System.out.println("Exc when getPresenceDate : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    public static ScheduleSymbol getScheduleDateTime(int intScheduleIndex, long employeeId, Date presenceDateCurr) {
        if (presenceDateCurr == null || employeeId == 0) {
            return null;
        }
        ScheduleSymbol result = null;
        DBResultSet dbrs = null;
        int addedIndex = intScheduleIndex == INT_FIRST_SCHEDULE ? 0 : INTERVAL_INDEX_HALF_CALENDAR;
        long periodId = PstPeriod.getPeriodIdBySelectedDate(presenceDateCurr);

        /* Date dtYesterday = new Date(presenceDateCurr.getYear(), presenceDateCurr.getMonth(), presenceDateCurr.getDate() - 1, presenceDateCurr.getHours(), presenceDateCurr.getMinutes(), 0);        
         int idxFieldNameYesterday = dtYesterday.getDate();
         */

        try {
            String sql = "SELECT SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + " , SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]
                    + " , SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]
                    + " , SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + addedIndex + presenceDateCurr.getDate() - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

//                System.out.println("getPresenceDate : "+sql);      
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            int intYear = presenceDateCurr.getYear();
            int intMonth = presenceDateCurr.getMonth();
            int intDate = presenceDateCurr.getDate();


            while (rs.next()) {

                result = new ScheduleSymbol();
                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]) != null) {
                    result.setTimeIn(new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds()));
                }
                /*if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                 if (rs.getTime(1).getHours() > rs.getTime(2).getHours()) {
                 result.setBreakOut(new Date((new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (24L * 60L * 60L * 1000L)));
                 } else {
                 result.setBreakOut(new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds()));
                 }
                 }*/
                //update by satrya 2012-12-01
                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                    result.setBreakOut(new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds()));
                }


                /*if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                 if (rs.getTime(1).getHours() > rs.getTime(3).getHours()) {
                 result.setBreakIn(new Date((new Date(intYear, intMonth, intDate, rs.getTime(3).getHours(), rs.getTime(3).getMinutes(), rs.getTime(3).getSeconds())).getTime() + (24L * 60L * 60L * 1000L)));
                 } else {
                 result.setBreakIn(new Date(intYear, intMonth, intDate, rs.getTime(3).getHours(), rs.getTime(3).getMinutes(), rs.getTime(3).getSeconds()));
                 }
                 }*/
                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
                        result.setBreakIn(new Date(intYear, intMonth, intDate, rs.getTime(3).getHours(), rs.getTime(3).getMinutes(), rs.getTime(3).getSeconds()));
                    } else {
                        result.setBreakIn(new Date((new Date(intYear, intMonth, intDate, rs.getTime(3).getHours(), rs.getTime(3).getMinutes(), rs.getTime(3).getSeconds())).getTime() + (24L * 60L * 60L * 1000L)));

                    }
                }
                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]) != null) {
                    if (rs.getTime(1).getHours() > rs.getTime(4).getHours()) {
                        result.setTimeOut(new Date((new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime() + (24L * 60L * 60L * 1000L)));
                    } else {
                        result.setTimeOut(new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds()));
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Exc when getPresenceDate : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    public static ScheduleSymbol getScheduleDateTimeYesterday(int intScheduleIndex, long employeeId, Date presenceDateCurr) {
        if (presenceDateCurr == null || employeeId == 0) {
            return null;
        }
        Date dtYesterday = new Date(presenceDateCurr.getYear(), presenceDateCurr.getMonth(), presenceDateCurr.getDate() - 1, presenceDateCurr.getHours(), presenceDateCurr.getMinutes(), 0);
        return getScheduleDateTime(intScheduleIndex, employeeId, dtYesterday);
    }

    public static ScheduleSymbol getScheduleDateTimeTommorow(int intScheduleIndex, long employeeId, Date presenceDateCurr) {
        if (presenceDateCurr == null || employeeId == 0) {
            return null;
        }
        Date dtTomorrow = new Date(presenceDateCurr.getYear(), presenceDateCurr.getMonth(), presenceDateCurr.getDate() + 1, presenceDateCurr.getHours(), presenceDateCurr.getMinutes(), 0);
        return getScheduleDateTime(intScheduleIndex, employeeId, dtTomorrow);
    }

    /**
     * get field index that will update
     *
     * @param periodId
     * @param employeeId
     * @param presenceStatus
     * @param idxFieldName
     * @return
     * @created by Edhy
     */
    public static Vector getIndexEmpScheduleTableWillUpdated(long periodId, long employeeId, int presenceStatus, Date presenceDate) {
        Vector result = new Vector();
        DBResultSet dbrs = null;

        int indexResult = -1;
        int idxFieldName = getIdxNameOfTableBySelectedDate(presenceDate);
        long periodIdBeforeCurr = PstPeriod.getPeriodIdJustBefore(periodId);

        try {
            String sql = "SELECT CAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_CATEGORY_TYPE]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    + ", SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " LEFT JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM2"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]
                    + " = SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " INNER JOIN " + PstScheduleCategory.TBL_HR_SCHEDULE_CATEGORY + " AS CAT"
                    + " ON SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_CATEGORY_ID]
                    + " = CAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_SCHEDULE_CATEGORY_ID]
                    + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

            //System.out.println("\tgetFieldIndexWillUpdated : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int intYear = presenceDate.getYear();
            int intMonth = presenceDate.getMonth();
            int intDate = presenceDate.getDate();

            long longSchld1stIn = 0;
            long longSchld1stOut = 0;
            long longSchld2ndIn = 0;
            long longSchld2ndOut = 0;

            Date dtSchld1stIn = null;
            Date dtSchld1stOut = null;
            Date dtSchld2ndIn = null;
            Date dtSchld2ndOut = null;

            long empScheduleOid = 0;
            int scheduleCategory = 0;

            boolean rsNull = true;

            while (rs.next()) {
                scheduleCategory = rs.getInt(1);

                rsNull = false;

                // first schedule IN
                if (rs.getTime(2) != null) {
                    dtSchld1stIn = new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds());
                    longSchld1stIn = dtSchld1stIn.getTime();
                }

                // first schedule OUT
                if (rs.getTime(3) != null) {
                    dtSchld1stOut = new Date(intYear, intMonth, intDate, rs.getTime(3).getHours(), rs.getTime(3).getMinutes(), rs.getTime(3).getSeconds());
                    longSchld1stOut = dtSchld1stOut.getTime();
                }

                // second schedule IN
                if (rs.getTime(4) != null) {
                    dtSchld2ndIn = new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds());
                    longSchld2ndIn = dtSchld2ndIn.getTime();
                }

                // second schedule OUT
                if (rs.getTime(5) != null) {
                    dtSchld2ndOut = new Date(intYear, intMonth, intDate, rs.getTime(5).getHours(), rs.getTime(5).getMinutes(), rs.getTime(5).getSeconds());
                    longSchld2ndOut = dtSchld2ndOut.getTime();
                }

                // OID schedule
                empScheduleOid = rs.getLong(6);

                // ambil data period dan index table yang akan diupdate
                Vector vectTmpResult = getPeriodAndTableIndex(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, periodId, employeeId, presenceStatus, presenceDate);
                if (vectTmpResult != null && vectTmpResult.size() == 2) {
                    indexResult = Integer.parseInt(String.valueOf(vectTmpResult.get(1)));
                    result.add(String.valueOf(vectTmpResult.get(0)));
                    result.add(String.valueOf(indexResult));
                }

            }
            // --- end of iterasi ---

            // jika Resultset null
            if (rsNull) {
                // ambil data period dan index table yang akan diupdate
                Vector vectTmpResult = getPeriodAndTableIndex(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, periodId, employeeId, presenceStatus, presenceDate);
                if (vectTmpResult != null && vectTmpResult.size() == 2) {
                    indexResult = Integer.parseInt(String.valueOf(vectTmpResult.get(1)));
                    result.add(String.valueOf(vectTmpResult.get(0)));
                    result.add(String.valueOf(indexResult));
                }
            }


            // --- process absence dan lateness ---
            // presence OUT, proses absence dan lateness
            // karena masuk adalah "IN" dan "OUT" tidak null
            int intFirstAbsenceStatus = PstEmpSchedule.STATUS_PRESENCE_OK;
            int intSecondAbsenceStatus = PstEmpSchedule.STATUS_PRESENCE_OK;
            int intFirstLatenessStatus = PstEmpSchedule.STATUS_PRESENCE_OK;
            int intSecondLatenessStatus = PstEmpSchedule.STATUS_PRESENCE_OK;

            if (indexResult != -1) {
                //if (presenceStatus == STATUS_OUT_HOME || presenceStatus == STATUS_OUT_ON_DUTY) {
                if (presenceStatus == Presence.STATUS_OUT || presenceStatus == Presence.STATUS_OUT_ON_DUTY) {
                    Date dtInFirst = null;
                    Date dtInSecond = null;
                    Date dtOutFirst = null;
                    Date dtOutSecond = null;

                    Vector vectPresenceDate = getInOutPresenceData(presenceDate, idxFieldName, presenceStatus, indexResult, empScheduleOid);
                    if (vectPresenceDate != null && vectPresenceDate.size() > 0) {
                        Vector vectTemp = (Vector) vectPresenceDate.get(0);
                        dtInFirst = (vectTemp.get(0) != null ? (Date) vectTemp.get(0) : null);
                        dtInSecond = (vectTemp.get(1) != null ? (Date) vectTemp.get(1) : null);
                        dtOutFirst = (vectTemp.get(2) != null ? (Date) vectTemp.get(2) : null);
                        dtOutSecond = (vectTemp.get(3) != null ? (Date) vectTemp.get(3) : null);

                        Vector vctAbsenceIndex = checkAbsenceStatus(scheduleCategory, dtInFirst, dtInSecond, dtOutFirst, dtOutSecond);
                        intFirstAbsenceStatus = Integer.parseInt(String.valueOf(vctAbsenceIndex.get(0)));
                        intSecondAbsenceStatus = Integer.parseInt(String.valueOf(vctAbsenceIndex.get(1)));

                        Vector vctLatenessIndex = checkLatenessStatus(scheduleCategory, dtInFirst, dtInSecond, dtSchld1stIn, dtSchld2ndIn);
                        intFirstLatenessStatus = Integer.parseInt(String.valueOf(vctLatenessIndex.get(0)));
                        intSecondLatenessStatus = Integer.parseInt(String.valueOf(vctLatenessIndex.get(1)));
                    }
                }
            }

            // isi vector result
            result.add(String.valueOf(intFirstAbsenceStatus));
            result.add(String.valueOf(intSecondAbsenceStatus));
            result.add(String.valueOf(intFirstLatenessStatus));
            result.add(String.valueOf(intSecondLatenessStatus));
            // --- end process absence & lateness ---                               

            return result;
        } catch (Exception e) {
            System.out.println("getFieldIndexWillUpdated Exception : " + e.toString());
            return new Vector(1, 1);
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * Fungsi ini di pakai di presence Edit.jsp
     *
     * @param rsNull
     * @param periodId
     * @param employeeId
     * @param presenceStatus
     * @param presenceDate
     * @return
     */
    public static Vector getPeriodAndTableIndex(boolean rsNull, long longSchld1stIn, long longSchld1stOut, long longSchld2ndIn, long longSchld2ndOut, long longSchldBreakOut, long longSchldBreakIn, long periodId, long employeeId, int presenceStatus, Date presenceDate) {
        //public static Vector getPeriodAndTableIndex(boolean rsNull, long longSchld1stIn, long longSchld1stOut, long longSchld2ndIn, long longSchld2ndOut, long periodId, long employeeId, int presenceStatus, Date presenceDate) {
        Vector result = new Vector(1, 1);
        try {
            int indexResult = -1;
            int idxFieldName = getIdxNameOfTableBySelectedDate(presenceDate);
            long periodIdBeforeCurr = PstPeriod.getPeriodIdJustBefore(periodId);

            Date dtYesterday = new Date(presenceDate.getYear(), presenceDate.getMonth(), presenceDate.getDate() - 1);
            int idxFieldNameYesterday = getIdxNameOfTableBySelectedDate(dtYesterday);

            long longPresenceTime = presenceDate.getTime();
            int intYear = presenceDate.getYear();
            int intMonth = presenceDate.getMonth();
            int intDate = presenceDate.getDate();
            long longOrgPresenceDate = (new Date(intYear, intMonth, intDate)).getTime();
            //update by satrya 2012-10-15
            int iAttendaceOnBreakOutBreakIn = 0;
            try {
                iAttendaceOnBreakOutBreakIn = Integer.parseInt(PstSystemProperty.getValueByName("ATTANDACE_ON_BREAK_IN_BREAK_OUT"));//menambahkan system properties
            } catch (Exception e) {
                System.out.println("Exeception ATTANDACE_ON_BREAK_IN_BREAK_OUT:" + e);
            }
            ScheduleSymbol schSymbol = null;
            Hashtable scheduleSymbolIdMap = null;
            //untuk special Leave <satrya 2012-08-01>
            Vector listScheduleSymbol = new Vector(1, 1);
            try {

                listScheduleSymbol.add(new Long(PstSystemProperty.getValueByName("OID_SPECIAL")));
            } catch (Exception E) {

                System.out.println("EXCEPTION SYS PROP OID_SPECIAL : " + E.toString());
            }

            try {
                listScheduleSymbol.add(new Long(PstSystemProperty.getValueByName("OID_UNPAID")));
            } catch (Exception E) {
                System.out.println("EXCEPTION SYS PROP OID_UNPAID : " + E.toString());
            }
            if (iAttendaceOnBreakOutBreakIn != 0) {
                scheduleSymbolIdMap = PstScheduleSymbol.getScheduleSymbolIdMap(listScheduleSymbol);
                //mencari SymbolId
                schSymbol = PstEmpSchedule.getDailySchedule(presenceDate, employeeId);
            }
            Date dT = new Date();
            if (presenceDate != null) {
                dT = (Date) presenceDate.clone();
                dT.setHours(0);
                dT.setMinutes(0);
                dT.setSeconds(0);
            }
            // jika resultset bukan null
            if (!rsNull) {
                int intPresenceDate = presenceDate.getDate();
                int schld1stCategory = getScheduleCategory(INT_FIRST_SCHEDULE, employeeId, presenceDate);

                //update by satrya 2012-10--15
                if (presenceStatus == Presence.STATUS_IN_PERSONAL) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_IN_PERSONAL) {
                        Presence presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_IN_PERSONAL);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(new Date(longSchldBreakIn));
                        presence.setPeriodId(periodId);
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } //update by satrya 2012-10--15
                else if (presenceStatus == Presence.STATUS_CALL_BACK) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_CALL_BACK) {
                        Presence presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_CALL_BACK);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(dT);
                        presence.setPeriodId(periodId);
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } // -------------- START PROSES PENGECEKAN PRESENCE IN ------------                
                else if (presenceStatus == Presence.STATUS_IN) {
                    //  else if (presenceStatus == Presence.STATUS_IN ||  presenceStatus == Presence.STATUS_CALL_BACK) {
                    // .::::::::::: start check schedule kmrn yg 'first' tipe NIGHT_SHIFT/ACROSS DAY/EOD ::::::::::::..
                    // pengecekan "yesterday' schedule" yang lintas hari utk first schedule

                    // category schedule lintas hari (NIGHT_SHIFT atau ACROSS DAY atau EOD)
                    if (schld1stCategory == PstScheduleCategory.CATEGORY_NIGHT_WORKER || schld1stCategory == PstScheduleCategory.CATEGORY_ACCROSS_DAY
                            || schld1stCategory == PstScheduleCategory.CATEGORY_EXTRA_ON_DUTY) {
                        // mencari nilai 'long' dari schedule OUT hari kemarin
                        long longOutYesterdaySchdl = getLongPresenceDateYesterday(INT_FIRST_SCHEDULE, Presence.STATUS_OUT,
                                employeeId, presenceDate);

                        // pengecekan apakah hr ini ada schedule (bukan OFF atau 'NULL')
                        // pada hari ini ada schedule
                        if ((longSchld1stIn - longOrgPresenceDate) > 0) {
                            // mencari nilai tengah (average) antara IN kmrn dengan IN hr ini
                            long lDiff2ndInYesterdayto1stOutToday = longSchld1stIn - longOutYesterdaySchdl;
                            long lAverage2ndInto1stOutAcrossDay = longOutYesterdaySchdl + (lDiff2ndInYesterdayto1stOutToday / 2);

                            // jika presence IN kurang dari nilai average
                            // update schedule IN hr kmrn
                            if (longPresenceTime < lAverage2ndInto1stOutAcrossDay) {
                                //System.out.println("... Presence IN for night shift / across day / EOD' schedule when there is schedule today  ...");
                                indexResult = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
                                result.add(String.valueOf(intPresenceDate == 1 ? periodIdBeforeCurr : periodId));
                                result.add(String.valueOf(indexResult));
                            } // jika presence IN lebih atau sama dengan nilai average
                            // update schedule IN hr ini
                            else {
                                // waktu ACTUAL_PRESENCE sebelum FIRST_SCHEDULE_PRESENCE_IN maka :                             
                                // - update IN schedule I
                                if (longPresenceTime <= longSchld1stIn) {
                                    //System.out.println("... Presence IN before or same to first roster IN ...");
                                    indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                    result.add(String.valueOf(periodId));
                                    result.add(String.valueOf(indexResult));
                                } // waktu SECOND_SCHEDULE_PRESENCE_IN valid (tidak null)                            
                                else if (longSchld2ndIn > 0 && longSchld2ndIn > longSchld1stOut) {
                                    long lDiff2ndInto1stOut = longSchld2ndIn - longSchld1stOut;
                                    long lAverage2ndInto1stOut = longSchld1stOut + (lDiff2ndInto1stOut / 2);

                                    // waktu ACTUAL_PRESENCE antara FIRST_SCHEDULE_PRESENCE_IN dan FIRST_SCHEDULE_PRESENCE_OUT 
                                    // ditambah dengan (durasi antara first OUT dengan second IN bagi 2) maka :    
                                    //  misal : first OUT = 13:00, second IN = 19:00 
                                    //  maka  : lAverage2ndInto1stOut = 16:00
                                    // - update IN schedule I                                
                                    if (longPresenceTime < lAverage2ndInto1stOut) {
                                        //System.out.println("... Presence IN between first roster IN - OUT + average duration between first OUT and second IN ...");
                                        indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                        result.add(String.valueOf(periodId));
                                        result.add(String.valueOf(indexResult));
                                    } // waktu ACTUAL_PRESENCE setelah FIRST_SCHEDULE_PRESENCE_OUT maka :                             
                                    // - update IN schedule II                                
                                    else {
                                        //System.out.println("... Presence IN after first roster OUT ...");
                                        indexResult = OFFSET_INDEX_IN + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1;
                                        result.add(String.valueOf(periodId));
                                        result.add(String.valueOf(indexResult));
                                    }
                                } // waktu SECOND_SCHEDULE_PRESENCE_IN invalid (null atau kosong)                            
                                // - update IN schedule I
                                else {
                                    //System.out.println("... Presence IN after first roster IN ...");
                                    indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                    result.add(String.valueOf(periodId));
                                    result.add(String.valueOf(indexResult));
                                }
                            }
                        } // pada hr ini tidak ada schedule (OFF)
                        else {
                            // menentukan waktu rata2 yang dipakai utk waktu cadangan proses presence 
                            // presence ini milik schedule kemarin (UPDATE IN schedule I)
                            if (longPresenceTime <= longOutYesterdaySchdl) {
                                //System.out.println("... Presence IN for night shift / across day / EOD' schedule when today is OFF ...");
                                indexResult = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
                                result.add(String.valueOf(intPresenceDate == 1 ? periodIdBeforeCurr : periodId));
                                result.add(String.valueOf(indexResult));
                            } // presence ini milik schedule hr ini (UPDATE IN schedule I)
                            else {
                                // System.out.println("... Presence IN for regular schedule when today is OFF ...");
                                indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                result.add(String.valueOf(periodId));
                                result.add(String.valueOf(indexResult));
                            }
                        }
                    } // .::::::::::: end check schedule kmrn yg 'first' tipe NIGHT_SHIFT/ACROSS DAY/EOD ::::::::::::..
                    // .::::::::::: start check schedule hari ini yg normal ::::::::::::..                            
                    // category schedule normal (REGULAR atau OFF)
                    else {
                        // waktu ACTUAL_PRESENCE sebelum FIRST_SCHEDULE_PRESENCE_IN maka :                             
                        // - update IN schedule I
                        if (longPresenceTime <= longSchld1stIn) {
                            //System.out.println("... Presence IN before or same to first roster IN ...");
                            indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                            result.add(String.valueOf(periodId));
                            result.add(String.valueOf(indexResult));
                        } // waktu SECOND_SCHEDULE_PRESENCE_IN valid (tidak null)                            
                        else if (longSchld2ndIn > 0 && longSchld2ndIn > longSchld1stOut) {
                            long lDiff2ndInto1stOut = longSchld2ndIn - longSchld1stOut;
                            long lAverage2ndInto1stOut = longSchld1stOut + (lDiff2ndInto1stOut / 2);

                            // waktu ACTUAL_PRESENCE antara FIRST_SCHEDULE_PRESENCE_IN dan FIRST_SCHEDULE_PRESENCE_OUT 
                            // ditambah dengan (durasi antara first OUT dengan second IN bagi 2) maka :    
                            //  misal : first OUT = 13:00, second IN = 19:00 
                            //  maka  : lAverage2ndInto1stOut = 16:00
                            // - update IN schedule I                                
                            if (longPresenceTime < lAverage2ndInto1stOut) {
                                // System.out.println("... Presence IN between first roster IN - OUT + average duration between first OUT and second IN ...");
                                indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                result.add(String.valueOf(periodId));
                                result.add(String.valueOf(indexResult));
                            } // waktu ACTUAL_PRESENCE setelah FIRST_SCHEDULE_PRESENCE_OUT maka :                             
                            // - update IN schedule II                                
                            else {
                                // System.out.println("... Presence IN after first roster OUT ...");
                                indexResult = OFFSET_INDEX_IN + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1;
                                result.add(String.valueOf(periodId));
                                result.add(String.valueOf(indexResult));
                            }
                        } // waktu SECOND_SCHEDULE_PRESENCE_IN invalid (null atau kosong)                            
                        // - update IN schedule I
                        else {
                            // System.out.println("... Presence IN after first roster IN ...");
                            indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                            result.add(String.valueOf(periodId));
                            result.add(String.valueOf(indexResult));
                        }
                    }
                    // .::::::::::: end check schedule hari ini yg normal ::::::::::::..                        
                }
                // -------------- END PROSES PENGECEKAN PRESENCE IN ------------

                // -------------- START PROSES PENGECEKAN PRESENCE OUT ------------
                //if (presenceStatus == STATUS_OUT_HOME || presenceStatus == STATUS_OUT_ON_DUTY) {
                //update by satrya 2012-10--15
                if (presenceStatus == Presence.STATUS_OUT_PERSONAL) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_OUT_PERSONAL) {
                        Presence presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(new Date(longSchldBreakOut));
                        presence.setPeriodId(periodId);
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } //update by satrya 2012-10--15
                else if (presenceStatus == Presence.STATUS_OUT_ON_DUTY) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_OUT_ON_DUTY) {
                        Presence presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_OUT_ON_DUTY);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(dT);
                        presence.setPeriodId(periodId);
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } else if (presenceStatus == Presence.STATUS_OUT) {
                    ///else if (presenceStatus == Presence.STATUS_OUT || presenceStatus == Presence.STATUS_OUT_ON_DUTY ) {
                    // .::::::::::: start check schedule kmrn yg 'first' tipe NIGHT_SHIFT/ACROSS DAY/EOD ::::::::::::..
                    // pengecekan "yesterday' schedule" yang lintas hari utk first schedule
                    // int intPresenceDate = presenceDate.getDate();
                    //int schld1stCategory = getScheduleCategory(INT_FIRST_SCHEDULE, employeeId, presenceDate);

                    // category schedule lintas hari (NIGHT_SHIFT atau ACROSS DAY atau EOD)
                    if (schld1stCategory == PstScheduleCategory.CATEGORY_NIGHT_WORKER || schld1stCategory == PstScheduleCategory.CATEGORY_ACCROSS_DAY || schld1stCategory == PstScheduleCategory.CATEGORY_EXTRA_ON_DUTY) {
                        // mencari nilai 'long' dari schedule OUT hari kemarin
                        long longOutYesterdaySchdl = getLongPresenceDateYesterday(INT_FIRST_SCHEDULE, Presence.STATUS_OUT, employeeId, presenceDate);

                        // pengecekan apakah hr ini ada schedule (bukan OFF atau 'NULL')
                        // pada hari ini ada schedule                            
                        if ((longSchld1stIn - longOrgPresenceDate) > 0) {
                            // mencari nilai tengah (average) antara IN kmrn dengan IN hr ini
                            long lDiff2ndInYesterdayto1stOutToday = longSchld1stIn - longOutYesterdaySchdl;
                            long lAverage2ndInto1stOutAcrossDay = longOutYesterdaySchdl + (lDiff2ndInYesterdayto1stOutToday / 2);

                            // jika presence OUT kurang dari nilai average
                            // update schedule OUT hr kmrn
                            if (longPresenceTime < lAverage2ndInto1stOutAcrossDay) {
                                //System.out.println("... Presence OUT for first night shift / across day / EOD' schedule ...");
                                indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                result.add(String.valueOf(intPresenceDate == 1 ? periodIdBeforeCurr : periodId));
                                result.add(String.valueOf(indexResult));
                            } // jika presence OUT lebih atau sama dengan nilai average
                            // update schedule OUT hr ini
                            else {
                                // waktu ACTUAL_OUT sebelum FIRST_SCHEDULE_PRESENCE_OUT maka : 
                                // - update OUT schedule I => MENDAHULUI                                     
                                if (longPresenceTime < longSchld1stOut) {
                                    // System.out.println("... Presence OUT (first night shift / across day / EOD) before first roster OUT ...");
                                    indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                    result.add(String.valueOf(periodId));
                                    result.add(String.valueOf(indexResult));
                                } // waktu SECOND_SCHEDULE_PRESENCE_OUT valid (tidak null)                            
                                else if (longSchld2ndOut > 0) {
                                    // waktu ACTUAL_OUT diantara FIRST_SCHEDULE_PRESENCE_OUT dan SECOND_SCHEDULE_PRESENCE_IN maka : 
                                    // - update OUT schedule I
                                    if (longPresenceTime < longSchld2ndIn) {
                                        // System.out.println("... Presence OUT (first night shift / across day / EOD) between first roster OUT and second roster IN ...");
                                        indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                        result.add(String.valueOf(periodId));
                                        result.add(String.valueOf(indexResult));
                                    } // waktu ACTUAL_PRESENCE setelah SECOND_SCHEDULE_PRESENCE_IN maka :                             
                                    // - update OUT schedule II                                                                
                                    else {
                                        // System.out.println("... Presence OUT (first night shift / across day / EOD) after first roster IN ...");
                                        indexResult = OFFSET_INDEX_OUT + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1;
                                        result.add(String.valueOf(periodId));
                                        result.add(String.valueOf(indexResult));
                                    }
                                } // waktu SECOND_SCHEDULE_PRESENCE_OUT invalid (null atau kosong)                            
                                // - update OUT schedule I
                                else {
                                    // System.out.println("... Presence OUT (first night shift / across day / EOD) after first roster OUT ...");
                                    indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                    result.add(String.valueOf(periodId));
                                    result.add(String.valueOf(indexResult));
                                }
                            }
                        } // pada hr ini tidak ada schedule (OFF atau NULL(ga ada schedule))
                        else {
                            // menentukan waktu rata2 yang dipakai utk waktu cadangan proses presence                                
                            Date dtTemp = new Date(longOutYesterdaySchdl);
                            Date dtAverage = new Date(dtTemp.getYear(), dtTemp.getMonth(), dtTemp.getDate(), dtTemp.getHours() + RESIDUE_TIME_ON_PRESENCE, dtTemp.getMinutes(), 0);
                            long lAverage = dtAverage.getTime();

                            // presence ini milik schedule kemarin (UPDATE OUT schedule I)
                            if (longPresenceTime < lAverage) {
                                //  System.out.println("... Presence OUT for night shift / across day / EOD' schedule when today is OFF ...");
                                indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                result.add(String.valueOf(intPresenceDate == 1 ? periodIdBeforeCurr : periodId));
                                result.add(String.valueOf(indexResult));
                            } // presence ini milik schedule hr ini (UPDATE OUT schedule I)
                            else {
                                // System.out.println("... Presence OUT for regular schedule when today is OFF ...");
                                indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                result.add(String.valueOf(periodId));
                                result.add(String.valueOf(indexResult));
                            }
                        }
                    } // .::::::::::: end check schedule kmrn yg 'first' tipe NIGHT_SHIFT/ACROSS DAY/EOD ::::::::::::..                        
                    // .::::::::::: start check schedule hari ini yg normal ::::::::::::..                            
                    // schedule IN dan OUT berada dalam lingkup satu hari
                    else {
                        // waktu ACTUAL_OUT sebelum FIRST_SCHEDULE_PRESENCE_OUT maka : 
                        // - update OUT schedule I => MENDAHULUI                                     
                        if (longPresenceTime < longSchld1stOut) {
                            // System.out.println("... Presence OUT (one day) before first roster OUT ...");
                            indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                            result.add(String.valueOf(periodId));
                            result.add(String.valueOf(indexResult));
                        } // waktu SECOND_SCHEDULE_PRESENCE_OUT valid (tidak null)                            
                        else if (longSchld2ndOut > 0) {
                            // waktu ACTUAL_OUT diantara FIRST_SCHEDULE_PRESENCE_OUT dan SECOND_SCHEDULE_PRESENCE_IN maka : 
                            // - update OUT schedule I
                            if (longPresenceTime < longSchld2ndIn) {
                                // System.out.println("... Presence OUT (one day) between first roster OUT and second roster IN ...");
                                indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                result.add(String.valueOf(periodId));
                                result.add(String.valueOf(indexResult));
                            } // waktu ACTUAL_PRESENCE setelah SECOND_SCHEDULE_PRESENCE_IN maka :                             
                            // - update OUT schedule II                                                                
                            else {
                                // System.out.println("... Presence OUT (one day) after first roster IN ...");
                                indexResult = OFFSET_INDEX_OUT + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1;
                                result.add(String.valueOf(periodId));
                                result.add(String.valueOf(indexResult));
                            }
                        } // waktu SECOND_SCHEDULE_PRESENCE_OUT invalid (null atau kosong)                            
                        // - update IN schedule I
                        else {
                            // System.out.println("... Presence OUT (one day) after first roster OUT ...");
                            indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                            result.add(String.valueOf(periodId));
                            result.add(String.valueOf(indexResult));
                        }
                    }

                    // .::::::::::: start check schedule hari ini yg normal ::::::::::::..                            
                }
                // -------------- END PROSES PENGECEKAN PRESENCE OUT ------------

            }
            // --- end of Result not null ---



            // jika pada saat presence date belum ada schedule
            // maka hanya check schedule hr sebelumnya (kemarin .red) :)  
            if (rsNull) {
                // -------------- START PROSES PENGECEKAN PRESENCE IN ------------
                //if (presenceStatus == STATUS_IN || presenceStatus == STATUS_IN_BREAK || presenceStatus == STATUS_IN_CALLBACK || presenceStatus == STATUS_IN_LUNCH) {
                //update by satrya 2012-10--15
                if (presenceStatus == Presence.STATUS_IN_PERSONAL) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_IN_PERSONAL) {
                        Presence presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_IN_PERSONAL);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(new Date(longSchldBreakIn));
                        presence.setPeriodId(periodId);
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } //update by satrya 2012-10--15
                else if (presenceStatus == Presence.STATUS_CALL_BACK) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_CALL_BACK) {
                        Presence presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_CALL_BACK);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(dT);
                        presence.setPeriodId(periodId);
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } else if (presenceStatus == Presence.STATUS_IN) {
                    // if (presenceStatus == Presence.STATUS_IN || presenceStatus == Presence.STATUS_CALL_BACK) {
                    // pengecekan "yesterday' schedule" yang lintas hari utk first schedule
                    int intPresenceDate = presenceDate.getDate();
                    int schld1stCategory = getScheduleCategory(INT_FIRST_SCHEDULE, employeeId, presenceDate);

                    // category schedule lintas hari (NIGHT_SHIFT atau ACROSS DAY atau EOD)
                    if (schld1stCategory == PstScheduleCategory.CATEGORY_NIGHT_WORKER || schld1stCategory == PstScheduleCategory.CATEGORY_ACCROSS_DAY || schld1stCategory == PstScheduleCategory.CATEGORY_EXTRA_ON_DUTY) {
                        // mencari nilai 'long' dari schedule OUT hari kemarin
                        long longOutYesterdaySchdl = getLongPresenceDateYesterday(INT_FIRST_SCHEDULE, Presence.STATUS_OUT, employeeId, presenceDate);
                        if (longPresenceTime <= longOutYesterdaySchdl) {
                            // pada hr ini tidak ada schedule (OFF atau null) 
                            // System.out.println("... Presence IN for night shift / across day / EOD' schedule when today is OFF ...");
                            indexResult = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
                            result.add(String.valueOf(intPresenceDate == 1 ? periodIdBeforeCurr : periodId));
                            result.add(String.valueOf(indexResult));
                        }
                    }
                }
                // -------------- END PROSES PENGECEKAN PRESENCE IN ------------

                //update by satrya 2012-10--15
                if (presenceStatus == Presence.STATUS_OUT_PERSONAL) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_OUT_PERSONAL) {
                        Presence presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(new Date(longSchldBreakOut));
                        presence.setPeriodId(periodId);
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } //update by satrya 2012-10--15
                else if (presenceStatus == Presence.STATUS_OUT_ON_DUTY) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_OUT_ON_DUTY) {
                        Presence presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_OUT_ON_DUTY);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(dT);
                        presence.setPeriodId(periodId);
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } // -------------- START PROSES PENGECEKAN PRESENCE OUT ------------
                else if (presenceStatus == Presence.STATUS_OUT) {
                    //  if (presenceStatus == Presence.STATUS_OUT || presenceStatus == Presence.STATUS_OUT_ON_DUTY) {
                    // pengecekan "yesterday' schedule" yang lintas hari utk first schedule
                    int intPresenceDate = presenceDate.getDate();
                    int schld1stCategory = getScheduleCategory(INT_FIRST_SCHEDULE, employeeId, presenceDate);

                    // category schedule lintas hari (NIGHT_SHIFT atau ACROSS DAY)
                    if (schld1stCategory == PstScheduleCategory.CATEGORY_NIGHT_WORKER || schld1stCategory == PstScheduleCategory.CATEGORY_ACCROSS_DAY || schld1stCategory == PstScheduleCategory.CATEGORY_EXTRA_ON_DUTY) {
                        // mencari nilai 'long' dari schedule OUT hari kemarin
                        long longOutYesterdaySchdl = getLongPresenceDateYesterday(INT_FIRST_SCHEDULE, Presence.STATUS_OUT, employeeId, presenceDate);
                        Date dtTemp = new Date(longOutYesterdaySchdl);
                        Date dtAverage = new Date(dtTemp.getYear(), dtTemp.getMonth(), dtTemp.getDate(), dtTemp.getHours() + RESIDUE_TIME_ON_PRESENCE, dtTemp.getMinutes(), 0);
                        long lAverage = dtAverage.getTime();
                        if (longPresenceTime < lAverage) {
                            // pada hr ini tidak ada schedule (OFF atau null)
                            // System.out.println("... Presence OUT for night shift / across day / EOD' schedule when today is OFF ...");
                            indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                            result.add(String.valueOf(intPresenceDate == 1 ? periodIdBeforeCurr : periodId));
                            result.add(String.valueOf(indexResult));
                        }
                    }
                }
                // -------------- END PROSES PENGECEKAN PRESENCE OUT ------------

            }

            return result;
        } catch (Exception e) {
            System.out.println("getPeriodAndTableIndex Exception : " + e.toString());
            return new Vector(1, 1);
        }
    }

    /**
     * create by satrya 2013-07-10
     *
     * @param prevPeriod
     * @param currPeriod
     * @param nextPeriod
     * @param rsNull
     * @param longSchld1stIn
     * @param longSchld1stOut
     * @param longSchld2ndIn
     * @param longSchld2ndOut
     * @param longSchldBreakOut
     * @param longSchldBreakIn
     * @param employeeId
     * @param presenceStatus
     * @param presence
     * @return
     */
    public static Vector getPeriodeTableSchedule(Period prevPeriod, Period currPeriod, Period nextPeriod, boolean rsNull, Date dtSchld1stIn, Date dtSchld1stOut, Date dtSchld2stIn, Date dtSchld2stOut, Date dtSchldBreakOut, Date dtSchldBreakIn, long employeeId, int presenceStatus, Presence presence, long oidScheduleId, boolean isCrossDays, long longOutYesterdaySchdl, long lookUpBeforeOutYesterday, long lookUpAfterOutYesterday) {
        Vector result = new Vector(1, 1);
        try {
            long longSchld1stIn = dtSchld1stIn != null ? dtSchld1stIn.getTime() : 0;
            long longSchld1stOut = dtSchld1stOut != null ? dtSchld1stOut.getTime() : 0;
            long longSchld2ndIn = dtSchld2stIn != null ? dtSchld2stIn.getTime() : 0;
            long longSchld2ndOut = dtSchld2stOut != null ? dtSchld2stOut.getTime() : 0;

            //update by satrya 2012-10-13
            long longSchldBreakIn = dtSchldBreakOut != null ? dtSchldBreakOut.getTime() : 0;
            long longSchldBreakOut = dtSchldBreakIn != null ? dtSchldBreakIn.getTime() : 0;
            int indexResult = -1;
            int indexSchedule = -1;
            Date presenceDate = presence != null && presence.getPresenceDatetime() != null ? presence.getPresenceDatetime() : null;
            int idxFieldName = getIdxNameOfTableBySelectedDate(presenceDate);
            long lCurrPeriod = currPeriod != null && currPeriod.getOID() != 0 ? currPeriod.getOID() : 0;
            long periodIdBeforeCurr = PstPeriod.getPeriodIdJustBefore(lCurrPeriod);

            Date dtYesterday = presenceDate != null ? new Date(presenceDate.getYear(), presenceDate.getMonth(), presenceDate.getDate() - 1) : null;
            int idxFieldNameYesterday = getIdxNameOfTableBySelectedDate(dtYesterday);

            long longPresenceTime = presenceDate != null ? presenceDate.getTime() : 0;
            int intYear = presenceDate != null ? presenceDate.getYear() : -1;
            int intMonth = presenceDate != null ? presenceDate.getMonth() : -1;
            int intDate = presenceDate != null ? presenceDate.getDate() : -1;
            long longOrgPresenceDate = intYear == -1 ? 0 : (new Date(intYear, intMonth, intDate)).getTime();
            //update by satrya 2012-10-15
            int iAttendaceOnBreakOutBreakIn = 0;
            int idxSch1OnPresenceIn = OFFSET_INDEX_IN + idxFieldName - 1;
            int idxSch1OnPresenceOut = OFFSET_INDEX_OUT + idxFieldName - 1;
            Date existPresenceSch1In = PstEmpSchedule.getPresenceOnSchedule(idxSch1OnPresenceIn, employeeId, currPeriod.getOID());
            Date existPresenceSch1Out = getPresenceOnSchedule(idxSch1OnPresenceOut, employeeId, currPeriod.getOID());

            //range batas out = 16 jam
            // long MAX_NORMAL_SCH_DISTANCE = 16 * 60 * 60 * 1000;//jarak normal antara IN OUT SCHEDULE antara 2 hari yang berbeda
            try {
                iAttendaceOnBreakOutBreakIn = Integer.parseInt(PstSystemProperty.getValueByName("ATTANDACE_ON_BREAK_IN_BREAK_OUT"));//menambahkan system properties
            } catch (Exception e) {
                System.out.println("Exeception ATTANDACE_ON_BREAK_IN_BREAK_OUT:" + e);
            }
            // int idxSch1OnPresenceYesterdayIn = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
            // int idxSch1OnPresenceYesterdayOut = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
            //  long periodIdInOutYesterday = 0;
            //long periodIdOutTomorrow = 0;
           /* if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
             periodIdInOutYesterday = prevPeriod.getOID();
             } else {
             periodIdInOutYesterday = currPeriod.getOID();
             }*/
            //Date existPresenceYesterdaySch1In = getPresenceOnSchedule(idxSch1OnPresenceYesterdayIn, employeeId, periodIdInOutYesterday);
            //Date existPresenceYesterdaySch1Out = getPresenceOnSchedule(idxSch1OnPresenceYesterdayOut, employeeId, periodIdInOutYesterday);
            //long rangeTolerance = 10 * 60 * 1000;
            ScheduleSymbol schSymbol = null;
///            Hashtable scheduleSymbolIdMap = null;
            Vector listScheduleSymbol = new Vector(1, 1);
            try {

                listScheduleSymbol.add(new Long(PstSystemProperty.getValueByName("OID_SPECIAL")));
            } catch (Exception E) {

                System.out.println("EXCEPTION SYS PROP OID_SPECIAL : " + E.toString());
            }

            try {
                listScheduleSymbol.add(new Long(PstSystemProperty.getValueByName("OID_UNPAID")));
            } catch (Exception E) {
                System.out.println("EXCEPTION SYS PROP OID_UNPAID : " + E.toString());
            }
            if (iAttendaceOnBreakOutBreakIn != 0) {
                //scheduleSymbolIdMap = PstScheduleSymbol.getScheduleSymbolIdMap(listScheduleSymbol);
                //mencari SymbolId
                schSymbol = PstEmpSchedule.getDailySchedule(presenceDate, employeeId);
            }
            Date dT = null;
            if (presenceDate != null) {
                dT = (Date) presenceDate.clone();
                dT.setHours(0);
                dT.setMinutes(0);
                dT.setSeconds(0);
            }
            // jika resultset bukan null
            int intPresenceDate = presenceDate.getDate();
            int schld1stCategory = getScheduleCategory(INT_FIRST_SCHEDULE, employeeId, presenceDate);
            if (!rsNull) {


                //update by satrya 2012-10--15
                if (presenceStatus == Presence.STATUS_IN_PERSONAL) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_IN_PERSONAL) {
                        presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_IN_PERSONAL);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(new Date(longSchldBreakIn));
                        if (currPeriod != null) {
                            presence.setPeriodId(currPeriod.getOID());
                        } else {
                            presence.setPeriodId(0);
                        }
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } //update by satrya 2012-10--15
                else if (presenceStatus == Presence.STATUS_CALL_BACK) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_CALL_BACK) {
                        presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_CALL_BACK);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(dT);
                        if (currPeriod != null) {
                            presence.setPeriodId(currPeriod.getOID());
                        } else {
                            presence.setPeriodId(0);
                        }
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } // -------------- START PROSES PENGECEKAN PRESENCE IN ------------                
                else if (presenceStatus == Presence.STATUS_IN) {
                    // waktu ACTUAL_PRESENCE sebelum FIRST_SCHEDULE_PRESENCE_IN maka :                             
                    // - update IN schedule I
                    if (existPresenceSch1In == null || longPresenceTime <= existPresenceSch1In.getTime()) {
                        //System.out.println("... Presence IN before or same to first roster IN ...");
                        indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                        indexSchedule = OFFSET_INDEX_CALENDAR + idxFieldName - 1;
                        if (currPeriod != null) {
                            result.add(String.valueOf(currPeriod.getOID()));
                        } else {
                            result.add(String.valueOf(0));
                        }

                        result.add(String.valueOf(indexResult));
                        result.add(String.valueOf(oidScheduleId));
                        result.add(String.valueOf(indexSchedule));
                    } // waktu SECOND_SCHEDULE_PRESENCE_IN valid (tidak null)                            
                    else if (longSchld2ndIn > 0 && longSchld2ndIn > longSchld1stOut) {
                        long lDiff2ndInto1stOut = longSchld2ndIn - longSchld1stOut;
                        long lAverage2ndInto1stOut = longSchld1stOut + (lDiff2ndInto1stOut / 2);

                        // waktu ACTUAL_PRESENCE antara FIRST_SCHEDULE_PRESENCE_IN dan FIRST_SCHEDULE_PRESENCE_OUT 
                        // ditambah dengan (durasi antara first OUT dengan second IN bagi 2) maka :    
                        //  misal : first OUT = 13:00, second IN = 19:00 
                        //  maka  : lAverage2ndInto1stOut = 16:00
                        // - update IN schedule I                                
                        if (longPresenceTime < lAverage2ndInto1stOut) {
                            // System.out.println("... Presence IN between first roster IN - OUT + average duration between first OUT and second IN ...");
                            indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                            indexSchedule = OFFSET_INDEX_CALENDAR + idxFieldName - 1;
                            if (currPeriod != null) {
                                result.add(String.valueOf(currPeriod.getOID()));
                            } else {
                                result.add(String.valueOf(0));
                            }

                            result.add(String.valueOf(indexResult));
                            result.add(String.valueOf(oidScheduleId));
                            result.add(String.valueOf(indexSchedule));
                        } // waktu ACTUAL_PRESENCE setelah FIRST_SCHEDULE_PRESENCE_OUT maka :                             
                        // - update IN schedule II                                
                        else {
                            // System.out.println("... Presence IN after first roster OUT ...");
                            indexResult = OFFSET_INDEX_IN + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1;
                            indexSchedule = OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1;
                            if (currPeriod != null) {
                                result.add(String.valueOf(currPeriod.getOID()));
                            } else {
                                result.add(String.valueOf(0));
                            }

                            result.add(String.valueOf(indexResult));
                            result.add(String.valueOf(oidScheduleId));
                            result.add(String.valueOf(indexSchedule));
                        }
                    } // waktu SECOND_SCHEDULE_PRESENCE_IN invalid (null atau kosong)                            

                    // .::::::::::: end check schedule hari ini yg normal ::::::::::::..                        
                } // -------------- END PROSES PENGECEKAN PRESENCE IN ------------
                // -------------- START PROSES PENGECEKAN PRESENCE OUT ------------
                else if (presenceStatus == Presence.STATUS_OUT_PERSONAL) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_OUT_PERSONAL) {
                        presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(new Date(longSchldBreakOut));
                        if (currPeriod != null) {
                            presence.setPeriodId(currPeriod.getOID());
                        } else {
                            presence.setPeriodId(0);
                        }
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } //update by satrya 2012-10--15
                else if (presenceStatus == Presence.STATUS_OUT_ON_DUTY) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_OUT_ON_DUTY) {
                        presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_OUT_ON_DUTY);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(dT);
                        if (currPeriod != null) {
                            presence.setPeriodId(currPeriod.getOID());
                        } else {
                            presence.setPeriodId(0);
                        }
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }

                } else if (presenceStatus == Presence.STATUS_OUT) {
                    // .::::::::::: start check schedule hari ini yg normal ::::::::::::..                            
                    // schedule IN dan OUT berada dalam lingkup satu hari

                    //jika schedule cross days atau jamnya 00:00:01 artinya merubah hari
                    // if(dtSchld1stOut!=null && dtSchld1stIn!=null && dtSchld1stOut.getHours()<dtSchld1stIn.getHours()){

                    //kasusnya jika dia schedule tidak cross days tapi datang jam 00:00:01 yg melewati hari
                    // if(dtSchld1stOut!=null && dtSchld1stIn!=null && dtSchld1stIn.getHours()< dtSchld1stOut.getHours()){
                    if (dtSchld1stOut != null && dtSchld1stIn != null && ((isCrossDays
                            || //(existPresenceSch1In!=null && (longPresenceTime - existPresenceSch1In.getTime() < PstEmpSchedule.MAX_NORMAL_SCH_DISTANCE_TODAY))
                            ((longPresenceTime <= (longOutYesterdaySchdl + lookUpAfterOutYesterday))))
                            && presence.getStatus() == Presence.STATUS_OUT)) {
                        //cek jika masih pada hari itu
                      /* long longOutYesterdaySchdl = getLongPresenceDateYesterday(INT_FIRST_SCHEDULE, Presence.STATUS_OUT, employeeId, presenceDate);
                         Date dtTemp = new Date(longOutYesterdaySchdl);
                         Date dtAverage = new Date(dtTemp.getYear(), dtTemp.getMonth(), dtTemp.getDate(), dtTemp.getHours() + RESIDUE_TIME_ON_PRESENCE, dtTemp.getMinutes(), 0);
                         long lAverage = dtAverage.getTime();*/
                        //jika dia ada di dalam out(presence out 2013-07-21) cari IN hari ini 2013-07-2013,jika IN hari ini belum ada kemungkinan presenceOUt tsb adalah Out kemaren
                        //dan apakah dia waktu di temukan in adalah schedule cross days
                        if (existPresenceSch1In != null) {
                            //if(longPresenceTime < lAverage && presence.getStatus()==Presence.STATUS_OUT &&  longPresenceTime < MAX_NORMAL_SCH_DISTANCE){
                            if (((longPresenceTime <= (longOutYesterdaySchdl + lookUpAfterOutYesterday)))) {
                                // if((existPresenceSch1In!=null && (longPresenceTime - existPresenceSch1In.getTime() < PstEmpSchedule.MAX_NORMAL_SCH_DISTANCE_TODAY))/*((longPresenceTime <= (longOutYesterdaySchdl + lookUpAfterOutYesterday)))*/){    
                                indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                indexSchedule = OFFSET_INDEX_CALENDAR + idxFieldNameYesterday - 1;

                                if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                    if (prevPeriod != null) {
                                        result.add(String.valueOf(prevPeriod.getOID()));
                                    } else {
                                        result.add(String.valueOf(0));
                                    }
                                } else {
                                    //result.add(String.valueOf(currPeriod.getOID()));
                                    if (currPeriod != null) {
                                        result.add(String.valueOf(currPeriod.getOID()));
                                    } else {
                                        result.add(String.valueOf(0));
                                    }
                                }
                                result.add(String.valueOf(indexResult));
                                result.add(String.valueOf(oidScheduleId));
                                result.add(String.valueOf(indexSchedule));
                            } else {
                                indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                indexSchedule = OFFSET_INDEX_CALENDAR + idxFieldName - 1;
                                if (currPeriod != null) {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                } else {
                                    result.add(String.valueOf(0));
                                }

                                result.add(String.valueOf(indexResult));
                                result.add(String.valueOf(oidScheduleId));
                                result.add(String.valueOf(indexSchedule));
                            }
                        } else {

                            if (isCrossDays || ((longPresenceTime <= (longOutYesterdaySchdl + lookUpAfterOutYesterday)))
                                    //if (isCrossDays || (existPresenceSch1In!=null && (longPresenceTime - existPresenceSch1In.getTime() < PstEmpSchedule.MAX_NORMAL_SCH_DISTANCE_TODAY))/*((longPresenceTime <= (longOutYesterdaySchdl + lookUpAfterOutYesterday)))*/
                                    && presence.getStatus() == Presence.STATUS_OUT) {
                                indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                indexSchedule = OFFSET_INDEX_CALENDAR + idxFieldNameYesterday - 1;

                                if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                    if (prevPeriod != null) {
                                        result.add(String.valueOf(prevPeriod.getOID()));
                                    } else {
                                        result.add(String.valueOf(0));
                                    }
                                } else {
                                    //result.add(String.valueOf(currPeriod.getOID()));
                                    if (currPeriod != null) {
                                        result.add(String.valueOf(currPeriod.getOID()));
                                    } else {
                                        result.add(String.valueOf(0));
                                    }
                                }
                                result.add(String.valueOf(indexResult));
                                result.add(String.valueOf(oidScheduleId));
                                result.add(String.valueOf(indexSchedule));
                            } else {
                                if (existPresenceSch1Out == null || longPresenceTime > existPresenceSch1Out.getTime()) {
                                    // System.out.println("... Presence OUT (one day) before first roster OUT ...");
                                    indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                    indexSchedule = OFFSET_INDEX_CALENDAR + idxFieldName - 1;
                                    if (currPeriod != null) {
                                        result.add(String.valueOf(currPeriod.getOID()));
                                    } else {
                                        result.add(String.valueOf(0));
                                    }

                                    result.add(String.valueOf(indexResult));
                                    result.add(String.valueOf(oidScheduleId));
                                    result.add(String.valueOf(indexSchedule));
                                }
                            }


                        }


                    } else {
                        if (existPresenceSch1Out == null || longPresenceTime > existPresenceSch1Out.getTime()) {
                            // System.out.println("... Presence OUT (one day) before first roster OUT ...");
                            indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                            indexSchedule = OFFSET_INDEX_CALENDAR + idxFieldName - 1;
                            if (currPeriod != null) {
                                result.add(String.valueOf(currPeriod.getOID()));
                            } else {
                                result.add(String.valueOf(0));
                            }

                            result.add(String.valueOf(indexResult));
                            result.add(String.valueOf(oidScheduleId));
                            result.add(String.valueOf(indexSchedule));
                        } // waktu SECOND_SCHEDULE_PRESENCE_OUT valid (tidak null)                            
                        else if (longSchld2ndOut > 0) {
                            // waktu ACTUAL_OUT diantara FIRST_SCHEDULE_PRESENCE_OUT dan SECOND_SCHEDULE_PRESENCE_IN maka : 
                            // - update OUT schedule I
                            if (longPresenceTime < longSchld2ndIn) {
                                // System.out.println("... Presence OUT (one day) between first roster OUT and second roster IN ...");
                                indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                indexSchedule = OFFSET_INDEX_CALENDAR + idxFieldName - 1;
                                if (currPeriod != null) {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                } else {
                                    result.add(String.valueOf(0));
                                }

                                result.add(String.valueOf(indexResult));
                                result.add(String.valueOf(oidScheduleId));
                                result.add(String.valueOf(indexSchedule));
                            } // waktu ACTUAL_PRESENCE setelah SECOND_SCHEDULE_PRESENCE_IN maka :                             
                            // - update OUT schedule II                                                                
                            else {
                                // System.out.println("... Presence OUT (one day) after first roster IN ...");
                                indexResult = OFFSET_INDEX_OUT + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1;
                                indexSchedule = OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1;
                                if (currPeriod != null) {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                } else {
                                    result.add(String.valueOf(0));
                                }

                                result.add(String.valueOf(indexResult));
                                result.add(String.valueOf(oidScheduleId));
                                result.add(String.valueOf(indexSchedule));
                            }
                        } // waktu SECOND_SCHEDULE_PRESENCE_OUT invalid (null atau kosong) 
                    }

                    // .::::::::::: start check schedule hari ini yg normal ::::::::::::..                            
                    // -------------- END PROSES PENGECEKAN PRESENCE OUT ------------
                }
                // --- end of Result not null ---
            } // jika pada saat presence date belum ada schedule
            // maka hanya check schedule hr sebelumnya (kemarin .red) :) 
            else if (rsNull) {
                // -------------- START PROSES PENGECEKAN PRESENCE IN ------------
                //if (presenceStatus == STATUS_IN || presenceStatus == STATUS_IN_BREAK || presenceStatus == STATUS_IN_CALLBACK || presenceStatus == STATUS_IN_LUNCH) {
                //update by satrya 2012-10--15
                if (presenceStatus == Presence.STATUS_IN_PERSONAL) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_IN_PERSONAL) {
                        presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_IN_PERSONAL);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(new Date(longSchldBreakIn));
                        if (currPeriod != null) {
                            presence.setPeriodId(currPeriod.getOID());
                        } else {
                            presence.setPeriodId(0);
                        }
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } //update by satrya 2012-10--15
                else if (presenceStatus == Presence.STATUS_CALL_BACK) {
                    if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_CALL_BACK) {
                        presence = new Presence();
                        presence.setPresenceDatetime(presenceDate);
                        presence.setEmployeeId(employeeId);
                        presence.setStatus(Presence.STATUS_CALL_BACK);
                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                        presence.setScheduleLeaveId(schSymbol.getOID());
                        presence.setScheduleDatetime(dT);
                        if (currPeriod != null) {
                            presence.setPeriodId(currPeriod.getOID());
                        } else {
                            presence.setPeriodId(0);
                        }
                        PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                    }
                } else if (presenceStatus == Presence.STATUS_IN) {
                    // if (presenceStatus == Presence.STATUS_IN || presenceStatus == Presence.STATUS_CALL_BACK) {
                    // pengecekan "yesterday' schedule" yang lintas hari utk first schedule
                    //intPresenceDate = presenceDate.getDate();
                    //int schld1stCategory = getScheduleCategory(INT_FIRST_SCHEDULE, employeeId, presenceDate);

                    // category schedule lintas hari (NIGHT_SHIFT atau ACROSS DAY atau EOD)
                    if (schld1stCategory == PstScheduleCategory.CATEGORY_NIGHT_WORKER || schld1stCategory == PstScheduleCategory.CATEGORY_ACCROSS_DAY || schld1stCategory == PstScheduleCategory.CATEGORY_EXTRA_ON_DUTY) {
                        // mencari nilai 'long' dari schedule OUT hari kemarin
                        //longOutYesterdaySchdl = getLongPresenceDateYesterday(INT_FIRST_SCHEDULE, Presence.STATUS_OUT, employeeId, presenceDate);
                        if (longPresenceTime <= longOutYesterdaySchdl) {
                            // pada hr ini tidak ada schedule (OFF atau null) 
                            // System.out.println("... Presence IN for night shift / across day / EOD' schedule when today is OFF ...");
                            indexResult = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
                            indexSchedule = OFFSET_INDEX_CALENDAR + idxFieldNameYesterday - 1;
                            result.add(String.valueOf(intPresenceDate == 1 ? periodIdBeforeCurr : 0));
                            result.add(String.valueOf(indexResult));
                            result.add(String.valueOf(oidScheduleId));
                            result.add(String.valueOf(indexSchedule));
                        }

                    } // -------------- END PROSES PENGECEKAN PRESENCE IN ------------
                    //update by satrya 2012-10--15
                    else if (presenceStatus == Presence.STATUS_OUT_PERSONAL) {
                        if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_OUT_PERSONAL) {
                            presence = new Presence();
                            presence.setPresenceDatetime(presenceDate);
                            presence.setEmployeeId(employeeId);
                            presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                            presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                            presence.setScheduleLeaveId(schSymbol.getOID());
                            presence.setScheduleDatetime(new Date(longSchldBreakOut));
                            if (currPeriod != null) {
                                presence.setPeriodId(currPeriod.getOID());
                            } else {
                                presence.setPeriodId(0);
                            }
                            PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                        }
                    } //update by satrya 2012-10--15
                    else if (presenceStatus == Presence.STATUS_OUT_ON_DUTY) {
                        if (longSchldBreakOut != 0 && presenceStatus == Presence.STATUS_OUT_ON_DUTY) {
                            presence = new Presence();
                            presence.setPresenceDatetime(presenceDate);
                            presence.setEmployeeId(employeeId);
                            presence.setStatus(Presence.STATUS_OUT_ON_DUTY);
                            presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                            presence.setScheduleLeaveId(schSymbol.getOID());
                            presence.setScheduleDatetime(dT);
                            if (currPeriod != null) {
                                presence.setPeriodId(currPeriod.getOID());
                            } else {
                                presence.setPeriodId(0);
                            }
                            PstPresence.updateStatusByDateTimeAndEmployeeId(presence);
                        }
                    } // -------------- START PROSES PENGECEKAN PRESENCE OUT ------------
                    else if (presenceStatus == Presence.STATUS_OUT) {
                        //  if (presenceStatus == Presence.STATUS_OUT || presenceStatus == Presence.STATUS_OUT_ON_DUTY) {
                        // pengecekan "yesterday' schedule" yang lintas hari utk first schedule
                        //int intPresenceDate = presenceDate.getDate();
                        //int schld1stCategory = getScheduleCategory(INT_FIRST_SCHEDULE, employeeId, presenceDate);

                        // category schedule lintas hari (NIGHT_SHIFT atau ACROSS DAY)
                        if (schld1stCategory == PstScheduleCategory.CATEGORY_NIGHT_WORKER || schld1stCategory == PstScheduleCategory.CATEGORY_ACCROSS_DAY || schld1stCategory == PstScheduleCategory.CATEGORY_EXTRA_ON_DUTY) {
                            // mencari nilai 'long' dari schedule OUT hari kemarin
                            //long longOutYesterdaySchdl = getLongPresenceDateYesterday(INT_FIRST_SCHEDULE, Presence.STATUS_OUT, employeeId, presenceDate);
                            Date dtTemp = new Date(longOutYesterdaySchdl);
                            Date dtAverage = new Date(dtTemp.getYear(), dtTemp.getMonth(), dtTemp.getDate(), dtTemp.getHours() + RESIDUE_TIME_ON_PRESENCE, dtTemp.getMinutes(), 0);
                            long lAverage = dtAverage.getTime();
                            if (longPresenceTime < lAverage) {
                                // pada hr ini tidak ada schedule (OFF atau null)
                                // System.out.println("... Presence OUT for night shift / across day / EOD' schedule when today is OFF ...");
                                indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                indexSchedule = OFFSET_INDEX_CALENDAR + idxFieldNameYesterday - 1;
                                result.add(String.valueOf(intPresenceDate == 1 ? periodIdBeforeCurr : 0));
                                result.add(String.valueOf(indexResult));
                                result.add(String.valueOf(oidScheduleId));
                                result.add(String.valueOf(indexSchedule));
                            }
                        }
                    }
                    // -------------- END PROSES PENGECEKAN PRESENCE OUT ------------

                }
            }
            return result;

        } catch (Exception e) {
            System.out.println("getPeriodAndTableIndex Exception : " + e.toString());
            return new Vector(1, 1);
        }
    }

    public static Vector getPeriodAndTableIndex(boolean rsNull, long longSchld1stIn, long longSchld1stOut, long longSchld2ndIn, long longSchld2ndOut, long periodId, long employeeId, int presenceStatus, Date presenceDate) {
        return getPeriodAndTableIndex(rsNull, longSchld1stIn, longSchld1stOut, longSchld2ndIn, longSchld2ndOut, 0L, 0L, periodId, employeeId, presenceStatus, presenceDate);
    }

    /**
     * @param rsNull
     * @param periodId
     * @param employeeId
     * @param presenceStatus
     * @param presenceDate
     * @return
     */
    //public static Vector getPeriodAndTableIndexVer2(boolean rsNull, long longSchld1stIn, long longSchld1stOut,
    //      long longSchld2ndIn, long longSchld2ndOut, long periodId, long employeeId, Presence presence, Date presenceDate) {
    //update by satrya 2012-08-10
    //t
//update by devin 2014-02-24
    //public static Vector getPeriodAndTableIndexVer2(Period prevPeriod, Period currPeriod, Period nextPeriod, boolean rsNull, long longSchld1stIn, long longSchld1stOut,
    // long longSchld2ndIn, long longSchld2ndOut, long longSchldBreakOut, long longSchldBreakIn, long employeeId, Presence presence, Date presenceDate) 
    public static Vector getPeriodAndTableIndexVer2(Period prevPeriod, Period currPeriod, Period nextPeriod, boolean rsNull, long longSchld1stIn, long longSchld1stOut,
            long longSchld2ndIn, long longSchld2ndOut, long longSchldBreakOut, long longSchldBreakIn, long employeeId, Presence presence, Date presenceDate, long longSchld1stOutOvertime, long longSchld1stInOvertime) {
        Vector result = new Vector(1, 1);
        if (currPeriod == null) {
            return result;
        }
        try {
            int indexResult = -1;
            //update by satrya 2013-05-28
            //di seccond di set 0 gara tidak di hitung secondnya
            presenceDate.setSeconds(0);
            Date dtYesterday = new Date(presenceDate.getYear(), presenceDate.getMonth(), presenceDate.getDate() - 1);
            int idxFieldName = getIdxNameOfTableBySelectedDate(presenceDate);
            //update by satrya 2012-09-04
            int idxFieldNameYesterday = getIdxNameOfTableBySelectedDate(dtYesterday);
            int idxSch1OnPresenceIn = OFFSET_INDEX_IN + idxFieldName - 1;
            int idxSch1OnPresenceOut = OFFSET_INDEX_OUT + idxFieldName - 1;
            //update by satrya 2012-09-04
            //mencari index yesterday
            int idxSch1OnPresenceYesterdayIn = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
            int idxSch1OnPresenceYesterdayOut = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;

            Date dtTommorow = new Date(presenceDate.getYear(), presenceDate.getMonth(), presenceDate.getDate() + 1);
            int idxFieldNameTomorrowIn = getIdxNameOfTableBySelectedDate(dtTommorow);
            int idxSch1OnPresenceTomorrowIn = OFFSET_INDEX_IN + idxFieldNameTomorrowIn - 1;
            long longPresenceTime = presenceDate.getTime();
            int intYear = presenceDate.getYear();
            int intMonth = presenceDate.getMonth();
            int intDate = presenceDate.getDate();
            long longOrgPresenceDate = (new Date(intYear, intMonth, intDate)).getTime();
            long halfBetwenSchIn1Out1 = (longSchld1stOut - longSchld1stIn) / 2;
            long quartBetwenSchIn1Out1 = (longSchld1stOut - longSchld1stIn) / 4;
            //long lookUpPresenceRange = quartBetwenSchIn1Out1;// saat ini yang dipakai untuk look up range presence ke schedule di sisi adalah 1/4 dari dari jarak in dan out schedule
//update by satrya 2012-08-11
            long quartBetwenSchBreakOutBreakIn = Math.abs(longSchldBreakIn - longSchldBreakOut) / 4;

            long lookUpBreakOutBreakIn = quartBetwenSchBreakOutBreakIn;
            long lHalftBreakOutBreakIn = Math.abs((longSchldBreakIn - longSchldBreakOut) / 2);

            Date existPresenceSch1In = getPresenceOnSchedule(idxSch1OnPresenceIn, employeeId, currPeriod.getOID());
            Date existPresenceSch1Out = getPresenceOnSchedule(idxSch1OnPresenceOut, employeeId, currPeriod.getOID());
            //update by satrya 2013-06-03
            //int statusPresenceExistIn = PstPresence.getStatusPresence(existPresenceSch1In, employeeId);
            int statusPresenceExistOut = PstPresence.getStatusPresence(existPresenceSch1Out, employeeId);
            int statusPresenceCurr = PstPresence.getStatusPresence(presenceDate, employeeId);


            //update by satrya 2012-09-11
            //untuk yang ExistBreakOutYest
            //int countPersonalInOut = 0;// menentukan personal OUT dan Personal IN, kalau genap set Personal OUT dan sebaliknya
            int NEXT_IS_PERSONAL_OUT = 0; //BI
            if (existPresenceSch1In != null) {
                if ((PstEmpSchedule.getCountPersonalOutIn(existPresenceSch1In, presenceDate, employeeId) % 2) == 0) { // untuk mempermudah di bagi modulus, jika ganjil berarti  maka menjadi PO jika genap maka menjadi PI
                    NEXT_IS_PERSONAL_OUT = 1;//BO
                }
            }
            //mencari existspresence kemarin
            long periodIdInOutYesterday = 0;
            long periodIdOutTomorrow = 0;
            if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                periodIdInOutYesterday = prevPeriod.getOID();
            } else {
                periodIdInOutYesterday = currPeriod.getOID();
            }
            Date existPresenceYesterdaySch1In = getPresenceOnSchedule(idxSch1OnPresenceYesterdayIn, employeeId, periodIdInOutYesterday);
            Date existPresenceYesterdaySch1Out = getPresenceOnSchedule(idxSch1OnPresenceYesterdayOut, employeeId, periodIdInOutYesterday);

            //update by satrya 2013-06-03
            int statusPresenceExistYesterdayIn = PstPresence.getStatusPresence(existPresenceYesterdaySch1In, employeeId);
            int statusPresenceExistYesterdayOut = PstPresence.getStatusPresence(existPresenceYesterdaySch1Out, employeeId);

            //update by satrya 2013-12-04
            //menambhakan pengecekan untuk hari atau periode awal priska
            Period yesterdayPeriod = new Period();
            try {
            yesterdayPeriod = PstPeriod.getPeriodBySelectedDate(dtYesterday);
            }catch(Exception e){}
            boolean isCroosScheduleYesterday = PstEmpSchedule.getScheduleDayCrossDay(yesterdayPeriod, employeeId, presence);
           // isCroosScheduleYesterday = true;
            //mencari nilai apakah sudah ada break out hari ini
            int NEXT_IS_PERSONAL_OUT_YESTERDAY = 0;
            if (existPresenceYesterdaySch1In != null) {
                if ((PstEmpSchedule.getCountPersonalOutInYesterday(existPresenceYesterdaySch1In, presenceDate, employeeId) % 2) == 0) { // untuk mempermudah di bagi modulus, jika ganjil berarti  maka menjadi PO jika genap maka menjadi PI
                    NEXT_IS_PERSONAL_OUT_YESTERDAY = 1;
                }
            }

            if (DateCalc.dayDifference(presenceDate, currPeriod.getEndDate()) == 0) {
                periodIdOutTomorrow = nextPeriod.getOID();
            } else {
                periodIdOutTomorrow = currPeriod.getOID();
            }
            Date existPresenceTommorowSch1In = getPresenceOnSchedule(idxSch1OnPresenceTomorrowIn, employeeId, periodIdOutTomorrow);

            //long periodIdBeforeCurr = PstPeriod.getPeriodIdJustBefore(periodId);
            // Period periode = null;
            /**
             * //update by satrya 2012-08-08 Desc -> iAttendaceOnNoSchedule ==
             * 1 :jam in
             * ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œ
             * out diambil dari presence dengan mengkomparasi default schedule,
             * jika schedule tidak ada leave dan schedule diambil attendance
             * yang pertama sebagai IN dan attendance terakhir sebagai out.
             */
            int iAttendaceOnNoSchedule = 0;
            try {
                iAttendaceOnNoSchedule = Integer.parseInt(PstSystemProperty.getValueByName("ATTANDACE_ON_NO_SCHEDULE"));//menambahkan system properties
            } catch (Exception e) {
                System.out.println("Exeception ATTANDACE_ON_NO_SCHEDULE:" + e);
            }
            
            String ClientName = "";
            try {
                ClientName = String.valueOf(PstSystemProperty.getValueByName("CLIENT_NAME"));//menambahkan system properties
            } catch (Exception e) {
                System.out.println("Exeception ATTANDACE_ON_NO_SCHEDULE:" + e);
            }
            //end update
            //update by satrya 2012-08-22
            //settingan jika ada attendance search On leave
            ///untk balidhinsati
            /*int iAttendaceSearchOnLeave = 0;
             try {
             iAttendaceSearchOnLeave = Integer.parseInt(PstSystemProperty.getValueByName("ATTANDACE_SEARCH_ON_LEAVE"));//menambahkan system properties
             } catch (Exception e) {
             System.out.println("Exeception ATTANDACE_SEARCH_ON_LEAVE:" + e);
             }*/
            //update by satrya 2012-08-25
            //untuk balidhinasty
            int iAttendaceOnBreakOutBreakIn = 0;
            try {
                iAttendaceOnBreakOutBreakIn = Integer.parseInt(PstSystemProperty.getValueByName("ATTANDACE_ON_BREAK_IN_BREAK_OUT"));//menambahkan system properties
            } catch (Exception e) {
                System.out.println("Exeception ATTANDACE_ON_BREAK_IN_BREAK_OUT:" + e);
            }
            long dayH = 0 ;
            try {
                dayH = Long.parseLong(PstSystemProperty.getValueByName("OID_DAY_H"));//menambahkan system properties
            } catch (Exception e) {
                System.out.println("Exeception OID_DAY_H:" + e);
            }

            /*  try {
             periode = PstPeriod.fetchExc(periodId);
             } catch (Exception e) {
             System.out.println(e);
             }
             if (periode == null) {
             return result;
             }*/

            Hashtable scheduleSymbolIdMap = null;
            ScheduleSymbol schSymbol = null;
            //update by satrya 2012-08-21
            //untuk special Leave
            //untuk special Leave <satrya 2012-08-01>
            Vector listScheduleSymbol = new Vector(1, 1);
            try {

                listScheduleSymbol.add(new Long(PstSystemProperty.getValueByName("OID_SPECIAL")));
            } catch (Exception E) {

                System.out.println("EXCEPTION SYS PROP OID_SPECIAL : " + E.toString());
            }

            try {
                listScheduleSymbol.add(new Long(PstSystemProperty.getValueByName("OID_UNPAID")));
            } catch (Exception E) {
                System.out.println("EXCEPTION SYS PROP OID_UNPAID : " + E.toString());
            }
            if (iAttendaceOnBreakOutBreakIn != 0) {
                scheduleSymbolIdMap = PstScheduleSymbol.getScheduleSymbolIdMap(listScheduleSymbol);
                //mencari SymbolId
                schSymbol = PstEmpSchedule.getDailySchedule(presenceDate, employeeId);
            }
            //end
            //update by devin 2014-02-28
            //ada kasus karyawan datang ke kantor tanpa overtime padahal schedulnya off
            if (longSchld1stIn == longSchld1stOut && isCroosScheduleYesterday != true) {
                Date dtSchedulIn = new Date(longSchld1stIn);
                Date dtSchedulOut = new Date(longSchld1stOut);
                dtSchedulIn.setHours(8);
                dtSchedulIn.setMinutes(0);
                dtSchedulIn.setSeconds(0);
                dtSchedulOut.setHours(17);
                dtSchedulOut.setMinutes(0);
                dtSchedulOut.setSeconds(0);
                longSchld1stIn = dtSchedulIn.getTime();
                longSchld1stOut = dtSchedulOut.getTime();
            }


            if (!rsNull && longSchld1stIn != longSchld1stOut) {
                //jika pada saat ini Ada schedule
                // baik yang 1stSchedule maupun yang 2stSchedule

                /**
                 * * *************************** UNTUK 2stSchedule
                 * *****************************************
                 */
                if (longSchld2ndIn != 0 && longSchld2ndOut != 0) {
                } /**
                 * *************************** UNTUK 1stSchedule
                 * *****************************************
                 */
                else {
                    int MAX_NORMAL_SCH_DISTANCE = 15 * 60 * 60 * 1000;//jarak normal antara IN OUT SCHEDULE antara 2 hari yang berbeda
                    int intPresenceDate = presenceDate.getDate();
                    ScheduleSymbol schYesterday = getScheduleDateTimeYesterday(INT_FIRST_SCHEDULE, employeeId, presenceDate);//dtYesterday
                    int schld1stCategory = getScheduleCategory(INT_FIRST_SCHEDULE, employeeId, presenceDate);
                    if (schYesterday != null && schYesterday.getTimeIn().getTime() == schYesterday.getTimeOut().getTime()) {
                        schYesterday.getTimeIn().setHours(6);//melakukan set jika schedulenya off
                        schYesterday.getTimeOut().setHours(18);
                    }
                    ScheduleSymbol schTommorow = getScheduleDateTimeTommorow(INT_FIRST_SCHEDULE, employeeId, presenceDate);
                    if (schTommorow != null && schTommorow.getTimeIn().getTime() == schTommorow.getTimeOut().getTime()) {
                        schTommorow.getTimeIn().setHours(6);//melakukan set jika schedulenya off
                        schTommorow.getTimeOut().setHours(18);
                    }
                    /*long longInYesterdaySchdl = getLongPresenceDateYesterday(INT_FIRST_SCHEDULE, Presence.STATUS_IN,
                     employeeId, new Date(presenceDate.getTime() - (1 * 24 * 60 * 60 * 1000)));*/
                    long longInYesterdaySchdl = schYesterday != null && schYesterday.getTimeIn() != null ? schYesterday.getTimeIn().getTime() : 0L;
                    // mencari nilai 'long' dari schedule OUT hlongPresenceTime < lAverage2ndInto1stOutAcrossDayari kemarin
                    long longOutYesterdaySchdl = schYesterday != null && schYesterday.getTimeOut() != null ? schYesterday.getTimeOut().getTime() : 0L;

                    long longSchldBreakOutYesterday = schYesterday != null && schYesterday.getBreakOut() != null ? schYesterday.getBreakOut().getTime() : 0L;
                    long longSchldBreakInYesterday = schYesterday != null && schYesterday.getBreakIn() != null ? schYesterday.getBreakIn().getTime() : 0L;
                    long longInTommorowSchdl = schTommorow != null && schTommorow.getTimeIn() != null ? schTommorow.getTimeIn().getTime() : 0L;
                    long lookUpBetweenInOut = Math.abs(((longSchld1stOut - longSchld1stIn)) / 2);//
                    
                    //priska 20150629
                    //perubahan dilakukan karena untuk kasus di borobudur absen bisa lebih awal 4 jam sebelum schedulenya
                    
                    long lookUpBeforIn = 0;
                    long lookUpAfterOut = 0 ;
                    if (ClientName.equals("BOROBUDUR")) {
                        lookUpBeforIn = (longSchld1stIn - longOutYesterdaySchdl) > (MAX_NORMAL_SCH_DISTANCE)
                            ? Math.abs(((longSchld1stIn - longOutYesterdaySchdl)) / 2)
                            : (Math.abs(((longSchld1stIn - longOutYesterdaySchdl)) / 3));
                        lookUpAfterOut = (longInTommorowSchdl - longSchld1stOut) > (MAX_NORMAL_SCH_DISTANCE)
                            ? Math.abs((longInTommorowSchdl - longSchld1stOut) / 2)
                            : Math.abs(((longInTommorowSchdl - longSchld1stOut) * 4) / 3);
                    } else {
                        lookUpBeforIn = (longSchld1stIn - longOutYesterdaySchdl) > (MAX_NORMAL_SCH_DISTANCE)
                            ? Math.abs(((longSchld1stIn - longOutYesterdaySchdl)) / 2)
                            : (Math.abs(((longSchld1stIn - longOutYesterdaySchdl)) / 5));
                        lookUpAfterOut = (longInTommorowSchdl - longSchld1stOut) > (MAX_NORMAL_SCH_DISTANCE)
                            ? Math.abs((longInTommorowSchdl - longSchld1stOut) / 2)
                            : Math.abs(((longInTommorowSchdl - longSchld1stOut) * 4) / 5);
                    }
                    //
                    //MAX_NORMAL_SCH_DISTANCE = (int) 54000000
                    //longOutYesterdaySchdl = (long) 1434708000000
                    //longOutYesterdaySchdl = (long) 1434708000000
                    
                    //update by satrya 2012-12-09 unfunction
//                    Vector listCekOvertime = PstOvertimeDetail.listOvertimeOverlap(0, 0, 1, 0, "", new Date(longSchld1stIn - lookUpBeforIn), new Date(longSchld1stIn), 0, "", employeeId, PstOvertimeDetail.fieldNames[PstOvertimeDetail.FLD_DATE_FROM] + " ASC ");
//                    if (listCekOvertime != null && listCekOvertime.size() > 0) {
//                        OvertimeDetail overtimeDetail = (OvertimeDetail) listCekOvertime.get(0);
//                        // long ovtFromDate = overtimeDetail.getDateFrom().getTime();
//
//                        lookUpBeforIn = (longSchld1stIn - lookUpBeforIn) < (overtimeDetail.getDateFrom().getTime() - 3600000L) ? lookUpBeforIn
//                                : (longSchld1stIn - (overtimeDetail.getDateFrom().getTime() - 3600000L));
//
//
//
//                    }
                   //

                    long lookUpAfterOutYesterday = Math.abs(((longSchld1stIn - longOutYesterdaySchdl))) - lookUpBeforIn;
                    long lookUpBeforeInTomorrow = Math.abs(((longInTommorowSchdl - longSchld1stOut))) - lookUpAfterOut;
                    long lookUpBeforeOutYesterday = Math.abs((longOutYesterdaySchdl - longInYesterdaySchdl) / 2);
                    long rangeTolerance = 10 * 60 * 1000;//toleransi waktu 10 menit dimana akan di lakukan pergantian
                    long rangeToleranceBreakOutIn = 3 * 60 * 1000; // toleransi untuk personal in dan Out

                    /**
                     * *********************** UNTUK MENCARI STATUS IN H (Hari
                     * Ini)***********************************
                     */
                    if ((longSchld1stIn - lookUpBeforIn) < longPresenceTime
                            && (longPresenceTime <= (longSchld1stIn + lookUpBetweenInOut))) {
                        //int schld1stCategory = getScheduleCategory(INT_FIRST_SCHEDULE, employeeId, presenceDate);

                        //update by satrya 2013-12-04
                        //kasusnya hari ini schedulenya cross day dan besok dia ada plan lembur, akan tetapi dia gk jadi datang, maka dia harusnya presencenya di out
                       // if (isCroosScheduleYesterday && (existPresenceYesterdaySch1Out == null ||  existPresenceYesterdaySch1Out.getTime() >= longPresenceTime - rangeTolerance) && (longPresenceTime - rangeTolerance) > existPresenceYesterdaySch1In.getTime()) {
                          if (((isCroosScheduleYesterday && (existPresenceYesterdaySch1Out == null ) && (existPresenceYesterdaySch1In != null) )) && (((longPresenceTime - rangeTolerance) > existPresenceYesterdaySch1In.getTime()))){
                                  
                             if (isCroosScheduleYesterday && (((longSchld1stIn - lookUpBeforIn) < longPresenceTime ) && (longPresenceTime <= (longSchld1stIn + lookUpBetweenInOut))) ) {
                                 indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                    indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    //UPDATE BY satrya 2013-06-03
                                    //jika dia ada out on dutty dan tugas kantor
                                    //presence.setStatus(Presence.STATUS_IN);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_IN);
                                    }
                                    //update by satrya 2013-05-28
                                    //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                                    if (existPresenceYesterdaySch1Out != null) {
                                        existPresenceYesterdaySch1Out.setSeconds(0);
                                        if (longPresenceTime == existPresenceYesterdaySch1Out.getTime()) {
                                            int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(currPeriod.getOID(), presence.getEmployeeId(), idxSch1OnPresenceYesterdayOut, null);
                                        }
                                    }
                             } else {
                                 indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                    long updatePeriodId = 0;
                                    if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                        result.add(String.valueOf(prevPeriod.getOID()));
                                        updatePeriodId = prevPeriod.getOID();
                                    } else {
                                        result.add(String.valueOf(currPeriod.getOID()));
                                        updatePeriodId = currPeriod.getOID();
                                    }
                                    //update by satrya 2013-5-28
                                    //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                                    if (existPresenceSch1In != null) {
                                        existPresenceSch1In.setSeconds(0);
                                        if (longPresenceTime == existPresenceSch1In.getTime()) {
                                            int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(updatePeriodId, presence.getEmployeeId(), OFFSET_INDEX_IN + idxFieldNameYesterday, null);
                                        }
                                    }
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    // presence.setStatus(Presence.STATUS_OUT);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_OUT);
                                    }
                                    if (existPresenceYesterdaySch1Out != null) {
                                        if (iAttendaceOnBreakOutBreakIn != 0
                                                && NEXT_IS_PERSONAL_OUT == 0
                                                && (longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutIn))) {
                                            // && (existPresenceSch1Out.getTime() > (longSchldBreakIn + lHalftBreakOutBreakIn))) {
                                            /* 
                                             * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                             * untuk di set sbg Personal IN
                                             */

                                            Presence newPresence = new Presence();
                                            newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                            newPresence.setScheduleDatetime(new Date(longSchldBreakInYesterday));
                                            newPresence.setEmployeeId(employeeId);

                                            newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            newPresence.setScheduleLeaveId(schSymbol.getOID());
                                            //newPresence.setPeriodId(currPeriod.getOID());
                                            //update by satrya 2013-06-03
                                            //jika ada statusnya out on dutti dan call back
                                            //   newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                            if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                                newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                                PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                            }


                                        }
                                    }
                             }
                              
                            
                            

                        } else if (((isCroosScheduleYesterday && (existPresenceYesterdaySch1Out != null ) && (existPresenceYesterdaySch1In != null) )) &&  (((existPresenceYesterdaySch1Out.getTime() >= (longPresenceTime - rangeTolerance)) && (longPresenceTime - rangeTolerance) > existPresenceYesterdaySch1In.getTime()))){
                                  // 1434845400000
                                  // 1434897060000
                            indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                            long updatePeriodId = 0;
                            if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                result.add(String.valueOf(prevPeriod.getOID()));
                                updatePeriodId = prevPeriod.getOID();
                            } else {
                                result.add(String.valueOf(currPeriod.getOID()));
                                updatePeriodId = currPeriod.getOID();
                            }
                            //update by satrya 2013-5-28
                            //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                            if (existPresenceSch1In != null) {
                                existPresenceSch1In.setSeconds(0);
                                if (longPresenceTime == existPresenceSch1In.getTime()) {
                                    int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(updatePeriodId, presence.getEmployeeId(), OFFSET_INDEX_IN + idxFieldNameYesterday, null);
                                }
                            }
                            result.add(String.valueOf(indexResult));
                            //update by satrya 2013-06-03
                            //jika ada out on dutty atau tugas kantor
                            // presence.setStatus(Presence.STATUS_OUT);
                            if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                presence.setStatus(Presence.STATUS_OUT);
                            }
                            if (existPresenceYesterdaySch1Out != null) {
                                if (iAttendaceOnBreakOutBreakIn != 0
                                        && NEXT_IS_PERSONAL_OUT == 0
                                        && (longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutIn))) {
                                    // && (existPresenceSch1Out.getTime() > (longSchldBreakIn + lHalftBreakOutBreakIn))) {
                                    /* 
                                     * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                     * untuk di set sbg Personal IN
                                     */

                                    Presence newPresence = new Presence();
                                    newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                    newPresence.setScheduleDatetime(new Date(longSchldBreakInYesterday));
                                    newPresence.setEmployeeId(employeeId);

                                    newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                    newPresence.setScheduleLeaveId(schSymbol.getOID());
                                    //newPresence.setPeriodId(currPeriod.getOID());
                                    //update by satrya 2013-06-03
                                    //jika ada statusnya out on dutti dan call back
                                    //   newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                    if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                        newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                        PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                    }


                                }
                            }
                            
//update by satrya 2013-12-04
                        //if (existPresenceSch1In == null || (longPresenceTime <= existPresenceSch1In.getTime())) {
                        
                        } else if (existPresenceSch1In == null || (longPresenceTime <= existPresenceSch1In.getTime())) {
                        
                            //update by satrya 2013-05-28
                            //if (existPresenceSch1In == null || (longPresenceTime < existPresenceSch1In.getTime())) {
                            indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                            result.add(String.valueOf(currPeriod.getOID()));
                            result.add(String.valueOf(indexResult));
                            //UPDATE BY satrya 2013-06-03
                            //jika dia ada out on dutty dan tugas kantor
                            //presence.setStatus(Presence.STATUS_IN);
                            if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                presence.setStatus(Presence.STATUS_IN);
                            }
                            //update by satrya 2013-05-28
                            //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                            if (existPresenceYesterdaySch1Out != null) {
                                existPresenceYesterdaySch1Out.setSeconds(0);
                                if (longPresenceTime == existPresenceYesterdaySch1Out.getTime()) {
                                    int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(currPeriod.getOID(), presence.getEmployeeId(), idxSch1OnPresenceYesterdayOut, null);
                                }
                            }

                        } else {
                            if ((longPresenceTime - rangeTolerance) > existPresenceSch1In.getTime()) {
                                /* check apakah sudah ada OUT*/
                                if (existPresenceSch1Out == null || existPresenceSch1Out.getTime() < longPresenceTime) {
                                    indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    //presence.setStatus(Presence.STATUS_OUT);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_OUT);
                                    }
                                    if (iAttendaceOnBreakOutBreakIn != 0 && existPresenceSch1Out != null
                                            && NEXT_IS_PERSONAL_OUT == 1
                                            && ((existPresenceSch1Out.getTime() + rangeToleranceBreakOutIn) < longPresenceTime)) {
                                        /* 
                                         * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                         * untuk di set sbg Personal OUT
                                         */
                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceSch1Out);
                                        newPresence.setEmployeeId(employeeId);
                                        newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakOut));
                                        //newPresence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //keterangan mencari status kerja
                                        //PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        if (statusPresenceExistOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistOut != Presence.STATUS_CALL_BACK) {
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }
                                    } else {
                                        //mecari personal IN
                                        if (iAttendaceOnBreakOutBreakIn != 0 && existPresenceSch1Out != null
                                                && NEXT_IS_PERSONAL_OUT == 0
                                                && ((existPresenceSch1Out.getTime() + rangeToleranceBreakOutIn) < longPresenceTime)) {
                                            Presence newPresence = new Presence();
                                            newPresence.setPresenceDatetime(existPresenceSch1Out);
                                            newPresence.setScheduleDatetime(new Date(longSchldBreakIn));
                                            newPresence.setEmployeeId(employeeId);
                                            newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                            newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            newPresence.setScheduleLeaveId(schSymbol.getOID());
                                            //newPresence.setPeriodId(currPeriod.getOID());
                                            //update by satrya 2013-06-03
                                            //keterangan mencari status kerja
                                            //PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);

                                            if (statusPresenceExistOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistOut != Presence.STATUS_CALL_BACK) {
                                                PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                            }
                                        }
                                    }

                                } else {
                                    if (iAttendaceOnBreakOutBreakIn != 0 && existPresenceSch1Out != null
                                            && (longPresenceTime) < (existPresenceSch1Out.getTime() - rangeToleranceBreakOutIn)) {

                                        presence.setScheduleDatetime(new Date(longSchldBreakOut));
                                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        presence.setScheduleLeaveId(schSymbol.getOID());
                                        presence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //jika ada statusnya kerja atau out on dutty atau callback
                                        //presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                        if (statusPresenceCurr != Presence.STATUS_OUT_ON_DUTY && statusPresenceCurr != Presence.STATUS_CALL_BACK) {
                                            presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                        }
                                    }
                                }
                            }
                        }

                    } /**
                     * * *********************** UNTUK MENCARI STATUS OUT H
                     * (Hari INI)***********************************
                     */ 
                    //priska 20150629 kondisi dimana presence berada diantara 4 jam sebelum maupun sesudah schedule out
                    else if (((longSchld1stOut - lookUpBetweenInOut) < longPresenceTime)
                            && (longPresenceTime <= (longSchld1stOut + lookUpAfterOut))) {
                        //jika belum ada IN maka di set IN
                        //update by satrya 2012-09-20 
                      
                        if (schld1stCategory == PstScheduleCategory.CATEGORY_NIGHT_WORKER || schld1stCategory == PstScheduleCategory.CATEGORY_ACCROSS_DAY) {
                            //kasus ada yg kerja 24 jam, tpi outnya tidak muncul
                            if (existPresenceYesterdaySch1Out == null) {
                                indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;

                                if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                    result.add(String.valueOf(prevPeriod.getOID()));
                                } else {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                }
                                result.add(String.valueOf(indexResult));
                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //presence.setStatus(Presence.STATUS_OUT);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_OUT);
                                }

                            } else {
                                //artinya dia ada In hari ini
                                //update by satrya 2013-12-04
                                //kasusnya jika sdh ada in maka akan dilakukan cek apakah dia lebih kecil dari IN
                                /**
                                 * indexResult = OFFSET_INDEX_IN + idxFieldName
                                 * - 1;
                                 * result.add(String.valueOf(currPeriod.getOID()));
                                 * result.add(String.valueOf(indexResult));
                                 * //update by satrya 2013-06-03 //jika ada out
                                 * on dutty atau tugas kantor //
                                 * presence.setStatus(Presence.STATUS_IN);
                                 * if(presence.getStatus()!=Presence.STATUS_CALL_BACK
                                 * &&
                                 * presence.getStatus()!=Presence.STATUS_OUT_ON_DUTY){
                                 * presence.setStatus(Presence.STATUS_IN); }
                                 */
                                if (existPresenceSch1In == null || (longPresenceTime < existPresenceSch1In.getTime())) {
                                    indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    // presence.setStatus(Presence.STATUS_IN);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_IN);
                                    }
                                } else {
                                    indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_OUT);
                                    }

                                }
                            }
                        } else if (existPresenceSch1In != null && (longPresenceTime < existPresenceSch1In.getTime())) {
                            if (schld1stCategory == PstScheduleCategory.CATEGORY_OFF || schld1stCategory == PstScheduleCategory.CATEGORY_ACCROSS_DAY) {
                                if (existPresenceYesterdaySch1In != null && existPresenceYesterdaySch1Out == null) {
                                    indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_OUT);
                                    }
                                } else {
                                    indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    // presence.setStatus(Presence.STATUS_IN);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_IN);
                                    }
                                }

                            } else {
                                indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                result.add(String.valueOf(currPeriod.getOID()));
                                result.add(String.valueOf(indexResult));
                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                // presence.setStatus(Presence.STATUS_IN);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_IN);
                                }
                            }
                        }  else if ( existPresenceSch1In == null ) { //jika sebelumnya tidak ada schedule in
                            if (schld1stCategory == PstScheduleCategory.CATEGORY_OFF || schld1stCategory == PstScheduleCategory.CATEGORY_ACCROSS_DAY) {
                                if (existPresenceYesterdaySch1In != null && existPresenceYesterdaySch1Out == null) {
                                    indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_OUT);
                                    }
                                } else {
                                    indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    // presence.setStatus(Presence.STATUS_IN);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_IN);
                                    }
                                }

                            } else {
                                //ini masalah di borobudur priska 20150717 attendancenya borobudur
                                if (ClientName.equals("BOROBUDUR")  || ClientName.equals("MINIMART")){
                                    indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    // presence.setStatus(Presence.STATUS_IN);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_OUT);
                                    }
                                } else {
                                    indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    // presence.setStatus(Presence.STATUS_IN);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_IN);
                                    }
                                }
                            }
                            /**
                             * //update by satrya 2013-06-18 else if
                             * (existPresenceSch1In == null || (longPresenceTime
                             * < existPresenceSch1In.getTime())) {
                             *
                             * indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                             * result.add(String.valueOf(currPeriod.getOID()));
                             * result.add(String.valueOf(indexResult)); //update
                             * by satrya 2013-06-03 //jika ada out on dutty atau
                             * tugas kantor //
                             * presence.setStatus(Presence.STATUS_IN);
                             * if(presence.getStatus()!=Presence.STATUS_CALL_BACK
                             * &&
                             * presence.getStatus()!=Presence.STATUS_OUT_ON_DUTY){
                             * presence.setStatus(Presence.STATUS_IN); }                              *
                             */
                        } else {
                            if ((existPresenceSch1Out == null )
                               && (existPresenceSch1In != null && (longPresenceTime > (existPresenceSch1In.getTime() + rangeTolerance)))) {
                                indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                result.add(String.valueOf(currPeriod.getOID()));
                                result.add(String.valueOf(indexResult));
                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //  presence.setStatus(Presence.STATUS_OUT);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_OUT);
                                }
                                if (existPresenceSch1Out != null) {
                                    if (iAttendaceOnBreakOutBreakIn != 0
                                            && NEXT_IS_PERSONAL_OUT == 0
                                            && (longPresenceTime > (existPresenceSch1Out.getTime() + rangeToleranceBreakOutIn))) {
                                        // && (existPresenceSch1Out.getTime() > (longSchldBreakIn + lHalftBreakOutBreakIn))) {
                                    /* 
                                         * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                         * untuk di set sbg Personal IN
                                         */

                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceSch1Out);
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakIn));
                                        newPresence.setEmployeeId(employeeId);


                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        //newPresence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //jika ada statusnya kerja atrau out on dutty atau callback
                                        //  newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                        if (statusPresenceExistOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistOut != Presence.STATUS_CALL_BACK) {
                                            newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }


                                    } else {//mencari BREAK OUT
                                        if (iAttendaceOnBreakOutBreakIn != 0
                                                /*&&(longPresenceTime) < (existPresenceSch1Out.getTime() - rangeTolerance)
                                                 && longPresenceTime > (existPresenceSch1Out.getTime() + rangeTolerance))*/
                                                && NEXT_IS_PERSONAL_OUT == 1
                                                && (longPresenceTime > (existPresenceSch1Out.getTime() + rangeToleranceBreakOutIn))) {


                                            Presence newPresence = new Presence();
                                            newPresence.setPresenceDatetime(existPresenceSch1Out);

                                            newPresence.setScheduleDatetime(new Date(longSchldBreakOut));
                                            newPresence.setEmployeeId(employeeId);

                                            newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            newPresence.setScheduleLeaveId(schSymbol.getOID());
                                            //newPresence.setPeriodId(currPeriod.getOID()); 
                                            //update by satrya 2013-06-03
                                            //jika ada statusnya kerja atrau out on dutty atau callback
                                            //newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            if (statusPresenceExistOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistOut != Presence.STATUS_CALL_BACK) {
                                                newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                                PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                            }

                                        }
                                    }
                                }
                            } else if ((existPresenceSch1Out != null && (longPresenceTime > existPresenceSch1Out.getTime()))
                               && (existPresenceSch1In != null && (longPresenceTime > (existPresenceSch1In.getTime() + rangeTolerance)))) {
                                indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                result.add(String.valueOf(currPeriod.getOID()));
                                result.add(String.valueOf(indexResult));
                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //  presence.setStatus(Presence.STATUS_OUT);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_OUT);
                                }
                                if (existPresenceSch1Out != null) {
                                    if (iAttendaceOnBreakOutBreakIn != 0
                                            && NEXT_IS_PERSONAL_OUT == 0
                                            && (longPresenceTime > (existPresenceSch1Out.getTime() + rangeToleranceBreakOutIn))) {
                                        // && (existPresenceSch1Out.getTime() > (longSchldBreakIn + lHalftBreakOutBreakIn))) {
                                    /* 
                                         * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                         * untuk di set sbg Personal IN
                                         */

                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceSch1Out);
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakIn));
                                        newPresence.setEmployeeId(employeeId);


                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        //newPresence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //jika ada statusnya kerja atrau out on dutty atau callback
                                        //  newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                        if (statusPresenceExistOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistOut != Presence.STATUS_CALL_BACK) {
                                            newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }


                                    } else {//mencari BREAK OUT
                                        if (iAttendaceOnBreakOutBreakIn != 0
                                                /*&&(longPresenceTime) < (existPresenceSch1Out.getTime() - rangeTolerance)
                                                 && longPresenceTime > (existPresenceSch1Out.getTime() + rangeTolerance))*/
                                                && NEXT_IS_PERSONAL_OUT == 1
                                                && (longPresenceTime > (existPresenceSch1Out.getTime() + rangeToleranceBreakOutIn))) {


                                            Presence newPresence = new Presence();
                                            newPresence.setPresenceDatetime(existPresenceSch1Out);

                                            newPresence.setScheduleDatetime(new Date(longSchldBreakOut));
                                            newPresence.setEmployeeId(employeeId);

                                            newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            newPresence.setScheduleLeaveId(schSymbol.getOID());
                                            //newPresence.setPeriodId(currPeriod.getOID()); 
                                            //update by satrya 2013-06-03
                                            //jika ada statusnya kerja atrau out on dutty atau callback
                                            //newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            if (statusPresenceExistOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistOut != Presence.STATUS_CALL_BACK) {
                                                newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                                PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                            }

                                        }
                                    }
                                }
                            } 
                        }
                    } else {
                        /**
                         * *********************** UNTUK MENCARI CROSS DAY H-1
                         * (Yesterday)***********************************
                         */
                        /**
                         * *********************** UNTUK MENCARI STATUS IN
                         * CROSS DAY H-1
                         * (Yesterday)***********************************
                         */
                        if ((longInYesterdaySchdl < longPresenceTime) && longPresenceTime < (longInYesterdaySchdl + lookUpBeforeOutYesterday)) {
                            if (existPresenceYesterdaySch1In == null || (longPresenceTime < existPresenceYesterdaySch1In.getTime())) {
                                indexResult = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
                                if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                    result.add(String.valueOf(prevPeriod.getOID()));
                                } else {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                }
                                result.add(String.valueOf(indexResult));
                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //  presence.setStatus(Presence.STATUS_IN);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_IN);
                                }
                            } else {
                                if ((longPresenceTime - rangeTolerance) > existPresenceYesterdaySch1In.getTime()) {
                                    /* check apakah sudah ada OUT Kemaren*/
                                    if (existPresenceYesterdaySch1Out == null || existPresenceYesterdaySch1Out.getTime() < longPresenceTime) {
                                        indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                        if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                            result.add(String.valueOf(prevPeriod.getOID()));
                                        } else {
                                            result.add(String.valueOf(currPeriod.getOID()));
                                        }
                                        result.add(String.valueOf(indexResult));
                                        //update by satrya 2013-06-03
                                        //jika ada out on dutty atau tugas kantor
                                        // presence.setStatus(Presence.STATUS_OUT);
                                        if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                            presence.setStatus(Presence.STATUS_OUT);
                                        }
                                        if (iAttendaceOnBreakOutBreakIn != 0
                                                && existPresenceSch1Out != null
                                                && NEXT_IS_PERSONAL_OUT_YESTERDAY == 1 //mencari BoUT
                                                && ((existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutIn) < longPresenceTime)) {
                                            /* 
                                             * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                             * untuk di set sbg Personal OUT
                                             */
                                            /**
                                             * if(existPresenceBreakOutYesterday
                                             * == null ||
                                             * ((existPresenceBreakOutYesterday.getTime()
                                             * + rangeTolerance) <
                                             * longPresenceTime)){ ///PRESENCE
                                             * BREAK OUT } else
                                             * if(existPresenceBreakInYesterday
                                             * == null || (
                                             * existPresenceBreakInYesterday
                                             * !=null && longPresenceTime >
                                             * (existPresenceBreakIn.getTime() +
                                             * rangeTolerance))){ PRESENCE BREAK
                                             * IN }
                                             */
                                            Presence newPresence = new Presence();
                                            newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                            newPresence.setEmployeeId(employeeId);

                                            newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            newPresence.setScheduleLeaveId(schSymbol.getOID());
                                            newPresence.setScheduleDatetime(new Date(longSchldBreakOutYesterday));
                                            //newPresence.setPeriodId(currPeriod.getOID());
                                            //update by satrya 2013-06-03
                                            //jika ada statusnya out on dutti dan call back
                                            //newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                                newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                                PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                            }


                                        } //mencari IN PERSONAL
                                        else {
                                            if (iAttendaceOnBreakOutBreakIn != 0
                                                    && existPresenceSch1Out != null
                                                    && NEXT_IS_PERSONAL_OUT_YESTERDAY == 1 //mencari PO
                                                    && ((existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutIn) < longPresenceTime)) {
                                                Presence newPresence = new Presence();
                                                newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                                newPresence.setEmployeeId(employeeId);

                                                newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                                newPresence.setScheduleLeaveId(schSymbol.getOID());
                                                newPresence.setScheduleDatetime(new Date(longSchldBreakInYesterday));
                                                //newPresence.setPeriodId(currPeriod.getOID());

                                                //update by satrya 2013-06-03
                                                //jika ada statusnya out on dutti dan call back
                                                //newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                                if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                                    newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                                    PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                                }


                                            }
                                        }
                                    } else {
                                        if (iAttendaceOnBreakOutBreakIn != 0
                                                && (longPresenceTime) < (existPresenceYesterdaySch1Out.getTime() - rangeToleranceBreakOutIn)) {
                                            /**
                                             * if(existPresenceBreakOutYesterday
                                             * == null ||
                                             * ((existPresenceBreakOutYesterday.getTime()
                                             * + rangeTolerance) <
                                             * longPresenceTime)){ ///PRESENCE
                                             * BREAK OUT } else
                                             * if(existPresenceBreakInYesterday
                                             * == null || (
                                             * existPresenceBreakInYesterday
                                             * !=null && longPresenceTime >
                                             * (existPresenceBreakIn.getTime() +
                                             * rangeTolerance))){ PRESENCE BREAK
                                             * IN }
                                             */
                                            presence.setScheduleDatetime(new Date(longSchldBreakOutYesterday));
                                            presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            presence.setScheduleLeaveId(schSymbol.getOID());
                                            presence.setPeriodId(currPeriod.getOID());

                                            //update by satrya 2013-06-03
                                            //jika ada statusnya out on dutti dan call back
                                            //  presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            if (statusPresenceCurr != Presence.STATUS_OUT_ON_DUTY && statusPresenceCurr != Presence.STATUS_CALL_BACK) {
                                                presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            }


                                        }
                                    }
                                }
                            }

                        } else if (((longOutYesterdaySchdl - lookUpBeforeOutYesterday) < longPresenceTime)
                                && (longPresenceTime <= (longOutYesterdaySchdl + lookUpAfterOutYesterday))) {
                             /// mencarihari yang cross day OUT
                            if (existPresenceYesterdaySch1Out == null || (longPresenceTime >= existPresenceYesterdaySch1Out.getTime())) {
                                //if (existPresenceYesterdaySch1Out == null || (longPresenceTime > existPresenceYesterdaySch1Out.getTime())) {
                                indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                long updatePeriodId = 0;
                                if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                    result.add(String.valueOf(prevPeriod.getOID()));
                                    updatePeriodId = prevPeriod.getOID();
                                } else {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    updatePeriodId = currPeriod.getOID();
                                }
                                //update by satrya 2013-5-28
                                //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                                if (existPresenceSch1In != null) {
                                    existPresenceSch1In.setSeconds(0);
                                    if (longPresenceTime == existPresenceSch1In.getTime()) {
                                        int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(updatePeriodId, presence.getEmployeeId(), OFFSET_INDEX_IN + idxFieldNameYesterday, null);
                                    }
                                }
                                result.add(String.valueOf(indexResult));
                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                // presence.setStatus(Presence.STATUS_OUT);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_OUT);
                                }
                                if (existPresenceYesterdaySch1Out != null) {
                                    if (iAttendaceOnBreakOutBreakIn != 0
                                            && NEXT_IS_PERSONAL_OUT == 0
                                            && (longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutIn))) {
                                        // && (existPresenceSch1Out.getTime() > (longSchldBreakIn + lHalftBreakOutBreakIn))) {
                                    /* 
                                         * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                         * untuk di set sbg Personal IN
                                         */

                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakInYesterday));
                                        newPresence.setEmployeeId(employeeId);

                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        //newPresence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //jika ada statusnya out on dutti dan call back
                                        //   newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                        if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                            newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }


                                    }
                                }
                            }

                        } else {
                            if (existPresenceTommorowSch1In == null || (longPresenceTime < existPresenceTommorowSch1In.getTime())) {
                                indexResult = OFFSET_INDEX_IN + idxFieldName;
                                long updatePeriodId = 0;
                                if (DateCalc.dayDifference(presenceDate, currPeriod.getEndDate()) == 0) {
                                    result.add(String.valueOf(nextPeriod.getOID()));
                                    updatePeriodId = nextPeriod.getOID();
                                } else {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    updatePeriodId = currPeriod.getOID();
                                }

                                result.add(String.valueOf(indexResult));
                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //  presence.setStatus(Presence.STATUS_IN);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_IN);
                                }
                            }
                        }
                    }

                }///end 1stSchedule
            }

            // --- end of Result not null ---
            // jika pada saat presence date belum ada schedule
            // maka hanya check schedule hr sebelumnya (kemarin .red) :)  
            if (rsNull || longSchld1stIn == longSchld1stOut) {
                //update by satrya  2012-09-03
                /**
                 * DES : untuk yang tidak ada schedule Di set di sistem properti
                 * NO SCHEDULE
                 */
                if (iAttendaceOnNoSchedule == 1) {
                    ScheduleSymbol schYesterday = getScheduleDateTimeYesterday(INT_FIRST_SCHEDULE, employeeId, presenceDate);
                    ScheduleSymbol schTommorow = getScheduleDateTimeTommorow(INT_FIRST_SCHEDULE, employeeId, presenceDate);

                    long longInYesterdaySchdl = schYesterday != null && schYesterday.getTimeIn() != null ? schYesterday.getTimeIn().getTime() : 0L;
                    // mencari nilai 'long' dari schedule OUT hlongPresenceTime < lAverage2ndInto1stOutAcrossDayari kemarin
                    long longOutYesterdaySchdl = schYesterday != null && schYesterday.getTimeOut() != null ? schYesterday.getTimeOut().getTime() : 0L;
                    long longSchldBreakOutYesterday = schYesterday != null && schYesterday.getBreakOut() != null ? schYesterday.getBreakOut().getTime() : 0L;
                    long longSchldBreakInYesterday = schYesterday != null && schYesterday.getBreakIn() != null ? schYesterday.getBreakIn().getTime() : 0L;
                    long longInTommorowSchdl = schTommorow != null && schTommorow.getTimeIn() != null ? schTommorow.getTimeIn().getTime() : 0L;
                    long lLookUpBeforeInTommorowSchdl = (3 * 60 * 60 * 1000);
                    long lHalftBreakOutBreakInYesterday = Math.abs((longSchldBreakInYesterday - longSchldBreakOutYesterday) / 2);
                    boolean yesterdayMatch = false;
                    boolean scheduleYesterDayisOff = false;
                    if (longOutYesterdaySchdl - longInYesterdaySchdl == 0) {
                        Vector schedule = getFieldIndexWillScheduleOff(currPeriod, prevPeriod, employeeId, presence, presenceDate);
                        /* gambarannya result.add(longSchld1stIn);
                         result.add(longSchld1stOut);
                         result.add(longSchld2ndIn);
                         result.add(longSchld2ndOut);
                         result.add(longSchldBreakOut);
                         result.add(longSchldBreakIn);*/
                        if (schedule.size() > 1){
                        longInYesterdaySchdl = (Long) schedule.get(1);
                        longOutYesterdaySchdl = (Long) schedule.get(2);
                         scheduleYesterDayisOff = true;
                        }
                        
                       
                    }
                    long lookUpBetweenInOutYesterday = Math.abs(((longOutYesterdaySchdl - longInYesterdaySchdl)) / 2);//
                    long lookUpBeforInYesterday = 0;

                    long lookUpAfterOutYesterday = 12 * 60 * 60 * 1000;
                    //long lookUpAfterOutYesterday = Math.abs(((longSchld1stIn - longOutYesterdaySchdl))) - lookUpBeforIn;
                    long lookUpBeforeInTomorrow = 3 * 60 * 60 * 1000;
                    //update by satrya 2013-12-05
                    //kasusnya karena dia off plan ot nya smpe jam 00 tpi dia out jam 06
                    long lookUpBeforeInTomorrow2 = 8 * 60 * 60 * 1000;

                    long lookUpBeforeOutYesterday = Math.abs((longOutYesterdaySchdl - longInYesterdaySchdl) / 2);
                    long rangeTolerance = 10 * 60 * 1000;//toleransi waktu 10 menit dimana akan di lakukan pergantian
                    long rangeToleranceBreakOutInYesterday = 3 * 60 * 1000;//toleransi waktu 3 menit untuk personal in dan out
                    /**
                     * *** MENCARI STATUS IN YANG TIDAK ADA SCHEDULE ******
                     */
                    if ((longInYesterdaySchdl - lookUpBeforInYesterday) < longPresenceTime
                            && (longPresenceTime <= (longInYesterdaySchdl + lookUpBetweenInOutYesterday + (scheduleYesterDayisOff ? lookUpBeforeInTomorrow2 : 0)))) {
                        //update by satrya 2013-12-05
                        //kasusnya karena dia off plan ot nya smpe jam 00 tpi dia out jam 06
                        //if ((longInYesterdaySchdl - lookUpBeforInYesterday) < longPresenceTime && (longPresenceTime <= (longInYesterdaySchdl + lookUpBetweenInOutYesterday))) {

                        if (existPresenceYesterdaySch1In == null || (longPresenceTime < existPresenceYesterdaySch1In.getTime())) {
                            indexResult = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
                            // result.add(String.valueOf(currPeriod.getOID()));
                            if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                result.add(String.valueOf(prevPeriod.getOID()));
                            } else {
                                result.add(String.valueOf(currPeriod.getOID()));
                            }
                            result.add(String.valueOf(indexResult));
                            //update by satrya 2013-06-03
                            //jika ada out on dutty atau tugas kantor
                            //  presence.setStatus(Presence.STATUS_IN);
                            if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                presence.setStatus(Presence.STATUS_IN);
                            }
                        } else {
                            if ((longPresenceTime - rangeTolerance) > existPresenceYesterdaySch1In.getTime()) {
                                /* check apakah sudah ada OUT*/
                                if (existPresenceYesterdaySch1Out == null || existPresenceYesterdaySch1Out.getTime() < longPresenceTime) {
                                    indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                    if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                        result.add(String.valueOf(prevPeriod.getOID()));
                                    } else {
                                        result.add(String.valueOf(currPeriod.getOID()));
                                    }
                                    result.add(String.valueOf(indexResult));

                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    //  presence.setStatus(Presence.STATUS_OUT);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_OUT);
                                    }
                                    //update by devin 2014-02-27
                                    if (iAttendaceOnBreakOutBreakIn != 0
                                            && NEXT_IS_PERSONAL_OUT_YESTERDAY == 0 && longSchld1stIn == longSchld1stOut) {
                                        //&& ((longSchldBreakInYesterday - lHalftBreakOutBreakInYesterday) < existPresenceYesterdaySch1Out.getTime())
                                        //&& (longPresenceTime > (longSchldBreakInYesterday + lHalftBreakOutBreakInYesterday))) {
                                    /* 
                                         * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                         * untuk di set sbg Personal IN
                                         */
                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakInYesterday));
                                        newPresence.setEmployeeId(employeeId);

                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        //newPresence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //jika ada statusnya out on dutti dan call back
                                        // newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                        if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                            newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }



                                    }
                                    if (iAttendaceOnBreakOutBreakIn != 0 && existPresenceYesterdaySch1Out != null
                                            && NEXT_IS_PERSONAL_OUT_YESTERDAY == 1
                                            && ((existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutInYesterday) < longPresenceTime)) {
                                        /* 
                                         * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                         * untuk di set sbg Personal OUT
                                         */
                                        /**
                                         * if(existPresenceBreakOutYesterday ==
                                         * null ||
                                         * ((existPresenceBreakOutYesterday.getTime()
                                         * + rangeTolerance) <
                                         * longPresenceTime)){ ///PRESENCE BREAK
                                         * OUT } else
                                         * if(existPresenceBreakInYesterday ==
                                         * null || (
                                         * existPresenceBreakInYesterday !=null
                                         * && longPresenceTime >
                                         * (existPresenceBreakIn.getTime() +
                                         * rangeTolerance))){ PRESENCE BREAK IN
                                         * }
                                         */
                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                        newPresence.setEmployeeId(employeeId);

                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakOutYesterday));
                                        //newPresence.setPeriodId(currPeriod.getOID());

                                        //update by satrya 2013-06-03
                                        //jika ada statusnya out on dutti dan call back
                                        // newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                        if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                            newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }


                                    }
                                } else {
                                    if (iAttendaceOnBreakOutBreakIn != 0 && existPresenceYesterdaySch1Out != null
                                            && (longPresenceTime) < (existPresenceYesterdaySch1Out.getTime() - rangeToleranceBreakOutInYesterday)) {
                                        /**
                                         * if(existPresenceBreakOutYesterday ==
                                         * null ||
                                         * ((existPresenceBreakOutYesterday.getTime()
                                         * + rangeTolerance) <
                                         * longPresenceTime)){ ///PRESENCE BREAK
                                         * OUT } else
                                         * if(existPresenceBreakInYesterday ==
                                         * null || (
                                         * existPresenceBreakInYesterday !=null
                                         * && longPresenceTime >
                                         * (existPresenceBreakIn.getTime() +
                                         * rangeTolerance))){ PRESENCE BREAK IN
                                         * }
                                         */
                                        presence.setScheduleDatetime(new Date(longSchldBreakOutYesterday));
                                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        presence.setScheduleLeaveId(schSymbol.getOID());
                                        if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                            result.add(String.valueOf(prevPeriod.getOID()));
                                        } else {
                                            result.add(String.valueOf(currPeriod.getOID()));
                                        }

                                        //update by satrya 2013-06-03
                                        //jika ada statusnya out on dutti dan call back
                                        // newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                        if (statusPresenceCurr != Presence.STATUS_OUT_ON_DUTY && statusPresenceCurr != Presence.STATUS_CALL_BACK) {
                                            presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                        }


                                    }
                                }
                            }
                        }

                    } ////end
                    /**
                     * ***** MENCARI OUT YANG TIDAK ADA SCHEDULE ******
                     */
                    else if (((longOutYesterdaySchdl - lookUpBetweenInOutYesterday) < longPresenceTime)
                            && (longPresenceTime <= (longOutYesterdaySchdl + lookUpAfterOutYesterday))) {
                        if ((existPresenceYesterdaySch1In == null || (longPresenceTime < existPresenceYesterdaySch1In.getTime())) && longPresenceTime <  (longOutYesterdaySchdl-lookUpBeforeOutYesterday)  ) {
                            indexResult = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
                            if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                result.add(String.valueOf(prevPeriod.getOID()));
                            } else {
                                result.add(String.valueOf(currPeriod.getOID()));
                            }
                            result.add(String.valueOf(indexResult));

                            //update by satrya 2013-06-03
                            //jika ada out on dutty atau tugas kantor
                            //  presence.setStatus(Presence.STATUS_IN);
                            if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                presence.setStatus(Presence.STATUS_IN);
                            }
                        } else {
                            if ((existPresenceYesterdaySch1Out == null || (longPresenceTime > existPresenceYesterdaySch1Out.getTime()))
                                    && ((existPresenceYesterdaySch1In != null && (longPresenceTime > (existPresenceYesterdaySch1In.getTime() + rangeTolerance))) )) {
                                indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                    result.add(String.valueOf(prevPeriod.getOID()));
                                } else {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                }
                                result.add(String.valueOf(indexResult));

                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //  presence.setStatus(Presence.STATUS_OUT);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_OUT);
                                }
                                if (existPresenceSch1Out != null) {
                                    /* if (iAttendaceOnBreakOutBreakIn != 0 
                                     && existStatusBreakOutYesterday == 2 &&(longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeTolerance))
                                     && ((longSchldBreakInYesterday - lHalftBreakOutBreakInYesterday) < existPresenceYesterdaySch1Out.getTime())
                                     && (existPresenceYesterdaySch1Out.getTime() > (longSchldBreakInYesterday + lHalftBreakOutBreakInYesterday))) {
                                     */
                                    if (iAttendaceOnBreakOutBreakIn != 0
                                            && NEXT_IS_PERSONAL_OUT_YESTERDAY == 0
                                            && (longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutInYesterday))) {
                                        //&& ((longSchldBreakInYesterday - lHalftBreakOutBreakInYesterday) < existPresenceYesterdaySch1Out.getTime())
                                        //&& (longPresenceTime > (longSchldBreakInYesterday + lHalftBreakOutBreakInYesterday))) {
                                    /* 
                                         * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                         * untuk di set sbg Personal IN
                                         */
                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakInYesterday));
                                        newPresence.setEmployeeId(employeeId);

                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        //newPresence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //jika ada statusnya out on dutti dan call back
                                        // newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                        if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                            newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }



                                    } else {
                                        /*if(iAttendaceOnBreakOutBreakIn != 0 
                                         &&(longPresenceTime) < (existPresenceYesterdaySch1Out.getTime() - rangeTolerance)
                                         || (iAttendaceOnBreakOutBreakIn != 0 && existStatusBreakOutYesterday != 2
                                         && longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeTolerance))){
                                         */
                                        if (iAttendaceOnBreakOutBreakIn != 0
                                                && NEXT_IS_PERSONAL_OUT_YESTERDAY == 1
                                                && (longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutInYesterday))) {
                                            //&& ((existPresenceYesterdaySch1Out.getTime() - lHalftBreakOutBreakInYesterday) < existPresenceYesterdaySch1Out.getTime())
                                            // && (longPresenceTime > (longSchldBreakOutYesterday + lHalftBreakOutBreakInYesterday))){
                                            // || (iAttendaceOnBreakOutBreakIn != 0 && existStatusBreakOut != 2

                                            Presence newPresence = new Presence();
                                            newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                            newPresence.setScheduleDatetime(new Date(longSchldBreakOutYesterday));
                                            newPresence.setEmployeeId(employeeId);

                                            newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            newPresence.setScheduleLeaveId(schSymbol.getOID());
                                            //newPresence.setPeriodId(currPeriod.getOID()); 
                                            //update by satrya 2013-06-03
                                            //jika ada statusnya out on dutti dan call back
                                            //  newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                                newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                                PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                            }

                                        }
                                    }
                                }
                            } else {
                                indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                    result.add(String.valueOf(prevPeriod.getOID()));
                                } else {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                }
                                result.add(String.valueOf(indexResult));

                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //  presence.setStatus(Presence.STATUS_OUT);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_OUT);
                                }
                                if (existPresenceSch1Out != null) {
                                    /* if (iAttendaceOnBreakOutBreakIn != 0 
                                     && existStatusBreakOutYesterday == 2 &&(longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeTolerance))
                                     && ((longSchldBreakInYesterday - lHalftBreakOutBreakInYesterday) < existPresenceYesterdaySch1Out.getTime())
                                     && (existPresenceYesterdaySch1Out.getTime() > (longSchldBreakInYesterday + lHalftBreakOutBreakInYesterday))) {
                                     */
                                    if (iAttendaceOnBreakOutBreakIn != 0
                                            && NEXT_IS_PERSONAL_OUT_YESTERDAY == 0
                                            && (longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutInYesterday))) {
                                        //&& ((longSchldBreakInYesterday - lHalftBreakOutBreakInYesterday) < existPresenceYesterdaySch1Out.getTime())
                                        //&& (longPresenceTime > (longSchldBreakInYesterday + lHalftBreakOutBreakInYesterday))) {
                                    /* 
                                         * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                         * untuk di set sbg Personal IN
                                         */
                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakInYesterday));
                                        newPresence.setEmployeeId(employeeId);

                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        //newPresence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //jika ada statusnya out on dutti dan call back
                                        // newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                        if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                            newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }



                                    } else {
                                        /*if(iAttendaceOnBreakOutBreakIn != 0 
                                         &&(longPresenceTime) < (existPresenceYesterdaySch1Out.getTime() - rangeTolerance)
                                         || (iAttendaceOnBreakOutBreakIn != 0 && existStatusBreakOutYesterday != 2
                                         && longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeTolerance))){
                                         */
                                        if (iAttendaceOnBreakOutBreakIn != 0
                                                && NEXT_IS_PERSONAL_OUT_YESTERDAY == 1
                                                && (longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutInYesterday))) {
                                            //&& ((existPresenceYesterdaySch1Out.getTime() - lHalftBreakOutBreakInYesterday) < existPresenceYesterdaySch1Out.getTime())
                                            // && (longPresenceTime > (longSchldBreakOutYesterday + lHalftBreakOutBreakInYesterday))){
                                            // || (iAttendaceOnBreakOutBreakIn != 0 && existStatusBreakOut != 2

                                            Presence newPresence = new Presence();
                                            newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                            newPresence.setScheduleDatetime(new Date(longSchldBreakOutYesterday));
                                            newPresence.setEmployeeId(employeeId);

                                            newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            newPresence.setScheduleLeaveId(schSymbol.getOID());
                                            //newPresence.setPeriodId(currPeriod.getOID()); 
                                            //update by satrya 2013-06-03
                                            //jika ada statusnya out on dutti dan call back
                                            //  newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                                newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                                PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    } ///end
                    /**
                     * **** MENCARI HARI BERIKUTNBYA YG TIDAK ADA SCHEDULE
                     * *******
                     */
                    else if ((longInTommorowSchdl - lookUpBeforeInTomorrow) > longPresenceTime && longPresenceTime < longInTommorowSchdl) {
                        //update by satrya 2013-05-28
                        //kasusnya schedule hari ini dia ada off, tpi schedule tomorow In(6.30) dan outTommorow 15
                        // else if ((longInTommorowSchdl - lookUpBeforeInTomorrow) < longPresenceTime && longPresenceTime < longInTommorowSchdl) {
                        if (existPresenceYesterdaySch1In == null || (longPresenceTime < existPresenceYesterdaySch1In.getTime())) {
                            indexResult = OFFSET_INDEX_IN + idxFieldNameTomorrowIn - 1;
                            long updatePeriod = 0;
                            if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                result.add(String.valueOf(prevPeriod.getOID()));
                                updatePeriod = prevPeriod.getOID();
                            } else {
                                result.add(String.valueOf(currPeriod.getOID()));
                                updatePeriod = currPeriod.getOID();
                            }
                            //update by satrya 2013-05-28
                            //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                            if (existPresenceSch1In != null) {
                                existPresenceSch1In.setSeconds(0);
                                if (longPresenceTime == existPresenceSch1In.getTime()) {
                                    int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(updatePeriod, presence.getEmployeeId(), OFFSET_INDEX_IN + idxFieldNameYesterday, null);
                                }
                            }
                            result.add(String.valueOf(indexResult));

                            //update by satrya 2013-06-03
                            //jika ada out on dutty atau tugas kantor
                            //  presence.setStatus(Presence.STATUS_IN);
                            if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                presence.setStatus(Presence.STATUS_IN);
                            }
                        }

                    } else {
                        if (existPresenceSch1In == null || (longPresenceTime < existPresenceSch1In.getTime())) {
                            indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                            //if (DateCalc.dayDifference(presenceDate, currPeriod.getEndDate()) == 0) {
                            //  if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                            //result.add(String.valueOf(nextPeriod.getOID()));
                            //} else {
                            result.add(String.valueOf(currPeriod.getOID()));
                            //}
                            //update by satrya 2013-05-28
                            //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                            if (existPresenceSch1Out != null && longPresenceTime == existPresenceSch1Out.getTime()) {
                                int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(currPeriod.getOID(), presence.getEmployeeId(), OFFSET_INDEX_OUT + idxFieldNameYesterday, null);
                            }
                            result.add(String.valueOf(indexResult));
                            //update by satrya 2013-06-03
                            //jika ada out on dutty atau tugas kantor
                            //  presence.setStatus(Presence.STATUS_IN);
                            if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                presence.setStatus(Presence.STATUS_IN);
                            }
                        } else {
                            if (existPresenceSch1Out == null || (longPresenceTime > (existPresenceSch1Out.getTime() + rangeTolerance))) {
                                indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                //if (DateCalc.dayDifference(presenceDate, currPeriod.getEndDate()) == 0) {
                                //  result.add(String.valueOf(nextPeriod.getOID()));
                                //} else {
                                result.add(String.valueOf(currPeriod.getOID()));
                                // }
                                result.add(String.valueOf(indexResult));

                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //  presence.setStatus(Presence.STATUS_OUT);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_OUT);
                                }
                            }
                        }
                    }
                }
            }

            return result;
        } catch (Exception e) {
            System.out.println("getPeriodAndTableIndexVer2 Exception : " + e.toString() + employeeId);
            return new Vector(1, 1);
        }
    }

    /**
     * create by satrya 2013-12-21 Keterangan:menghitung schedule presence tanpa
     * menggunakan overtime
     *
     * @param prevPeriod
     * @param currPeriod
     * @param nextPeriod
     * @param rsNull
     * @param longSchld1stIn
     * @param longSchld1stOut
     * @param longSchld2ndIn
     * @param longSchld2ndOut
     * @param longSchldBreakOut
     * @param longSchldBreakIn
     * @param employeeId
     * @param presence
     * @param presenceDate
     * @return
     */
    public static Vector getPeriodAndTableIndexNoOvertime(Period prevPeriod, Period currPeriod, Period nextPeriod, boolean rsNull, long longSchld1stIn, long longSchld1stOut,
            long longSchld2ndIn, long longSchld2ndOut, long longSchldBreakOut, long longSchldBreakIn, long employeeId, Presence presence, Date presenceDate) {
        Vector result = new Vector(1, 1);
        if (currPeriod == null) {
            return result;
        }
        try {
            int indexResult = -1;
            //update by satrya 2013-05-28
            //di seccond di set 0 gara tidak di hitung secondnya
            presenceDate.setSeconds(0);
            Date dtYesterday = new Date(presenceDate.getYear(), presenceDate.getMonth(), presenceDate.getDate() - 1);
            int idxFieldName = getIdxNameOfTableBySelectedDate(presenceDate);
            //update by satrya 2012-09-04
            int idxFieldNameYesterday = getIdxNameOfTableBySelectedDate(dtYesterday);
            int idxSch1OnPresenceIn = OFFSET_INDEX_IN + idxFieldName - 1;
            int idxSch1OnPresenceOut = OFFSET_INDEX_OUT + idxFieldName - 1;
            //update by satrya 2012-09-04
            //mencari index yesterday
            int idxSch1OnPresenceYesterdayIn = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
            int idxSch1OnPresenceYesterdayOut = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;

            Date dtTommorow = new Date(presenceDate.getYear(), presenceDate.getMonth(), presenceDate.getDate() + 1);
            int idxFieldNameTomorrowIn = getIdxNameOfTableBySelectedDate(dtTommorow);
            int idxSch1OnPresenceTomorrowIn = OFFSET_INDEX_IN + idxFieldNameTomorrowIn - 1;
            long longPresenceTime = presenceDate.getTime();

            Date existPresenceSch1In = getPresenceOnSchedule(idxSch1OnPresenceIn, employeeId, currPeriod.getOID());
            Date existPresenceSch1Out = getPresenceOnSchedule(idxSch1OnPresenceOut, employeeId, currPeriod.getOID());

            int statusPresenceExistOut = PstPresence.getStatusPresence(existPresenceSch1Out, employeeId);
            int statusPresenceCurr = PstPresence.getStatusPresence(presenceDate, employeeId);


            int NEXT_IS_PERSONAL_OUT = 0; //BI
            if (existPresenceSch1In != null) {
                if ((PstEmpSchedule.getCountPersonalOutIn(existPresenceSch1In, presenceDate, employeeId) % 2) == 0) { // untuk mempermudah di bagi modulus, jika ganjil berarti  maka menjadi PO jika genap maka menjadi PI
                    NEXT_IS_PERSONAL_OUT = 1;//BO
                }
            }
            //mencari existspresence kemarin
            long periodIdInOutYesterday = 0;
            long periodIdOutTomorrow = 0;
            if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                periodIdInOutYesterday = prevPeriod.getOID();
            } else {
                periodIdInOutYesterday = currPeriod.getOID();
            }
            Date existPresenceYesterdaySch1In = getPresenceOnSchedule(idxSch1OnPresenceYesterdayIn, employeeId, periodIdInOutYesterday);
            Date existPresenceYesterdaySch1Out = getPresenceOnSchedule(idxSch1OnPresenceYesterdayOut, employeeId, periodIdInOutYesterday);

            //update by satrya 2013-06-03
            int statusPresenceExistYesterdayIn = PstPresence.getStatusPresence(existPresenceYesterdaySch1In, employeeId);
            int statusPresenceExistYesterdayOut = PstPresence.getStatusPresence(existPresenceYesterdaySch1Out, employeeId);

            //update by satrya 2013-12-04
            boolean isCroosScheduleYesterday = PstEmpSchedule.getScheduleDayCrossDay(currPeriod, employeeId, presence);
            //mencari nilai apakah sudah ada break out hari ini
            int NEXT_IS_PERSONAL_OUT_YESTERDAY = 0;
            if (existPresenceYesterdaySch1In != null) {
                if ((PstEmpSchedule.getCountPersonalOutInYesterday(existPresenceYesterdaySch1In, presenceDate, employeeId) % 2) == 0) { // untuk mempermudah di bagi modulus, jika ganjil berarti  maka menjadi PO jika genap maka menjadi PI
                    NEXT_IS_PERSONAL_OUT_YESTERDAY = 1;
                }
            }

            if (DateCalc.dayDifference(presenceDate, currPeriod.getEndDate()) == 0) {
                periodIdOutTomorrow = nextPeriod.getOID();
            } else {
                periodIdOutTomorrow = currPeriod.getOID();
            }
            Date existPresenceTommorowSch1In = getPresenceOnSchedule(idxSch1OnPresenceTomorrowIn, employeeId, periodIdOutTomorrow);

            int iAttendaceOnNoSchedule = 0;
            try {
                iAttendaceOnNoSchedule = Integer.parseInt(PstSystemProperty.getValueByName("ATTANDACE_ON_NO_SCHEDULE"));//menambahkan system properties
            } catch (Exception e) {
                System.out.println("Exeception ATTANDACE_ON_NO_SCHEDULE:" + e);
            }

            String ClientName = "";
            try {
                ClientName = String.valueOf(PstSystemProperty.getValueByName("CLIENT_NAME"));//menambahkan system properties
            } catch (Exception e) {
                System.out.println("Exeception ATTANDACE_ON_NO_SCHEDULE:" + e);
            }
            
            int iAttendaceOnBreakOutBreakIn = 0;
            try {
                iAttendaceOnBreakOutBreakIn = Integer.parseInt(PstSystemProperty.getValueByName("ATTANDACE_ON_BREAK_IN_BREAK_OUT"));//menambahkan system properties
            } catch (Exception e) {
                System.out.println("Exeception ATTANDACE_ON_BREAK_IN_BREAK_OUT:" + e);
            }

            Hashtable scheduleSymbolIdMap = null;
            ScheduleSymbol schSymbol = null;
            //update by satrya 2012-08-21
            //untuk special Leave
            //untuk special Leave <satrya 2012-08-01>
            Vector listScheduleSymbol = new Vector(1, 1);
            try {

                listScheduleSymbol.add(new Long(PstSystemProperty.getValueByName("OID_SPECIAL")));
            } catch (Exception E) {

                System.out.println("EXCEPTION SYS PROP OID_SPECIAL : " + E.toString());
            }

            try {
                listScheduleSymbol.add(new Long(PstSystemProperty.getValueByName("OID_UNPAID")));
            } catch (Exception E) {
                System.out.println("EXCEPTION SYS PROP OID_UNPAID : " + E.toString());
            }
            if (iAttendaceOnBreakOutBreakIn != 0) {
                scheduleSymbolIdMap = PstScheduleSymbol.getScheduleSymbolIdMap(listScheduleSymbol);
                //mencari SymbolId
                schSymbol = PstEmpSchedule.getDailySchedule(presenceDate, employeeId);
            }
            //end


            if (!rsNull && longSchld1stIn != longSchld1stOut) {
                //jika pada saat ini Ada schedule
                // baik yang 1stSchedule maupun yang 2stSchedule

                /**
                 * * *************************** UNTUK 2stSchedule
                 * *****************************************
                 */
                if (longSchld2ndIn != 0 && longSchld2ndOut != 0) {
                } /**
                 * *************************** UNTUK 1stSchedule
                 * *****************************************
                 */
                else {
                    int MAX_NORMAL_SCH_DISTANCE = 15 * 60 * 60 * 1000;//jarak normal antara IN OUT SCHEDULE antara 2 hari yang berbeda
                    int intPresenceDate = presenceDate.getDate();
                    ScheduleSymbol schYesterday = getScheduleDateTimeYesterday(INT_FIRST_SCHEDULE, employeeId, presenceDate);//dtYesterday
                    int schld1stCategory = getScheduleCategory(INT_FIRST_SCHEDULE, employeeId, presenceDate);
                    if (schYesterday != null && schYesterday.getTimeIn().getTime() == schYesterday.getTimeOut().getTime()) {
                        schYesterday.getTimeIn().setHours(6);//melakukan set jika schedulenya off
                        schYesterday.getTimeOut().setHours(18);
                    }
                    ScheduleSymbol schTommorow = getScheduleDateTimeTommorow(INT_FIRST_SCHEDULE, employeeId, presenceDate);
                    if (schTommorow != null && schTommorow.getTimeIn().getTime() == schTommorow.getTimeOut().getTime()) {
                        schTommorow.getTimeIn().setHours(6);//melakukan set jika schedulenya off
                        schTommorow.getTimeOut().setHours(18);
                    }
                    /*long longInYesterdaySchdl = getLongPresenceDateYesterday(INT_FIRST_SCHEDULE, Presence.STATUS_IN,
                     employeeId, new Date(presenceDate.getTime() - (1 * 24 * 60 * 60 * 1000)));*/
                    long longInYesterdaySchdl = schYesterday != null && schYesterday.getTimeIn() != null ? schYesterday.getTimeIn().getTime() : 0L;
                    // mencari nilai 'long' dari schedule OUT hlongPresenceTime < lAverage2ndInto1stOutAcrossDayari kemarin
                    long longOutYesterdaySchdl = schYesterday != null && schYesterday.getTimeOut() != null ? schYesterday.getTimeOut().getTime() : 0L;

                    long longSchldBreakOutYesterday = schYesterday != null && schYesterday.getBreakOut() != null ? schYesterday.getBreakOut().getTime() : 0L;
                    long longSchldBreakInYesterday = schYesterday != null && schYesterday.getBreakIn() != null ? schYesterday.getBreakIn().getTime() : 0L;
                    long longInTommorowSchdl = schTommorow != null && schTommorow.getTimeIn() != null ? schTommorow.getTimeIn().getTime() : 0L;
                    long lookUpBetweenInOut = Math.abs(((longSchld1stOut - longSchld1stIn)) / 2);//

                    long lookUpBeforIn = (longSchld1stIn - longOutYesterdaySchdl) > (MAX_NORMAL_SCH_DISTANCE) //selisih normal 15 jam
                            ? Math.abs(((longSchld1stIn - longOutYesterdaySchdl)) / 2)
                            : (Math.abs(((longSchld1stIn - longOutYesterdaySchdl)) / 2));//priska
                                //sementara di hidden dulu karna kurang untk borobudur priska 20150721
                            //: (Math.abs(((longSchld1stIn - longOutYesterdaySchdl)) / 5));
                    
                    long lookUpAfterOut = (longInTommorowSchdl - longSchld1stOut) > (MAX_NORMAL_SCH_DISTANCE)
                            ? Math.abs((longInTommorowSchdl - longSchld1stOut) / 2)
                            : Math.abs(((longInTommorowSchdl - longSchld1stOut) * 4) / 2);//
                            //sementara di hidden dulu karna kurang untk borobudur priska 20150721
                            //: Math.abs(((longInTommorowSchdl - longSchld1stOut) * 4) / 5);//

                    long lookUpAfterOutYesterday = Math.abs(((longSchld1stIn - longOutYesterdaySchdl))) - lookUpBeforIn;

                    long lookUpBeforeOutYesterday = Math.abs((longOutYesterdaySchdl - longInYesterdaySchdl) / 2);
                    long rangeTolerance = 10 * 60 * 1000;//toleransi waktu 10 menit dimana akan di lakukan pergantian
                    long rangeToleranceBreakOutIn = 3 * 60 * 1000; // toleransi untuk personal in dan Out

                    /**
                     * *********************** UNTUK MENCARI STATUS IN H (Hari
                     * Ini)***********************************
                     */
                    if ((longSchld1stIn - lookUpBeforIn) < longPresenceTime
                            && (longPresenceTime <= (longSchld1stIn + lookUpBetweenInOut))) {
                        //int schld1stCategory = getScheduleCategory(INT_FIRST_SCHEDULE, employeeId, presenceDate);

                        //update by satrya 2013-12-04
                        //kasusnya hari ini schedulenya cross day dan besok dia ada plan lembur, akan tetapi dia gk jadi datang, maka dia harusnya presencenya di out
                        if (isCroosScheduleYesterday && (existPresenceYesterdaySch1Out == null || existPresenceYesterdaySch1Out.getTime() >= longPresenceTime - rangeTolerance) && (longPresenceTime - rangeTolerance) > existPresenceYesterdaySch1In.getTime()) {


                            indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                            long updatePeriodId = 0;
                            if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                result.add(String.valueOf(prevPeriod.getOID()));
                                updatePeriodId = prevPeriod.getOID();
                            } else {
                                result.add(String.valueOf(currPeriod.getOID()));
                                updatePeriodId = currPeriod.getOID();
                            }
                            //update by satrya 2013-5-28
                            //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                            if (existPresenceSch1In != null) {
                                existPresenceSch1In.setSeconds(0);
                                if (longPresenceTime == existPresenceSch1In.getTime()) {
                                    int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(updatePeriodId, presence.getEmployeeId(), OFFSET_INDEX_IN + idxFieldNameYesterday, null);
                                }
                            }
                            result.add(String.valueOf(indexResult));
                            //update by satrya 2013-06-03
                            //jika ada out on dutty atau tugas kantor
                            // presence.setStatus(Presence.STATUS_OUT);
                            if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                presence.setStatus(Presence.STATUS_OUT);
                            }
                            if (existPresenceYesterdaySch1Out != null) {
                                if (iAttendaceOnBreakOutBreakIn != 0
                                        && NEXT_IS_PERSONAL_OUT == 0
                                        && (longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutIn))) {
                                    // && (existPresenceSch1Out.getTime() > (longSchldBreakIn + lHalftBreakOutBreakIn))) {
                                    /* 
                                     * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                     * untuk di set sbg Personal IN
                                     */

                                    Presence newPresence = new Presence();
                                    newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                    newPresence.setScheduleDatetime(new Date(longSchldBreakInYesterday));
                                    newPresence.setEmployeeId(employeeId);

                                    newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                    newPresence.setScheduleLeaveId(schSymbol.getOID());
                                    //newPresence.setPeriodId(currPeriod.getOID());
                                    //update by satrya 2013-06-03
                                    //jika ada statusnya out on dutti dan call back
                                    //   newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                    if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                        newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                        PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                    }


                                }
                            }
                        } //update by satrya 2013-12-04
                        //if (existPresenceSch1In == null || (longPresenceTime <= existPresenceSch1In.getTime())) {
                        else if (existPresenceSch1In == null || (longPresenceTime <= existPresenceSch1In.getTime())) {
                            //update by satrya 2013-05-28
                            //if (existPresenceSch1In == null || (longPresenceTime < existPresenceSch1In.getTime())) {
                            indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                            result.add(String.valueOf(currPeriod.getOID()));
                            result.add(String.valueOf(indexResult));
                            //UPDATE BY satrya 2013-06-03
                            //jika dia ada out on dutty dan tugas kantor
                            //presence.setStatus(Presence.STATUS_IN);
                            if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                presence.setStatus(Presence.STATUS_IN);
                            }
                            //update by satrya 2013-05-28
                            //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                            if (existPresenceYesterdaySch1Out != null) {
                                existPresenceYesterdaySch1Out.setSeconds(0);
                                if (longPresenceTime == existPresenceYesterdaySch1Out.getTime()) {
                                    int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(currPeriod.getOID(), presence.getEmployeeId(), idxSch1OnPresenceYesterdayOut, null);
                                }
                            }

                        } else {
                            if ((longPresenceTime - rangeTolerance) > existPresenceSch1In.getTime()) {
                                /* check apakah sudah ada OUT*/
                                if (existPresenceSch1Out == null || existPresenceSch1Out.getTime() < longPresenceTime) {
                                    indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    //presence.setStatus(Presence.STATUS_OUT);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_OUT);
                                    }
                                    if (iAttendaceOnBreakOutBreakIn != 0 && existPresenceSch1Out != null
                                            && NEXT_IS_PERSONAL_OUT == 1
                                            && ((existPresenceSch1Out.getTime() + rangeToleranceBreakOutIn) < longPresenceTime)) {
                                        /* 
                                         * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                         * untuk di set sbg Personal OUT
                                         */
                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceSch1Out);
                                        newPresence.setEmployeeId(employeeId);
                                        newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakOut));
                                        //newPresence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //keterangan mencari status kerja
                                        //PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        if (statusPresenceExistOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistOut != Presence.STATUS_CALL_BACK) {
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }
                                    } else {
                                        //mecari personal IN
                                        if (iAttendaceOnBreakOutBreakIn != 0 && existPresenceSch1Out != null
                                                && NEXT_IS_PERSONAL_OUT == 0
                                                && ((existPresenceSch1Out.getTime() + rangeToleranceBreakOutIn) < longPresenceTime)) {
                                            Presence newPresence = new Presence();
                                            newPresence.setPresenceDatetime(existPresenceSch1Out);
                                            newPresence.setScheduleDatetime(new Date(longSchldBreakIn));
                                            newPresence.setEmployeeId(employeeId);
                                            newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                            newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            newPresence.setScheduleLeaveId(schSymbol.getOID());
                                            //newPresence.setPeriodId(currPeriod.getOID());
                                            //update by satrya 2013-06-03
                                            //keterangan mencari status kerja
                                            //PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);

                                            if (statusPresenceExistOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistOut != Presence.STATUS_CALL_BACK) {
                                                PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                            }
                                        }
                                    }

                                } else {
                                    if (iAttendaceOnBreakOutBreakIn != 0 && existPresenceSch1Out != null
                                            && (longPresenceTime) < (existPresenceSch1Out.getTime() - rangeToleranceBreakOutIn)) {

                                        presence.setScheduleDatetime(new Date(longSchldBreakOut));
                                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        presence.setScheduleLeaveId(schSymbol.getOID());
                                        presence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //jika ada statusnya kerja atrau out on dutty atau callback
                                        //presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                        if (statusPresenceCurr != Presence.STATUS_OUT_ON_DUTY && statusPresenceCurr != Presence.STATUS_CALL_BACK) {
                                            presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                        }
                                    }
                                }
                            }
                        }

                    } /**
                     * * *********************** UNTUK MENCARI STATUS OUT H
                     * (Hari INI)***********************************
                     */
                    else if (((longSchld1stOut - lookUpBetweenInOut) < longPresenceTime)
                            && (longPresenceTime <= (longSchld1stOut + lookUpAfterOut))) {
                        //jika belum ada IN maka di set IN
                        //update by satrya 2012-09-20
                        if (schld1stCategory == PstScheduleCategory.CATEGORY_NIGHT_WORKER || schld1stCategory == PstScheduleCategory.CATEGORY_ACCROSS_DAY) {
                            //kasus ada yg kerja 24 jam, tpi outnya tidak muncul
                            if (existPresenceYesterdaySch1Out == null) {
                                indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;

                                if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                    result.add(String.valueOf(prevPeriod.getOID()));
                                } else {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                }
                                result.add(String.valueOf(indexResult));
                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //presence.setStatus(Presence.STATUS_OUT);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_OUT);
                                }

                            } else {
                                //artinya dia ada In hari ini
                                //update by satrya 2013-12-04
                                //kasusnya jika sdh ada in maka akan dilakukan cek apakah dia lebih kecil dari IN
                                /**
                                 * indexResult = OFFSET_INDEX_IN + idxFieldName
                                 * - 1;
                                 * result.add(String.valueOf(currPeriod.getOID()));
                                 * result.add(String.valueOf(indexResult));
                                 * //update by satrya 2013-06-03 //jika ada out
                                 * on dutty atau tugas kantor //
                                 * presence.setStatus(Presence.STATUS_IN);
                                 * if(presence.getStatus()!=Presence.STATUS_CALL_BACK
                                 * &&
                                 * presence.getStatus()!=Presence.STATUS_OUT_ON_DUTY){
                                 * presence.setStatus(Presence.STATUS_IN); }
                                 */
                                if (existPresenceSch1In == null || (longPresenceTime < existPresenceSch1In.getTime())) {
                                    indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    // presence.setStatus(Presence.STATUS_IN);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_IN);
                                    }
                                } else {
                                    indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_OUT);
                                    }

                                }
                            }
                        } else if (existPresenceSch1In == null || (longPresenceTime < existPresenceSch1In.getTime())) {
                            if (schld1stCategory == PstScheduleCategory.CATEGORY_OFF || schld1stCategory == PstScheduleCategory.CATEGORY_ACCROSS_DAY) {
                                if (existPresenceYesterdaySch1In != null && existPresenceYesterdaySch1Out == null) {
                                    indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_OUT);
                                    }
                                } else {
                                    indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    // presence.setStatus(Presence.STATUS_IN);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_IN);
                                    }
                                }

                            } else {
                                
                                
                                 //ini masalah di borobudur priska 20150717 attendancenya borobudur
                                if (ClientName.equals("BOROBUDUR") || (ClientName == "BOROBUDUR") || ClientName.equals("MINIMART")){
                                    indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    // presence.setStatus(Presence.STATUS_IN);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_OUT);
                                    }
                                } else {
                                    indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    // presence.setStatus(Presence.STATUS_IN);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_IN);
                                    }
                                }
                                
                                
//                                indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
//                                result.add(String.valueOf(currPeriod.getOID()));
//                                result.add(String.valueOf(indexResult));
//                                //update by satrya 2013-06-03
//                                //jika ada out on dutty atau tugas kantor
//                                // presence.setStatus(Presence.STATUS_IN);
//                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
//                                    presence.setStatus(Presence.STATUS_IN);
//                                }
                            }

                        } else {
                            if ((existPresenceSch1Out == null || (longPresenceTime > existPresenceSch1Out.getTime()))
                                    && (existPresenceSch1In != null && (longPresenceTime > (existPresenceSch1In.getTime() + rangeTolerance)))) {
                                indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                result.add(String.valueOf(currPeriod.getOID()));
                                result.add(String.valueOf(indexResult));
                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //  presence.setStatus(Presence.STATUS_OUT);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_OUT);
                                }
                                if (existPresenceSch1Out != null) {
                                    if (iAttendaceOnBreakOutBreakIn != 0
                                            && NEXT_IS_PERSONAL_OUT == 0
                                            && (longPresenceTime > (existPresenceSch1Out.getTime() + rangeToleranceBreakOutIn))) {
                                        // && (existPresenceSch1Out.getTime() > (longSchldBreakIn + lHalftBreakOutBreakIn))) {
                                    /* 
                                         * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                         * untuk di set sbg Personal IN
                                         */

                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceSch1Out);
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakIn));
                                        newPresence.setEmployeeId(employeeId);


                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        //newPresence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //jika ada statusnya kerja atrau out on dutty atau callback
                                        //  newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                        if (statusPresenceExistOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistOut != Presence.STATUS_CALL_BACK) {
                                            newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }


                                    } else {//mencari BREAK OUT
                                        if (iAttendaceOnBreakOutBreakIn != 0
                                                /*&&(longPresenceTime) < (existPresenceSch1Out.getTime() - rangeTolerance)
                                                 && longPresenceTime > (existPresenceSch1Out.getTime() + rangeTolerance))*/
                                                && NEXT_IS_PERSONAL_OUT == 1
                                                && (longPresenceTime > (existPresenceSch1Out.getTime() + rangeToleranceBreakOutIn))) {


                                            Presence newPresence = new Presence();
                                            newPresence.setPresenceDatetime(existPresenceSch1Out);

                                            newPresence.setScheduleDatetime(new Date(longSchldBreakOut));
                                            newPresence.setEmployeeId(employeeId);

                                            newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            newPresence.setScheduleLeaveId(schSymbol.getOID());
                                            //newPresence.setPeriodId(currPeriod.getOID()); 
                                            //update by satrya 2013-06-03
                                            //jika ada statusnya kerja atrau out on dutty atau callback
                                            //newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            if (statusPresenceExistOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistOut != Presence.STATUS_CALL_BACK) {
                                                newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                                PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        /**
                         * *********************** UNTUK MENCARI CROSS DAY H-1
                         * (Yesterday)***********************************
                         */
                        /**
                         * *********************** UNTUK MENCARI STATUS IN
                         * CROSS DAY H-1
                         * (Yesterday)***********************************
                         */
                        if ((longInYesterdaySchdl < longPresenceTime) && longPresenceTime < (longInYesterdaySchdl + lookUpBeforeOutYesterday)) {
                            if (existPresenceYesterdaySch1In == null || (longPresenceTime < existPresenceYesterdaySch1In.getTime())) {
                                indexResult = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
                                if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                    result.add(String.valueOf(prevPeriod.getOID()));
                                } else {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                }
                                result.add(String.valueOf(indexResult));
                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //  presence.setStatus(Presence.STATUS_IN);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_IN);
                                }
                            } else {
                                if ((longPresenceTime - rangeTolerance) > existPresenceYesterdaySch1In.getTime()) {
                                    /* check apakah sudah ada OUT Kemaren*/
                                    if (existPresenceYesterdaySch1Out == null || existPresenceYesterdaySch1Out.getTime() < longPresenceTime) {
                                        indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                        if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                            result.add(String.valueOf(prevPeriod.getOID()));
                                        } else {
                                            result.add(String.valueOf(currPeriod.getOID()));
                                        }
                                        result.add(String.valueOf(indexResult));
                                        //update by satrya 2013-06-03
                                        //jika ada out on dutty atau tugas kantor
                                        // presence.setStatus(Presence.STATUS_OUT);
                                        if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                            presence.setStatus(Presence.STATUS_OUT);
                                        }
                                        if (iAttendaceOnBreakOutBreakIn != 0
                                                && existPresenceSch1Out != null
                                                && NEXT_IS_PERSONAL_OUT_YESTERDAY == 1 //mencari BoUT
                                                && ((existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutIn) < longPresenceTime)) {

                                            Presence newPresence = new Presence();
                                            newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                            newPresence.setEmployeeId(employeeId);

                                            newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            newPresence.setScheduleLeaveId(schSymbol.getOID());
                                            newPresence.setScheduleDatetime(new Date(longSchldBreakOutYesterday));
                                            //newPresence.setPeriodId(currPeriod.getOID());
                                            //update by satrya 2013-06-03
                                            //jika ada statusnya out on dutti dan call back
                                            //newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                                newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                                PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                            }


                                        } //mencari IN PERSONAL
                                        else {
                                            if (iAttendaceOnBreakOutBreakIn != 0
                                                    && existPresenceSch1Out != null
                                                    && NEXT_IS_PERSONAL_OUT_YESTERDAY == 1 //mencari PO
                                                    && ((existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutIn) < longPresenceTime)) {
                                                Presence newPresence = new Presence();
                                                newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                                newPresence.setEmployeeId(employeeId);

                                                newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                                newPresence.setScheduleLeaveId(schSymbol.getOID());
                                                newPresence.setScheduleDatetime(new Date(longSchldBreakInYesterday));
                                                //newPresence.setPeriodId(currPeriod.getOID());

                                                //update by satrya 2013-06-03
                                                //jika ada statusnya out on dutti dan call back
                                                //newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                                if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                                    newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                                    PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                                }


                                            }
                                        }
                                    } else {
                                        if (iAttendaceOnBreakOutBreakIn != 0
                                                && (longPresenceTime) < (existPresenceYesterdaySch1Out.getTime() - rangeToleranceBreakOutIn)) {

                                            presence.setScheduleDatetime(new Date(longSchldBreakOutYesterday));
                                            presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            presence.setScheduleLeaveId(schSymbol.getOID());
                                            presence.setPeriodId(currPeriod.getOID());

                                            //update by satrya 2013-06-03
                                            //jika ada statusnya out on dutti dan call back
                                            //  presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            if (statusPresenceCurr != Presence.STATUS_OUT_ON_DUTY && statusPresenceCurr != Presence.STATUS_CALL_BACK) {
                                                presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            }


                                        }
                                    }
                                }
                            }

                        } else if (((longOutYesterdaySchdl - lookUpBeforeOutYesterday) < longPresenceTime)
                                && (longPresenceTime <= (longOutYesterdaySchdl + lookUpAfterOutYesterday))) {

                            /// mencarihari yang cross day OUT
                            if (existPresenceYesterdaySch1Out == null || (longPresenceTime >= existPresenceYesterdaySch1Out.getTime())) {
                                //if (existPresenceYesterdaySch1Out == null || (longPresenceTime > existPresenceYesterdaySch1Out.getTime())) {
                                indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                long updatePeriodId = 0;
                                if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                    result.add(String.valueOf(prevPeriod.getOID()));
                                    updatePeriodId = prevPeriod.getOID();
                                } else {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    updatePeriodId = currPeriod.getOID();
                                }
                                //update by satrya 2013-5-28
                                //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                                if (existPresenceSch1In != null) {
                                    existPresenceSch1In.setSeconds(0);
                                    if (longPresenceTime == existPresenceSch1In.getTime()) {
                                        int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(updatePeriodId, presence.getEmployeeId(), OFFSET_INDEX_IN + idxFieldNameYesterday, null);
                                    }
                                }
                                result.add(String.valueOf(indexResult));
                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                // presence.setStatus(Presence.STATUS_OUT);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_OUT);
                                }
                                if (existPresenceYesterdaySch1Out != null) {
                                    if (iAttendaceOnBreakOutBreakIn != 0
                                            && NEXT_IS_PERSONAL_OUT == 0
                                            && (longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutIn))) {
                                        // && (existPresenceSch1Out.getTime() > (longSchldBreakIn + lHalftBreakOutBreakIn))) {
                                    /* 
                                         * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                         * untuk di set sbg Personal IN
                                         */

                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakInYesterday));
                                        newPresence.setEmployeeId(employeeId);

                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        //newPresence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //jika ada statusnya out on dutti dan call back
                                        //   newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                        if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                            newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }


                                    }
                                }
                            }

                        } else {
                            if (existPresenceTommorowSch1In == null || (longPresenceTime < existPresenceTommorowSch1In.getTime())) {
                                indexResult = OFFSET_INDEX_IN + idxFieldName;
                                long updatePeriodId = 0;
                                if (DateCalc.dayDifference(presenceDate, currPeriod.getEndDate()) == 0) {
                                    result.add(String.valueOf(nextPeriod.getOID()));
                                    updatePeriodId = nextPeriod.getOID();
                                } else {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    updatePeriodId = currPeriod.getOID();
                                }

                                result.add(String.valueOf(indexResult));
                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //  presence.setStatus(Presence.STATUS_IN);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_IN);
                                }
                            }
                        }
                    }

                }///end 1stSchedule
            }

            // --- end of Result not null ---
            // jika pada saat presence date belum ada schedule
            // maka hanya check schedule hr sebelumnya (kemarin .red) :)  
            if (rsNull || longSchld1stIn == longSchld1stOut) {
                //update by satrya  2012-09-03
                /**
                 * DES : untuk yang tidak ada schedule Di set di sistem properti
                 * NO SCHEDULE
                 */
                if (iAttendaceOnNoSchedule == 1) {
                    ScheduleSymbol schYesterday = getScheduleDateTimeYesterday(INT_FIRST_SCHEDULE, employeeId, presenceDate);
                    ScheduleSymbol schTommorow = getScheduleDateTimeTommorow(INT_FIRST_SCHEDULE, employeeId, presenceDate);

                    long longInYesterdaySchdl = schYesterday != null && schYesterday.getTimeIn() != null ? schYesterday.getTimeIn().getTime() : 0L;
                    // mencari nilai 'long' dari schedule OUT hlongPresenceTime < lAverage2ndInto1stOutAcrossDayari kemarin
                    long longOutYesterdaySchdl = schYesterday != null && schYesterday.getTimeOut() != null ? schYesterday.getTimeOut().getTime() : 0L;
                    long longSchldBreakOutYesterday = schYesterday != null && schYesterday.getBreakOut() != null ? schYesterday.getBreakOut().getTime() : 0L;
                    long longSchldBreakInYesterday = schYesterday != null && schYesterday.getBreakIn() != null ? schYesterday.getBreakIn().getTime() : 0L;
                    long longInTommorowSchdl = schTommorow != null && schTommorow.getTimeIn() != null ? schTommorow.getTimeIn().getTime() : 0L;

                    boolean scheduleYesterDayisOff = false;
                    if (longOutYesterdaySchdl - longInYesterdaySchdl == 0) {
                        Vector schedule = getFieldIndexWillScheduleOff(currPeriod, prevPeriod, employeeId, presence, presenceDate);

                        longInYesterdaySchdl = (Long) schedule.get(1);
                        longOutYesterdaySchdl = (Long) schedule.get(2);
                        scheduleYesterDayisOff = true;
                    }
                    long lookUpBetweenInOutYesterday = Math.abs(((longOutYesterdaySchdl - longInYesterdaySchdl)) / 2);//
                    long lookUpBeforInYesterday = 0;

                    long lookUpAfterOutYesterday = 12 * 60 * 60 * 1000;
                    int max_range_normal_schedule_current = 11;
                    //long lookUpAfterOutYesterday = Math.abs(((longSchld1stIn - longOutYesterdaySchdl))) - lookUpBeforIn;

                    //update by satrya 2013-12-21
                    //cek apakah presence sdh melewati batas dari max_range_normal_schedule_current, jika ia maka itu adalah schedule tommorow
                    boolean lookUpBeforInTommorow = max_range_normal_schedule_current > (longSchld1stOut - longInTommorowSchdl) && (longSchld1stOut - longInTommorowSchdl) > 0 ? true : false;


                    long lookUpBeforeInTomorrow = 3 * 60 * 60 * 1000;
                    //update by satrya 2013-12-05
                    //kasusnya karena dia off plan ot nya smpe jam 00 tpi dia out jam 06
                    long lookUpBeforeInTomorrow2 = 8 * 60 * 60 * 1000;

                    long lookUpBeforeOutYesterday = Math.abs((longOutYesterdaySchdl - longInYesterdaySchdl) / 2);
                    long rangeTolerance = 10 * 60 * 1000;//toleransi waktu 10 menit dimana akan di lakukan pergantian
                    long rangeToleranceBreakOutInYesterday = 3 * 60 * 1000;//toleransi waktu 3 menit untuk personal in dan out
                    int max_duration_working = 13 * 60 * 60 * 1000; //maximal durasi kerja
                    int max_duration_working_yesterday = 13 * 60 * 60 * 1000 * -1; //maximal durasi kerja yesterday
                    /**
                     * *** MENCARI STATUS IN YANG TIDAK ADA SCHEDULE ******
                     */
                    /**
                     * update by satrya 2013-12-21 if ((longInYesterdaySchdl -
                     * lookUpBeforInYesterday) < longPresenceTime &&
                     * (longPresenceTime <= (longInYesterdaySchdl +
                     * lookUpBetweenInOutYesterday +
                     * (scheduleYesterDayisOff?lookUpBeforeInTomorrow2:0)))) {
                     */
                    if ((longInYesterdaySchdl - lookUpBeforInYesterday) < longPresenceTime
                            && (longPresenceTime <= (longInYesterdaySchdl + lookUpBetweenInOutYesterday + (scheduleYesterDayisOff ? lookUpBeforeInTomorrow2 : 0)))) {
                        //update by satrya 2013-12-05
                        //kasusnya karena dia off plan ot nya smpe jam 00 tpi dia out jam 06
                        //if ((longInYesterdaySchdl - lookUpBeforInYesterday) < longPresenceTime && (longPresenceTime <= (longInYesterdaySchdl + lookUpBetweenInOutYesterday))) {

                        if (existPresenceYesterdaySch1In == null || (longPresenceTime < existPresenceYesterdaySch1In.getTime())) {
                            indexResult = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
                            // result.add(String.valueOf(currPeriod.getOID()));
                            if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                result.add(String.valueOf(prevPeriod.getOID()));
                            } else {
                                result.add(String.valueOf(currPeriod.getOID()));
                            }
                            result.add(String.valueOf(indexResult));
                            //update by satrya 2013-06-03
                            //jika ada out on dutty atau tugas kantor
                            //  presence.setStatus(Presence.STATUS_IN);
                            if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                presence.setStatus(Presence.STATUS_IN);
                            }
                        } else {
                            if (existPresenceYesterdaySch1Out != null && (longPresenceTime - rangeTolerance) > existPresenceYesterdaySch1In.getTime()
                                    && existPresenceYesterdaySch1Out.getTime() - longPresenceTime > max_duration_working_yesterday
                                    && existPresenceYesterdaySch1Out.getTime() - longPresenceTime < max_duration_working) {
                                //if ((longPresenceTime - rangeTolerance) > existPresenceYesterdaySch1In.getTime()) { update by satrya 2013-12-21 kasusnya ada off 2 hari
                                /* check apakah sudah ada OUT*/
                                if (existPresenceYesterdaySch1Out == null || existPresenceYesterdaySch1Out.getTime() < longPresenceTime) {
                                    indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                    if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                        result.add(String.valueOf(prevPeriod.getOID()));
                                    } else {
                                        result.add(String.valueOf(currPeriod.getOID()));
                                    }
                                    result.add(String.valueOf(indexResult));

                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    //  presence.setStatus(Presence.STATUS_OUT);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_OUT);
                                    }
                                    if (iAttendaceOnBreakOutBreakIn != 0 && existPresenceYesterdaySch1Out != null
                                            && NEXT_IS_PERSONAL_OUT_YESTERDAY == 1
                                            && ((existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutInYesterday) < longPresenceTime)) {

                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                        newPresence.setEmployeeId(employeeId);

                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakOutYesterday));
                                        //newPresence.setPeriodId(currPeriod.getOID());

                                        //update by satrya 2013-06-03
                                        //jika ada statusnya out on dutti dan call back
                                        // newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                        if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                            newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }


                                    }
                                } else {
                                    if (iAttendaceOnBreakOutBreakIn != 0 && existPresenceYesterdaySch1Out != null
                                            && (longPresenceTime) < (existPresenceYesterdaySch1Out.getTime() - rangeToleranceBreakOutInYesterday)) {

                                        presence.setScheduleDatetime(new Date(longSchldBreakOutYesterday));
                                        presence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        presence.setScheduleLeaveId(schSymbol.getOID());
                                        if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                            result.add(String.valueOf(prevPeriod.getOID()));
                                        } else {
                                            result.add(String.valueOf(currPeriod.getOID()));
                                        }

                                        //update by satrya 2013-06-03
                                        //jika ada statusnya out on dutti dan call back
                                        // newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                        if (statusPresenceCurr != Presence.STATUS_OUT_ON_DUTY && statusPresenceCurr != Presence.STATUS_CALL_BACK) {
                                            presence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                        }


                                    }
                                }
                            } //update by satrya 2013-12-21 menambahkan else, dan menambahkan schedule IN hari ini, kasusnya dia off 2 x
                            else {
                                if (existPresenceSch1In == null || (longPresenceTime < existPresenceSch1In.getTime())) {
                                    indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                                    //if (DateCalc.dayDifference(presenceDate, currPeriod.getEndDate()) == 0) {
                                    //  if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                    //result.add(String.valueOf(nextPeriod.getOID()));
                                    //} else {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                    //}
                                    //update by satrya 2013-05-28
                                    //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                                    if (existPresenceSch1Out != null && longPresenceTime == existPresenceSch1Out.getTime()) {
                                        int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(currPeriod.getOID(), presence.getEmployeeId(), OFFSET_INDEX_OUT + idxFieldNameYesterday, null);
                                    }
                                    result.add(String.valueOf(indexResult));
                                    //update by satrya 2013-06-03
                                    //jika ada out on dutty atau tugas kantor
                                    //  presence.setStatus(Presence.STATUS_IN);
                                    if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                        presence.setStatus(Presence.STATUS_IN);
                                    }
                                }

                            }
                        }

                    } ////end
                    /**
                     * ***** MENCARI OUT YANG TIDAK ADA SCHEDULE ******
                     */
                    else if (((longOutYesterdaySchdl - lookUpBetweenInOutYesterday) < longPresenceTime)
                            && (longPresenceTime <= (longOutYesterdaySchdl + lookUpAfterOutYesterday))) {
                        if (existPresenceYesterdaySch1In == null || (longPresenceTime < existPresenceYesterdaySch1In.getTime())) {
                            indexResult = OFFSET_INDEX_IN + idxFieldNameYesterday - 1;
                            if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                result.add(String.valueOf(prevPeriod.getOID()));
                            } else {
                                result.add(String.valueOf(currPeriod.getOID()));
                            }
                            result.add(String.valueOf(indexResult));

                            //update by satrya 2013-06-03
                            //jika ada out on dutty atau tugas kantor
                            //  presence.setStatus(Presence.STATUS_IN);
                            if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                presence.setStatus(Presence.STATUS_IN);
                            }
                        } else {
                            if ((existPresenceYesterdaySch1Out == null || (longPresenceTime > existPresenceYesterdaySch1Out.getTime()))
                                    && (existPresenceYesterdaySch1In != null && (longPresenceTime > (existPresenceYesterdaySch1In.getTime() + rangeTolerance)))) {
                                indexResult = OFFSET_INDEX_OUT + idxFieldNameYesterday - 1;
                                if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                    result.add(String.valueOf(prevPeriod.getOID()));
                                } else {
                                    result.add(String.valueOf(currPeriod.getOID()));
                                }
                                result.add(String.valueOf(indexResult));

                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //  presence.setStatus(Presence.STATUS_OUT);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_OUT);
                                }
                                if (existPresenceSch1Out != null) {
                                    /* if (iAttendaceOnBreakOutBreakIn != 0 
                                     && existStatusBreakOutYesterday == 2 &&(longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeTolerance))
                                     && ((longSchldBreakInYesterday - lHalftBreakOutBreakInYesterday) < existPresenceYesterdaySch1Out.getTime())
                                     && (existPresenceYesterdaySch1Out.getTime() > (longSchldBreakInYesterday + lHalftBreakOutBreakInYesterday))) {
                                     */
                                    if (iAttendaceOnBreakOutBreakIn != 0
                                            && NEXT_IS_PERSONAL_OUT_YESTERDAY == 0
                                            && (longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutInYesterday))) {
                                        //&& ((longSchldBreakInYesterday - lHalftBreakOutBreakInYesterday) < existPresenceYesterdaySch1Out.getTime())
                                        //&& (longPresenceTime > (longSchldBreakInYesterday + lHalftBreakOutBreakInYesterday))) {
                                    /* 
                                         * update data presence dengan tanggal dan waktu  dari existPresenceSch1Out.getTime()
                                         * untuk di set sbg Personal IN
                                         */
                                        Presence newPresence = new Presence();
                                        newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                        newPresence.setScheduleDatetime(new Date(longSchldBreakInYesterday));
                                        newPresence.setEmployeeId(employeeId);

                                        newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                        newPresence.setScheduleLeaveId(schSymbol.getOID());
                                        //newPresence.setPeriodId(currPeriod.getOID());
                                        //update by satrya 2013-06-03
                                        //jika ada statusnya out on dutti dan call back
                                        // newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                        if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                            newPresence.setStatus(Presence.STATUS_IN_PERSONAL);
                                            PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                        }



                                    } else {
                                        /*if(iAttendaceOnBreakOutBreakIn != 0 
                                         &&(longPresenceTime) < (existPresenceYesterdaySch1Out.getTime() - rangeTolerance)
                                         || (iAttendaceOnBreakOutBreakIn != 0 && existStatusBreakOutYesterday != 2
                                         && longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeTolerance))){
                                         */
                                        if (iAttendaceOnBreakOutBreakIn != 0
                                                && NEXT_IS_PERSONAL_OUT_YESTERDAY == 1
                                                && (longPresenceTime > (existPresenceYesterdaySch1Out.getTime() + rangeToleranceBreakOutInYesterday))) {
                                            //&& ((existPresenceYesterdaySch1Out.getTime() - lHalftBreakOutBreakInYesterday) < existPresenceYesterdaySch1Out.getTime())
                                            // && (longPresenceTime > (longSchldBreakOutYesterday + lHalftBreakOutBreakInYesterday))){
                                            // || (iAttendaceOnBreakOutBreakIn != 0 && existStatusBreakOut != 2

                                            Presence newPresence = new Presence();
                                            newPresence.setPresenceDatetime(existPresenceYesterdaySch1Out);
                                            newPresence.setScheduleDatetime(new Date(longSchldBreakOutYesterday));
                                            newPresence.setEmployeeId(employeeId);

                                            newPresence.setScheduleType(Presence.SCH_TYPE_NORMAL);
                                            newPresence.setScheduleLeaveId(schSymbol.getOID());
                                            //newPresence.setPeriodId(currPeriod.getOID()); 
                                            //update by satrya 2013-06-03
                                            //jika ada statusnya out on dutti dan call back
                                            //  newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                            if (statusPresenceExistYesterdayOut != Presence.STATUS_OUT_ON_DUTY && statusPresenceExistYesterdayOut != Presence.STATUS_CALL_BACK) {
                                                newPresence.setStatus(Presence.STATUS_OUT_PERSONAL);
                                                PstPresence.updateStatusByDateTimeAndEmployeeId(newPresence);
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    } ///end
                    /**
                     * **** MENCARI HARI BERIKUTNBYA YG TIDAK ADA SCHEDULE
                     * *******
                     */
                    else if (lookUpBeforInTommorow && (longInTommorowSchdl - lookUpBeforeInTomorrow) > longPresenceTime && longPresenceTime < longInTommorowSchdl) {
                        //update by satrya 2013-05-28
                        //kasusnya schedule hari ini dia ada off, tpi schedule tomorow In(6.30) dan outTommorow 15
                        // else if ((longInTommorowSchdl - lookUpBeforeInTomorrow) < longPresenceTime && longPresenceTime < longInTommorowSchdl) {
                        if (existPresenceYesterdaySch1In == null || (longPresenceTime < existPresenceYesterdaySch1In.getTime())) {
                            indexResult = OFFSET_INDEX_IN + idxFieldNameTomorrowIn - 1;
                            long updatePeriod = 0;
                            if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                                result.add(String.valueOf(prevPeriod.getOID()));
                                updatePeriod = prevPeriod.getOID();
                            } else {
                                result.add(String.valueOf(currPeriod.getOID()));
                                updatePeriod = currPeriod.getOID();
                            }
                            //update by satrya 2013-05-28
                            //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                            if (existPresenceSch1In != null) {
                                existPresenceSch1In.setSeconds(0);
                                if (longPresenceTime == existPresenceSch1In.getTime()) {
                                    int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(updatePeriod, presence.getEmployeeId(), OFFSET_INDEX_IN + idxFieldNameYesterday, null);
                                }
                            }
                            result.add(String.valueOf(indexResult));

                            //update by satrya 2013-06-03
                            //jika ada out on dutty atau tugas kantor
                            //  presence.setStatus(Presence.STATUS_IN);
                            if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                presence.setStatus(Presence.STATUS_IN);
                            }
                        }

                    } else {
                        if (existPresenceSch1In == null || (longPresenceTime < existPresenceSch1In.getTime())) {
                            indexResult = OFFSET_INDEX_IN + idxFieldName - 1;
                            //if (DateCalc.dayDifference(presenceDate, currPeriod.getEndDate()) == 0) {
                            //  if (DateCalc.dayDifference(presenceDate, currPeriod.getStartDate()) == 0) {
                            //result.add(String.valueOf(nextPeriod.getOID()));
                            //} else {
                            result.add(String.valueOf(currPeriod.getOID()));
                            //}
                            //update by satrya 2013-05-28
                            //jika presence yg akan di pakai sudah ada/ sama persis dari hari sebelumnya, maka yg sebelumnya/sesudahnya di buat null
                            if (existPresenceSch1Out != null && longPresenceTime == existPresenceSch1Out.getTime()) {
                                int updateStatus = PstEmpSchedule.updateScheduleDataByPresence(currPeriod.getOID(), presence.getEmployeeId(), OFFSET_INDEX_OUT + idxFieldNameYesterday, null);
                            }
                            result.add(String.valueOf(indexResult));
                            //update by satrya 2013-06-03
                            //jika ada out on dutty atau tugas kantor
                            //  presence.setStatus(Presence.STATUS_IN);
                            if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                presence.setStatus(Presence.STATUS_IN);
                            }
                        } else {
                            if (existPresenceSch1Out == null || (longPresenceTime > (existPresenceSch1Out.getTime() + rangeTolerance))) {
                                indexResult = OFFSET_INDEX_OUT + idxFieldName - 1;
                                //if (DateCalc.dayDifference(presenceDate, currPeriod.getEndDate()) == 0) {
                                //  result.add(String.valueOf(nextPeriod.getOID()));
                                //} else {
                                result.add(String.valueOf(currPeriod.getOID()));
                                // }
                                result.add(String.valueOf(indexResult));

                                //update by satrya 2013-06-03
                                //jika ada out on dutty atau tugas kantor
                                //  presence.setStatus(Presence.STATUS_OUT);
                                if (presence.getStatus() != Presence.STATUS_CALL_BACK && presence.getStatus() != Presence.STATUS_OUT_ON_DUTY) {
                                    presence.setStatus(Presence.STATUS_OUT);
                                }
                            }
                        }
                    }
                }
            }

            return result;
        } catch (Exception e) {
            System.out.println("getPeriodAndTableIndex Exception : " + e.toString());
            return new Vector(1, 1);
        }
    }

    /**
     * @param intPresenceDate
     * @param empScheduleOid
     * @param scheduleCategory
     * @param indexFieldSchedule
     * @param presenceStatus
     * @return
     */
    public static Vector getInOutPresenceData(Date presenceDate, int intPresenceDate, int presenceStatus, int indexFieldSchedule, long empScheduleOid) {
        Vector result = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT " + PstEmpSchedule.fieldNames[(PstEmpSchedule.OFFSET_INDEX_IN + intPresenceDate - 1)]
                    + ", " + PstEmpSchedule.fieldNames[(PstEmpSchedule.OFFSET_INDEX_IN + intPresenceDate + INTERVAL_INDEX_HALF_CALENDAR - 1)]
                    + ", " + PstEmpSchedule.fieldNames[(PstEmpSchedule.OFFSET_INDEX_OUT + intPresenceDate - 1)]
                    + ", " + PstEmpSchedule.fieldNames[(PstEmpSchedule.OFFSET_INDEX_OUT + intPresenceDate + INTERVAL_INDEX_HALF_CALENDAR - 1)]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                    + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID]
                    + " = " + empScheduleOid;

//                System.out.println("getInOutPresenceData : "+sql);   
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                Vector vectTemp = new Vector(1, 1);

                if (rs.getDate(1) != null) {
                    vectTemp.add(DBHandler.convertDate(rs.getDate(1), rs.getTime(1)));
                } else {
                    vectTemp.add(null);
                }

                if (rs.getDate(2) != null) {
                    vectTemp.add(DBHandler.convertDate(rs.getDate(2), rs.getTime(2)));
                } else {
                    vectTemp.add(null);
                }

                if (rs.getDate(3) != null) {
                    vectTemp.add(DBHandler.convertDate(rs.getDate(3), rs.getTime(3)));
                } else {
                    vectTemp.add(null);
                }

                if (rs.getDate(4) != null) {
                    vectTemp.add(DBHandler.convertDate(rs.getDate(4), rs.getTime(4)));
                } else {
                    vectTemp.add(null);
                }

                result.add(vectTemp);
            }
        } catch (Exception e) {
            System.out.println("getInOutPresenceData exc : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /**
     * check/update status presence depend on actual presence
     *
     * @param scheduleCategory
     * @param dtInFirst
     * @param dtInSecond
     * @param dtOutFirst
     * @param dtOutSecond
     * @return
     * @created by Edhy
     */
    public static Vector checkAbsenceStatus(int scheduleCategory, Date dtInFirst, Date dtInSecond, Date dtOutFirst, Date dtOutSecond) {
        Vector result = new Vector(1, 1);

        // check schedule type, category holiday or on schedule                            
        int intFirstStatus = PstEmpSchedule.STATUS_PRESENCE_OK;
        int intSecondStatus = PstEmpSchedule.STATUS_PRESENCE_OK;

        // if schedule category aren't CATEGORY_ABSENCE or CATEGORY_OFF or CATEGORY_DAYOFF_PAYMENT or CATEGORY_ANNUAL_LEAVE or CATEGORY_LONG_LEAVE
        if (!(scheduleCategory == PstScheduleCategory.CATEGORY_ABSENCE || scheduleCategory == PstScheduleCategory.CATEGORY_OFF || scheduleCategory == PstScheduleCategory.CATEGORY_DAYOFF_PAYMENT || scheduleCategory == PstScheduleCategory.CATEGORY_ANNUAL_LEAVE || scheduleCategory == PstScheduleCategory.CATEGORY_LONG_LEAVE)) {
            // check if schedule is split shift
            // if one or both (in or out) of first schedule is null
            if (!(dtInFirst != null && dtOutFirst != null)) {
                intFirstStatus = PstEmpSchedule.STATUS_PRESENCE_ABSENCE;
            }

            // if one or both (in or out) of second schedule is null
            if (!(dtOutFirst != null && dtOutSecond != null)) {
                intSecondStatus = PstEmpSchedule.STATUS_PRESENCE_ABSENCE;
            }
        }

        result.add(String.valueOf(intFirstStatus));
        result.add(String.valueOf(intSecondStatus));

        return result;
    }

    /**
     * @param scheduleCategory
     * @param dtInFirst
     * @param dtInSecond
     * @param dtScheduleInRegular
     * @param dtScheduleInSplit
     * @return
     * @created by Edhy
     */
    public static Vector checkLatenessStatus(int scheduleCategory, Date dtInFirst, Date dtInSecond, Date dtScheduleInFirst, Date dtScheduleInSecond) {
        Vector result = new Vector(1, 1);
        int intFirstStatus = PstEmpSchedule.STATUS_PRESENCE_OK;
        int intSecondStatus = PstEmpSchedule.STATUS_PRESENCE_OK;

        try {
            if (!(scheduleCategory == PstScheduleCategory.CATEGORY_ABSENCE || scheduleCategory == PstScheduleCategory.CATEGORY_OFF || scheduleCategory == PstScheduleCategory.CATEGORY_DAYOFF_PAYMENT || scheduleCategory == PstScheduleCategory.CATEGORY_ANNUAL_LEAVE || scheduleCategory == PstScheduleCategory.CATEGORY_LONG_LEAVE)) {
                // schedule pertama (regular)
                if (dtInFirst != null) {
                    // waktu schedule / roster
                    dtScheduleInFirst.setYear(dtInFirst.getYear());
                    dtScheduleInFirst.setMonth(dtInFirst.getMonth());
                    dtScheduleInFirst.setDate(dtInFirst.getDate());
                    if (dtScheduleInFirst.getHours() == 0) {
                        dtScheduleInFirst.setHours(23);
                        dtScheduleInFirst.setMinutes(59 - com.dimata.harisma.session.lateness.SessEmployeeLateness.TIME_LATES);
                    }
                    dtScheduleInFirst.setSeconds(0);

                    // waktu actual in
                    dtInFirst.setSeconds(0);

                    long iDuration = com.dimata.util.DateCalc.timeDifference(dtInFirst, dtScheduleInFirst);
                    if (iDuration < 0) {
                        intFirstStatus = PstEmpSchedule.STATUS_PRESENCE_LATE;
                    }
                }


                // schedule kedua (split shift)
                if (dtInSecond != null) {

                    // waktu schedule / roster
                    dtScheduleInSecond.setYear(dtInSecond.getYear());
                    dtScheduleInSecond.setMonth(dtInSecond.getMonth());
                    dtScheduleInSecond.setDate(dtInSecond.getDate());
                    if (dtScheduleInSecond.getHours() == 0) {
                        dtScheduleInSecond.setHours(23);
                        dtScheduleInSecond.setMinutes(59 - com.dimata.harisma.session.lateness.SessEmployeeLateness.TIME_LATES);
                    }
                    dtScheduleInSecond.setSeconds(0);

                    // waktu actual in
                    dtInSecond.setSeconds(0);

                    long iDuration = com.dimata.util.DateCalc.timeDifference(dtInSecond, dtScheduleInSecond);
                    if (iDuration < 0) {
                        intSecondStatus = PstEmpSchedule.STATUS_PRESENCE_LATE;
                    }
                }
            }

            result.add(String.valueOf(intFirstStatus));
            result.add(String.valueOf(intSecondStatus));
        } catch (Exception e) {
            System.out.println("exc when check Lateness status : " + e.toString());
        } finally {
            return result;
        }
    }

    /**
     * get field index that will update
     *
     * @param periodId
     * @param employeeId
     * @param presenceStatus
     * @param idxFieldName
     * @return
     * @created by Edhy
     */
    public static int updateEmpSchdlWithPrscAbsLate(long periodId, long employeeId, int idxFieldPresence, Date presenceDate,
            int intStatusAbs1st, int intStatusAbs2nd, int intStatusLate1st, int intStatusLate2nd) {

        int result = 0;
        if (periodId != 0 && idxFieldPresence != -1) {
            DBResultSet dbrs = null;

            // generate value of field presence date time
            String strPresenceTime = "null";
            int intDateSchedule = -1;
            Vector vFieldPresenceIdxWillUpdate = new Vector(1, 1);
            if (presenceDate != null) {
                strPresenceTime = "\"" + Formater.formatDate(presenceDate, "yyyy-MM-dd HH:mm:ss") + "\"";
                intDateSchedule = presenceDate.getDate();
            } else {
                intDateSchedule = idxFieldPresence;

                vFieldPresenceIdxWillUpdate.add("" + (OFFSET_INDEX_IN - 1 + idxFieldPresence));
                vFieldPresenceIdxWillUpdate.add("" + (OFFSET_INDEX_IN - 1 + INTERVAL_INDEX_HALF_CALENDAR + idxFieldPresence));
                vFieldPresenceIdxWillUpdate.add("" + (OFFSET_INDEX_OUT - 1 + idxFieldPresence));
                vFieldPresenceIdxWillUpdate.add("" + (OFFSET_INDEX_OUT - 1 + INTERVAL_INDEX_HALF_CALENDAR + idxFieldPresence));
            }

            // generate value of field presence status 
            int intStatusPresence1st = intStatusAbs1st;
            if (intStatusAbs1st == PstEmpSchedule.STATUS_PRESENCE_OK) {
                intStatusPresence1st = intStatusLate1st;
            }

            int intStatusPresence2nd = intStatusAbs2nd;
            if (intStatusPresence2nd == PstEmpSchedule.STATUS_PRESENCE_OK) {
                intStatusPresence2nd = intStatusLate2nd;
            }

            try {
                if (vFieldPresenceIdxWillUpdate != null && vFieldPresenceIdxWillUpdate.size() > 0) {
                    int iVectorCount = vFieldPresenceIdxWillUpdate.size();
                    for (int i = 0; i < iVectorCount; i++) {
                        int intIdxFieldPresence = Integer.parseInt("" + vFieldPresenceIdxWillUpdate.get(i));

                        String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                                + " SET " + PstEmpSchedule.fieldNames[intIdxFieldPresence]
                                + " = " + strPresenceTime
                                + ", " + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS - 1 + intDateSchedule]
                                + " = " + intStatusPresence1st
                                + ", " + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS - 1 + INTERVAL_INDEX_HALF_CALENDAR + intDateSchedule]
                                + " = " + intStatusPresence2nd
                                + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                                + " = " + periodId
                                + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                                + " = " + employeeId;

                        //System.out.println("\tupdateEmpSchdlWithPrscAbsLate : "+sql);  
                        result = DBHandler.execUpdate(sql);
                    }
                } else {
                    String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                            + " SET " + PstEmpSchedule.fieldNames[idxFieldPresence]
                            + " = " + strPresenceTime
                            + ", " + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS - 1 + intDateSchedule]
                            + " = " + intStatusPresence1st
                            + ", " + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS - 1 + INTERVAL_INDEX_HALF_CALENDAR + intDateSchedule]
                            + " = " + intStatusPresence2nd
                            + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                            + " = " + periodId
                            + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                            + " = " + employeeId;

                    //System.out.println("\tupdateEmpSchdlWithPrscAbsLate : "+sql);  
                    result = DBHandler.execUpdate(sql);
                }
            } catch (Exception e) {
                System.out.println("Exc updateScheduleDataByPresence : " + e.toString());
            } finally {
                DBResultSet.close(dbrs);
                return result;
            }
        } else {
            // System.out.println("Index updated is -1");   
            return result;
        }
    }

    /**
     * @param objEmpScheduleHistory
     * @return
     */
    public static EmpSchedule generateObjEmpSchedule(EmpScheduleHistory objEmpScheduleHistory) {

        EmpSchedule objEmpSchedule = new EmpSchedule();

        objEmpSchedule.setPeriodId(objEmpScheduleHistory.getPeriodId());
        objEmpSchedule.setEmployeeId(objEmpScheduleHistory.getEmployeeId());
        objEmpSchedule.setD1(objEmpScheduleHistory.getD1());
        objEmpSchedule.setD2(objEmpScheduleHistory.getD2());
        objEmpSchedule.setD3(objEmpScheduleHistory.getD3());
        objEmpSchedule.setD4(objEmpScheduleHistory.getD4());
        objEmpSchedule.setD5(objEmpScheduleHistory.getD5());
        objEmpSchedule.setD6(objEmpScheduleHistory.getD6());
        objEmpSchedule.setD7(objEmpScheduleHistory.getD7());
        objEmpSchedule.setD8(objEmpScheduleHistory.getD8());
        objEmpSchedule.setD9(objEmpScheduleHistory.getD9());
        objEmpSchedule.setD10(objEmpScheduleHistory.getD10());
        objEmpSchedule.setD11(objEmpScheduleHistory.getD11());
        objEmpSchedule.setD12(objEmpScheduleHistory.getD12());
        objEmpSchedule.setD13(objEmpScheduleHistory.getD13());
        objEmpSchedule.setD14(objEmpScheduleHistory.getD14());
        objEmpSchedule.setD15(objEmpScheduleHistory.getD15());
        objEmpSchedule.setD16(objEmpScheduleHistory.getD16());
        objEmpSchedule.setD17(objEmpScheduleHistory.getD17());
        objEmpSchedule.setD18(objEmpScheduleHistory.getD18());
        objEmpSchedule.setD19(objEmpScheduleHistory.getD19());
        objEmpSchedule.setD20(objEmpScheduleHistory.getD20());
        objEmpSchedule.setD21(objEmpScheduleHistory.getD21());
        objEmpSchedule.setD22(objEmpScheduleHistory.getD22());
        objEmpSchedule.setD23(objEmpScheduleHistory.getD23());
        objEmpSchedule.setD24(objEmpScheduleHistory.getD24());
        objEmpSchedule.setD25(objEmpScheduleHistory.getD25());
        objEmpSchedule.setD26(objEmpScheduleHistory.getD26());
        objEmpSchedule.setD27(objEmpScheduleHistory.getD27());
        objEmpSchedule.setD28(objEmpScheduleHistory.getD28());
        objEmpSchedule.setD29(objEmpScheduleHistory.getD29());
        objEmpSchedule.setD30(objEmpScheduleHistory.getD30());
        objEmpSchedule.setD31(objEmpScheduleHistory.getD31());
        objEmpSchedule.setD2nd1(objEmpScheduleHistory.getD2nd1());
        objEmpSchedule.setD2nd2(objEmpScheduleHistory.getD2nd2());
        objEmpSchedule.setD2nd3(objEmpScheduleHistory.getD2nd3());
        objEmpSchedule.setD2nd4(objEmpScheduleHistory.getD2nd4());
        objEmpSchedule.setD2nd5(objEmpScheduleHistory.getD2nd5());
        objEmpSchedule.setD2nd6(objEmpScheduleHistory.getD2nd6());
        objEmpSchedule.setD2nd7(objEmpScheduleHistory.getD2nd7());
        objEmpSchedule.setD2nd8(objEmpScheduleHistory.getD2nd8());
        objEmpSchedule.setD2nd9(objEmpScheduleHistory.getD2nd9());
        objEmpSchedule.setD2nd10(objEmpScheduleHistory.getD2nd10());
        objEmpSchedule.setD2nd11(objEmpScheduleHistory.getD2nd11());
        objEmpSchedule.setD2nd12(objEmpScheduleHistory.getD2nd12());
        objEmpSchedule.setD2nd13(objEmpScheduleHistory.getD2nd13());
        objEmpSchedule.setD2nd14(objEmpScheduleHistory.getD2nd14());
        objEmpSchedule.setD2nd15(objEmpScheduleHistory.getD2nd15());
        objEmpSchedule.setD2nd16(objEmpScheduleHistory.getD2nd16());
        objEmpSchedule.setD2nd17(objEmpScheduleHistory.getD2nd17());
        objEmpSchedule.setD2nd18(objEmpScheduleHistory.getD2nd18());
        objEmpSchedule.setD2nd19(objEmpScheduleHistory.getD2nd19());
        objEmpSchedule.setD2nd20(objEmpScheduleHistory.getD2nd20());
        objEmpSchedule.setD2nd21(objEmpScheduleHistory.getD2nd21());
        objEmpSchedule.setD2nd22(objEmpScheduleHistory.getD2nd22());
        objEmpSchedule.setD2nd23(objEmpScheduleHistory.getD2nd23());
        objEmpSchedule.setD2nd24(objEmpScheduleHistory.getD2nd24());
        objEmpSchedule.setD2nd25(objEmpScheduleHistory.getD2nd25());
        objEmpSchedule.setD2nd26(objEmpScheduleHistory.getD2nd26());
        objEmpSchedule.setD2nd27(objEmpScheduleHistory.getD2nd27());
        objEmpSchedule.setD2nd28(objEmpScheduleHistory.getD2nd28());
        objEmpSchedule.setD2nd29(objEmpScheduleHistory.getD2nd29());
        objEmpSchedule.setD2nd30(objEmpScheduleHistory.getD2nd30());
        objEmpSchedule.setD2nd31(objEmpScheduleHistory.getD2nd31());

        return objEmpSchedule;
    }

    /**
     * @param vectOfScheduleCat
     * @param intStockDp
     * @param intStockAl
     * @param intStockLl
     * @return
     * @created by Edhy
     */
    public Vector checkScheduleLeave(Vector vectOfScheduleCat, int intStockDp, int intAdvancedDp, float intStockAl, float intStockLl) {
        //public Vector checkScheduleLeave(Vector vectOfScheduleCat, int intStockDp, int intAdvancedDp, int intStockAl, int intStockLl) {
        Vector vectOfErr = new Vector(1, 1);
        int intErrDp = 0;
        int intErrAl = 0;
        int intErrLl = 0;
        if (vectOfScheduleCat != null && vectOfScheduleCat.size() > 0) {
            int intMaxVectSclhdCat = vectOfScheduleCat.size();
            for (int i = 0; i < intMaxVectSclhdCat; i++) {
                if ((vectOfScheduleCat.get(i) != null) && (String.valueOf(vectOfScheduleCat.get(i)).equals("null") == false)) {
                    int intSchldCat = Integer.parseInt(String.valueOf(vectOfScheduleCat.get(i)));
                    switch (intSchldCat) {
                        case PstScheduleCategory.CATEGORY_DAYOFF_PAYMENT:
                            intStockDp--;
                            if ((intStockDp + intAdvancedDp) == -1) {
                                intErrDp = i;
                            }
//                             System.out.println("when i = " + i + ", intStockDp+intAdvancedDp = " +(intStockDp+intAdvancedDp)+ ", intErrDp = " +intErrDp);                             
                            break;

                        case PstScheduleCategory.CATEGORY_ANNUAL_LEAVE:
                            intStockAl--;
                            if (intStockAl == -1) {
                                intErrAl = i;
                            }
//                             System.out.println("when i = " + i + ", intStockAl = " +intStockAl+", intErrAl = " + intErrAl);
                            break;

                        case PstScheduleCategory.CATEGORY_LONG_LEAVE:
                            intStockLl--;
                            if (intStockLl == -1) {
                                intErrLl = i;
                            }
//                             System.out.println("when i = " + i + ", intStockLl = " +intStockLl+", intErrLl = " +intErrLl);
                            break;

                        default:
                            break;
                    }
                }
            }
        }

        vectOfErr.add(String.valueOf(intErrDp));
        vectOfErr.add(String.valueOf(intErrAl));
        vectOfErr.add(String.valueOf(intErrLl));

        return vectOfErr;
    }

    /**
     * @param periodId
     * @param employeeId
     * @return
     */
    public static long getEmpScheduleIdLast(long employeeId) {
        long result = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH "
                    + " INNER JOIN " + PstPeriod.TBL_HR_PERIOD + " AS PER "
                    + " ON SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = PER." + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID]
                    + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId
                    + " ORDER BY PER." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE]
                    + " DESC";

//                System.out.println("getEmpScheduleIdLast : "+sql);   
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = rs.getLong(1);
                break;
            }
        } catch (Exception e) {
            System.out.println("getEmpScheduleIdLast exc : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /**
     * @param periodId
     * @param employeeId
     * @return
     */
    public static long getEmpScheduleId(long periodeId, long employeeId) {
        long result = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH "
                    + " INNER JOIN " + PstPeriod.TBL_HR_PERIOD + " AS PER "
                    + " ON SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = PER." + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID]
                    + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId + " AND PER." + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID] + " = " + periodeId;

//                System.out.println("getEmpScheduleIdLast : "+sql);   
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = rs.getLong(1);
                break;
            }
        } catch (Exception e) {
            System.out.println("getEmpScheduleId exc : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /**
     * get schedule data of selected date per selected employee
     *
     * @param selectedDate
     * @param employeeId
     * @return
     * @created by Edhy
     */
    public static ScheduleSymbol getDailySchedule(Date selectedDate, long employeeId) {
        ScheduleSymbol objScheduleSymbol = new ScheduleSymbol();

        long periodId = PstPeriod.getPeriodeIdBetween(selectedDate);
        String whereClause = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                + " = " + periodId
                + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                + " = " + employeeId;
        Vector vectEmpSchedule = PstEmpSchedule.list(0, 0, whereClause, "");
        if (vectEmpSchedule != null && vectEmpSchedule.size() > 0) {
            int maxEmpSchedule = vectEmpSchedule.size();
            EmpSchedule objEmpSchedule = new EmpSchedule();
            for (int i = 0; i < maxEmpSchedule; i++) {
                objEmpSchedule = (EmpSchedule) vectEmpSchedule.get(i);
                break;
            }

            long scheduleSymbolOid = 0;
            if (objEmpSchedule.getOID() != 0) {
                int idxSelectedDate = selectedDate.getDate();
                switch (idxSelectedDate) {
                    case 1:
                        scheduleSymbolOid = objEmpSchedule.getD1();
                        break;

                    case 2:
                        scheduleSymbolOid = objEmpSchedule.getD2();
                        break;

                    case 3:
                        scheduleSymbolOid = objEmpSchedule.getD3();
                        break;

                    case 4:
                        scheduleSymbolOid = objEmpSchedule.getD4();
                        break;

                    case 5:
                        scheduleSymbolOid = objEmpSchedule.getD5();
                        break;

                    case 6:
                        scheduleSymbolOid = objEmpSchedule.getD6();
                        break;

                    case 7:
                        scheduleSymbolOid = objEmpSchedule.getD7();
                        break;

                    case 8:
                        scheduleSymbolOid = objEmpSchedule.getD8();
                        break;

                    case 9:
                        scheduleSymbolOid = objEmpSchedule.getD9();
                        break;

                    case 10:
                        scheduleSymbolOid = objEmpSchedule.getD10();
                        break;

                    case 11:
                        scheduleSymbolOid = objEmpSchedule.getD11();
                        break;

                    case 12:
                        scheduleSymbolOid = objEmpSchedule.getD12();
                        break;

                    case 13:
                        scheduleSymbolOid = objEmpSchedule.getD13();
                        break;

                    case 14:
                        scheduleSymbolOid = objEmpSchedule.getD14();
                        break;

                    case 15:
                        scheduleSymbolOid = objEmpSchedule.getD15();
                        break;

                    case 16:
                        scheduleSymbolOid = objEmpSchedule.getD16();
                        break;

                    case 17:
                        scheduleSymbolOid = objEmpSchedule.getD17();
                        break;

                    case 18:
                        scheduleSymbolOid = objEmpSchedule.getD18();
                        break;

                    case 19:
                        scheduleSymbolOid = objEmpSchedule.getD19();
                        break;

                    case 20:
                        scheduleSymbolOid = objEmpSchedule.getD20();
                        break;

                    case 21:
                        scheduleSymbolOid = objEmpSchedule.getD21();
                        break;

                    case 22:
                        scheduleSymbolOid = objEmpSchedule.getD22();
                        break;

                    case 23:
                        scheduleSymbolOid = objEmpSchedule.getD23();
                        break;

                    case 24:
                        scheduleSymbolOid = objEmpSchedule.getD24();
                        break;

                    case 25:
                        scheduleSymbolOid = objEmpSchedule.getD25();
                        break;

                    case 26:
                        scheduleSymbolOid = objEmpSchedule.getD26();
                        break;

                    case 27:
                        scheduleSymbolOid = objEmpSchedule.getD27();
                        break;

                    case 28:
                        scheduleSymbolOid = objEmpSchedule.getD28();
                        break;

                    case 29:
                        scheduleSymbolOid = objEmpSchedule.getD29();
                        break;

                    case 30:
                        scheduleSymbolOid = objEmpSchedule.getD30();
                        break;

                    case 31:
                        scheduleSymbolOid = objEmpSchedule.getD31();
                        break;
                }
            }
            //uate by satrya 2012-08-21
            if (scheduleSymbolOid != 0) {
                try {
                    objScheduleSymbol = PstScheduleSymbol.fetchExc(scheduleSymbolOid);
                } catch (Exception e) {
                    System.out.println("Exc when fetch Schedule Symbol : " + e.toString());
                }
            }
        }

        return objScheduleSymbol;
    }

    /**
     * get schedule data of selected date per selected employee
     *
     * @param selectedDate
     * @param employeeId
     * @return
     * @created by Edhy
     */
    public static ScheduleSymbol getDailyFirstSchedule(Date selectedDate, long employeeId) {
        ScheduleSymbol objScheduleSymbol = new ScheduleSymbol();

        long periodId = PstPeriod.getPeriodeIdBetween(selectedDate);
        String whereClause = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                + " = " + periodId
                + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                + " = " + employeeId;
        Vector vectEmpSchedule = PstEmpSchedule.list(0, 0, whereClause, "");
        if (vectEmpSchedule != null && vectEmpSchedule.size() > 0) {
            int maxEmpSchedule = vectEmpSchedule.size();
            EmpSchedule objEmpSchedule = new EmpSchedule();
            for (int i = 0; i < maxEmpSchedule; i++) {
                objEmpSchedule = (EmpSchedule) vectEmpSchedule.get(i);
                break;
            }

            long scheduleSymbolOid = 0;
            if (objEmpSchedule.getOID() != 0) {
                int idxSelectedDate = selectedDate.getDate();
                switch (idxSelectedDate) {
                    case 1:
                        scheduleSymbolOid = objEmpSchedule.getD1();
                        break;

                    case 2:
                        scheduleSymbolOid = objEmpSchedule.getD2();
                        break;

                    case 3:
                        scheduleSymbolOid = objEmpSchedule.getD3();
                        break;

                    case 4:
                        scheduleSymbolOid = objEmpSchedule.getD4();
                        break;

                    case 5:
                        scheduleSymbolOid = objEmpSchedule.getD5();
                        break;

                    case 6:
                        scheduleSymbolOid = objEmpSchedule.getD6();
                        break;

                    case 7:
                        scheduleSymbolOid = objEmpSchedule.getD7();
                        break;

                    case 8:
                        scheduleSymbolOid = objEmpSchedule.getD8();
                        break;

                    case 9:
                        scheduleSymbolOid = objEmpSchedule.getD9();
                        break;

                    case 10:
                        scheduleSymbolOid = objEmpSchedule.getD10();
                        break;

                    case 11:
                        scheduleSymbolOid = objEmpSchedule.getD11();
                        break;

                    case 12:
                        scheduleSymbolOid = objEmpSchedule.getD12();
                        break;

                    case 13:
                        scheduleSymbolOid = objEmpSchedule.getD13();
                        break;

                    case 14:
                        scheduleSymbolOid = objEmpSchedule.getD14();
                        break;

                    case 15:
                        scheduleSymbolOid = objEmpSchedule.getD15();
                        break;

                    case 16:
                        scheduleSymbolOid = objEmpSchedule.getD16();
                        break;

                    case 17:
                        scheduleSymbolOid = objEmpSchedule.getD17();
                        break;

                    case 18:
                        scheduleSymbolOid = objEmpSchedule.getD18();
                        break;

                    case 19:
                        scheduleSymbolOid = objEmpSchedule.getD19();
                        break;

                    case 20:
                        scheduleSymbolOid = objEmpSchedule.getD20();
                        break;

                    case 21:
                        scheduleSymbolOid = objEmpSchedule.getD21();
                        break;

                    case 22:
                        scheduleSymbolOid = objEmpSchedule.getD22();
                        break;

                    case 23:
                        scheduleSymbolOid = objEmpSchedule.getD23();
                        break;

                    case 24:
                        scheduleSymbolOid = objEmpSchedule.getD24();
                        break;

                    case 25:
                        scheduleSymbolOid = objEmpSchedule.getD25();
                        break;

                    case 26:
                        scheduleSymbolOid = objEmpSchedule.getD26();
                        break;

                    case 27:
                        scheduleSymbolOid = objEmpSchedule.getD27();
                        break;

                    case 28:
                        scheduleSymbolOid = objEmpSchedule.getD28();
                        break;

                    case 29:
                        scheduleSymbolOid = objEmpSchedule.getD29();
                        break;

                    case 30:
                        scheduleSymbolOid = objEmpSchedule.getD30();
                        break;

                    case 31:
                        scheduleSymbolOid = objEmpSchedule.getD31();
                        break;
                }
            }


            try {
                objScheduleSymbol = PstScheduleSymbol.fetchExc(scheduleSymbolOid);
            } catch (Exception e) {
                System.out.println("Exc when fetch Schedule Symbol : " + e.toString());
            }
        }

        return objScheduleSymbol;
    }

    /**
     * get schedule data of selected date per selected employee
     *
     * @param selectedDate
     * @param employeeId
     * @return
     * @created by Edhy
     */
    public static ScheduleSymbol getDailySecondSchedule(Date selectedDate, long employeeId) {
        ScheduleSymbol objScheduleSymbol = new ScheduleSymbol();

        long periodId = PstPeriod.getPeriodeIdBetween(selectedDate);
        String whereClause = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                + " = " + periodId
                + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                + " = " + employeeId;
        Vector vectEmpSchedule = PstEmpSchedule.list(0, 0, whereClause, "");
        if (vectEmpSchedule != null && vectEmpSchedule.size() > 0) {
            int maxEmpSchedule = vectEmpSchedule.size();
            EmpSchedule objEmpSchedule = new EmpSchedule();
            for (int i = 0; i < maxEmpSchedule; i++) {
                objEmpSchedule = (EmpSchedule) vectEmpSchedule.get(i);
                break;
            }

            long scheduleSymbolOid = 0;
            if (objEmpSchedule.getOID() != 0) {
                int idxSelectedDate = selectedDate.getDate();
                switch (idxSelectedDate) {
                    case 1:
                        scheduleSymbolOid = objEmpSchedule.getD2nd1();
                        break;

                    case 2:
                        scheduleSymbolOid = objEmpSchedule.getD2nd2();
                        break;

                    case 3:
                        scheduleSymbolOid = objEmpSchedule.getD2nd3();
                        break;

                    case 4:
                        scheduleSymbolOid = objEmpSchedule.getD2nd4();
                        break;

                    case 5:
                        scheduleSymbolOid = objEmpSchedule.getD2nd5();
                        break;

                    case 6:
                        scheduleSymbolOid = objEmpSchedule.getD2nd6();
                        break;

                    case 7:
                        scheduleSymbolOid = objEmpSchedule.getD2nd7();
                        break;

                    case 8:
                        scheduleSymbolOid = objEmpSchedule.getD2nd8();
                        break;

                    case 9:
                        scheduleSymbolOid = objEmpSchedule.getD2nd9();
                        break;

                    case 10:
                        scheduleSymbolOid = objEmpSchedule.getD2nd10();
                        break;

                    case 11:
                        scheduleSymbolOid = objEmpSchedule.getD2nd11();
                        break;

                    case 12:
                        scheduleSymbolOid = objEmpSchedule.getD2nd12();
                        break;

                    case 13:
                        scheduleSymbolOid = objEmpSchedule.getD2nd13();
                        break;

                    case 14:
                        scheduleSymbolOid = objEmpSchedule.getD2nd14();
                        break;

                    case 15:
                        scheduleSymbolOid = objEmpSchedule.getD2nd15();
                        break;

                    case 16:
                        scheduleSymbolOid = objEmpSchedule.getD2nd16();
                        break;

                    case 17:
                        scheduleSymbolOid = objEmpSchedule.getD2nd17();
                        break;

                    case 18:
                        scheduleSymbolOid = objEmpSchedule.getD2nd18();
                        break;

                    case 19:
                        scheduleSymbolOid = objEmpSchedule.getD2nd19();
                        break;

                    case 20:
                        scheduleSymbolOid = objEmpSchedule.getD2nd20();
                        break;

                    case 21:
                        scheduleSymbolOid = objEmpSchedule.getD2nd21();
                        break;

                    case 22:
                        scheduleSymbolOid = objEmpSchedule.getD2nd22();
                        break;

                    case 23:
                        scheduleSymbolOid = objEmpSchedule.getD2nd23();
                        break;

                    case 24:
                        scheduleSymbolOid = objEmpSchedule.getD2nd24();
                        break;

                    case 25:
                        scheduleSymbolOid = objEmpSchedule.getD2nd25();
                        break;

                    case 26:
                        scheduleSymbolOid = objEmpSchedule.getD2nd26();
                        break;

                    case 27:
                        scheduleSymbolOid = objEmpSchedule.getD2nd27();
                        break;

                    case 28:
                        scheduleSymbolOid = objEmpSchedule.getD2nd28();
                        break;

                    case 29:
                        scheduleSymbolOid = objEmpSchedule.getD2nd29();
                        break;

                    case 30:
                        scheduleSymbolOid = objEmpSchedule.getD2nd30();
                        break;

                    case 31:
                        scheduleSymbolOid = objEmpSchedule.getD2nd31();
                        break;
                }
            }


            try {
                //update by satrya 2012-12-21
                if (scheduleSymbolOid != 0) {
                    objScheduleSymbol = PstScheduleSymbol.fetchExc(scheduleSymbolOid);
                }
            } catch (Exception e) {
                System.out.println("Exc when fetch Schedule Symbol2nd : " + e.toString());
            }
        }

        return objScheduleSymbol;
    }

    /**
     * @param idxPresence
     * @param employeeId
     * @param periodId
     * @return
     */
    public static Date getPresenceOnSchedule(int idxPresence, long employeeId, long periodId) {
        Date result = null;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT " + PstEmpSchedule.fieldNames[idxPresence]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                    + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

//                System.out.println("getPresenceOnSchedule sql  : "+sql);   
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = DBHandler.convertDate(rs.getDate(1), rs.getTime(1));
                break;
            }
        } catch (Exception e) {
            System.out.println("getPresenceOnSchedule exc : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /**
     * Pencarian schdule Id by on emp schedule create by satrya 2013-07-12
     *
     * @param idxPresence
     * @param employeeId
     * @param periodId
     * @return
     */
    public static long getOidScheduleSymbolOnSchedule(int idxPresence, long employeeId, long periodId) {
        long result = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT " + PstEmpSchedule.fieldNames[idxPresence]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                    + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

//                System.out.println("getPresenceOnSchedule sql  : "+sql);   
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = rs.getLong(1);
                break;
            }
        } catch (Exception e) {
            System.out.println("getPresenceOnSchedule exc : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }
    //update by satrya 2012-09-24

    /**
     * Keterangan : mengambil data presence berdasarkan schedule ID
     *
     * @param idxPresence
     * @param scheduleId
     * @throws Null PointerException
     * @return
     */
    public static Date getPresencebyScheduleId(int idxPresence, long scheduleId) {
        Date result = null;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT " + PstEmpSchedule.fieldNames[idxPresence]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                    + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID]
                    + " = " + scheduleId;


//                System.out.println("getPresenceOnSchedule sql  : "+sql);   
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = DBHandler.convertDate(rs.getDate(1), rs.getTime(1));
                break;
            }
        } catch (Exception e) {
            System.out.println("getPresencebyScheduleId exc : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }
///update by satrya 2012-09-05

    /**
     *
     * @param existPresenceSch1In
     * @param presenceDate
     * @param employeeId
     * @return mencari nilai apakah sudah ada break out
     */
    public static int getCountPersonalOutIn(Date existPresenceSch1In, Date presenceDate, long employeeId) {
        DBResultSet dbrs = null;
        int result = 0;


        try {
            String sql = " SELECT COUNT(hp."
                    + PstPresence.fieldNames[PstPresence.FLD_STATUS]
                    + ")"
                    + " FROM " + PstPresence.TBL_HR_PRESENCE + " AS hp "
                    + " WHERE " + PstPresence.fieldNames[PstPresence.FLD_EMPLOYEE_ID] + "=\"" + employeeId + "\" AND "
                    //update by satrya 2012-09-28
                    + PstPresence.fieldNames[PstPresence.FLD_PRESENCE_DATETIME] + " BETWEEN \"" + Formater.formatDate(existPresenceSch1In, "yyyy-MM-dd HH:mm:ss")
                    + "\"" + " AND " + "\"" + Formater.formatDate(presenceDate, "yyyy-MM-dd HH:mm:ss") + "\""
                    + " AND (" + PstPresence.fieldNames[PstPresence.FLD_STATUS] + " = "
                    + Presence.STATUS_OUT_PERSONAL + " OR "
                    + PstPresence.fieldNames[PstPresence.FLD_STATUS] + " = " + Presence.STATUS_IN_PERSONAL + ")";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                result = rs.getInt(1);
            }
            rs.close();
            return result;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return 0;
    }

    /**
     *
     * @param existPresenceSch1InYesterday
     * @param presenceDate
     * @param employeeId
     * @return mencari status exist break Out yesterday
     */
    public static int getCountPersonalOutInYesterday(Date existPresenceSch1InYesterday, Date presenceDate, long employeeId) {
        return getCountPersonalOutIn(existPresenceSch1InYesterday, presenceDate, employeeId);
    }

    // method untuk periode dinamis ( mebcari id dari schedule pertama)
    // Yunny
    public static long getSchedule(int startDate, long employeeId, Date periodStartDate) {
        long scheduleId = 0;
        long periodId = PstPeriod.getPeriodIdBySelectedDate(periodStartDate);
        //System.out.println("periodId  "+periodId);
        String whereClause = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                + " = " + periodId
                + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                + " = " + employeeId;
        Vector vectEmpSchedule = PstEmpSchedule.list(0, 0, whereClause, "");
        if (vectEmpSchedule != null && vectEmpSchedule.size() > 0) {
            int maxEmpSchedule = vectEmpSchedule.size();
            EmpSchedule objEmpSchedule = new EmpSchedule();
            for (int i = 0; i < maxEmpSchedule; i++) {
                objEmpSchedule = (EmpSchedule) vectEmpSchedule.get(i);
                break;
            }

            switch (startDate) {
                case 1:
                    scheduleId = objEmpSchedule.getD1();
                    break;

                case 2:
                    scheduleId = objEmpSchedule.getD2();
                    break;

                case 3:
                    scheduleId = objEmpSchedule.getD3();
                    break;

                case 4:
                    scheduleId = objEmpSchedule.getD4();
                    break;

                case 5:
                    scheduleId = objEmpSchedule.getD5();
                    break;

                case 6:
                    scheduleId = objEmpSchedule.getD6();
                    break;

                case 7:
                    scheduleId = objEmpSchedule.getD7();
                    break;

                case 8:
                    scheduleId = objEmpSchedule.getD8();
                    break;

                case 9:
                    scheduleId = objEmpSchedule.getD9();
                    break;

                case 10:
                    scheduleId = objEmpSchedule.getD10();
                    break;

                case 11:
                    scheduleId = objEmpSchedule.getD11();
                    break;

                case 12:
                    scheduleId = objEmpSchedule.getD12();
                    break;

                case 13:
                    scheduleId = objEmpSchedule.getD13();
                    break;

                case 14:
                    scheduleId = objEmpSchedule.getD14();
                    break;

                case 15:
                    scheduleId = objEmpSchedule.getD15();
                    break;

                case 16:
                    scheduleId = objEmpSchedule.getD16();
                    break;

                case 17:
                    scheduleId = objEmpSchedule.getD17();
                    break;

                case 18:
                    scheduleId = objEmpSchedule.getD18();
                    break;

                case 19:
                    scheduleId = objEmpSchedule.getD19();
                    break;

                case 20:
                    scheduleId = objEmpSchedule.getD20();
                    break;

                case 21:
                    scheduleId = objEmpSchedule.getD21();
                    break;

                case 22:
                    scheduleId = objEmpSchedule.getD22();
                    break;

                case 23:
                    scheduleId = objEmpSchedule.getD23();
                    break;

                case 24:
                    scheduleId = objEmpSchedule.getD24();
                    break;

                case 25:
                    scheduleId = objEmpSchedule.getD25();
                    break;

                case 26:
                    scheduleId = objEmpSchedule.getD26();
                    //System.out.println("scheduleId  "+scheduleId);
                    break;

                case 27:
                    scheduleId = objEmpSchedule.getD27();
                    break;

                case 28:
                    scheduleId = objEmpSchedule.getD28();
                    break;

                case 29:
                    scheduleId = objEmpSchedule.getD29();
                    break;

                case 30:
                    scheduleId = objEmpSchedule.getD30();
                    break;

                case 31:
                    scheduleId = objEmpSchedule.getD31();
                    break;
            }
            try {
                //objScheduleSymbol = PstScheduleSymbol.fetchExc(scheduleSymbolOid);
            } catch (Exception e) {
                System.out.println("Exc when fetch Schedule Symbol : " + e.toString());
            }
        }
        return scheduleId;

    }

    public static EmpSchedule listSchedule(long employeeId, Date periodStartDate) {

        long periodId = PstPeriod.getPeriodIdBySelectedDate(periodStartDate);

        String whereClause = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                + " = " + periodId
                + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                + " = " + employeeId;

        Vector vectEmpSchedule = PstEmpSchedule.listEmpSchedule(0, 1, whereClause, "");

        if (vectEmpSchedule != null && vectEmpSchedule.size() > 0) {

            EmpSchedule objEmpSchedule = new EmpSchedule();

            objEmpSchedule = (EmpSchedule) vectEmpSchedule.get(0);

            return objEmpSchedule;

        }

        return null;
    }

    public static ScheduleD1D2 getSch(EmpSchedule empSchedule, int day) {

        if (empSchedule == null || empSchedule.getOID() == 0) {
            return null;
        }


        if (day == 1) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD1());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd1());
            return scheduleD1D2;

        } else if (day == 2) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD2());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd2());
            return scheduleD1D2;

        } else if (day == 3) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD3());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd3());
            return scheduleD1D2;

        } else if (day == 4) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD4());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd4());
            return scheduleD1D2;

        } else if (day == 5) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD5());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd5());
            return scheduleD1D2;

        } else if (day == 6) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD6());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd6());
            return scheduleD1D2;

        } else if (day == 7) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD7());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd7());
            return scheduleD1D2;

        } else if (day == 8) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD8());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd8());
            return scheduleD1D2;

        } else if (day == 9) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD9());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd9());
            return scheduleD1D2;

        } else if (day == 10) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD10());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd10());
            return scheduleD1D2;

        } else if (day == 11) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD11());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd11());
            return scheduleD1D2;

        } else if (day == 12) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD12());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd12());
            return scheduleD1D2;

        } else if (day == 13) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD13());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd13());
            return scheduleD1D2;

        } else if (day == 14) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD14());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd14());
            return scheduleD1D2;

        } else if (day == 15) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD15());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd15());
            return scheduleD1D2;

        } else if (day == 16) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD16());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd16());
            return scheduleD1D2;

        } else if (day == 17) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD17());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd17());
            return scheduleD1D2;

        } else if (day == 18) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD18());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd18());
            return scheduleD1D2;

        } else if (day == 19) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD19());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd19());
            return scheduleD1D2;

        } else if (day == 20) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD20());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd20());
            return scheduleD1D2;

        } else if (day == 21) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD21());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd21());
            return scheduleD1D2;

        } else if (day == 22) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD22());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd22());
            return scheduleD1D2;

        } else if (day == 23) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD23());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd23());
            return scheduleD1D2;

        } else if (day == 24) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD24());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd24());
            return scheduleD1D2;

        } else if (day == 25) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD25());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd25());
            return scheduleD1D2;

        } else if (day == 26) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD26());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd26());
            return scheduleD1D2;

        } else if (day == 27) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD27());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd27());
            return scheduleD1D2;

        } else if (day == 28) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD28());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd28());
            return scheduleD1D2;

        } else if (day == 29) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD29());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd29());
            return scheduleD1D2;

        } else if (day == 30) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD30());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd30());
            return scheduleD1D2;

        } else if (day == 31) {

            ScheduleD1D2 scheduleD1D2 = new ScheduleD1D2();
            scheduleD1D2.setD(empSchedule.getD31());
            scheduleD1D2.setD2Nd(empSchedule.getD2nd31());
            return scheduleD1D2;

        }

        return null;
    }

    // method untuk periode dinamis ( mebcari id dari schedule kedua)
    // Yunny
    public static long getSchedule2(int startDate, long employeeId, Date periodStartDate) {
        long scheduleId = 0;
        long periodId = PstPeriod.getPeriodIdBySelectedDate(periodStartDate);
        //System.out.println("periodId  "+periodId);
        String whereClause = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                + " = " + periodId
                + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                + " = " + employeeId;
        Vector vectEmpSchedule = PstEmpSchedule.list(0, 0, whereClause, "");
        if (vectEmpSchedule != null && vectEmpSchedule.size() > 0) {
            int maxEmpSchedule = vectEmpSchedule.size();
            EmpSchedule objEmpSchedule = new EmpSchedule();
            for (int i = 0; i < maxEmpSchedule; i++) {
                objEmpSchedule = (EmpSchedule) vectEmpSchedule.get(i);
                break;
            }

            switch (startDate) {
                case 1:
                    scheduleId = objEmpSchedule.getD2nd1();
                    break;

                case 2:
                    scheduleId = objEmpSchedule.getD2nd2();
                    break;

                case 3:
                    scheduleId = objEmpSchedule.getD2nd3();
                    break;

                case 4:
                    scheduleId = objEmpSchedule.getD2nd4();
                    break;

                case 5:
                    scheduleId = objEmpSchedule.getD2nd5();
                    break;

                case 6:
                    scheduleId = objEmpSchedule.getD2nd6();
                    break;

                case 7:
                    scheduleId = objEmpSchedule.getD2nd7();
                    break;

                case 8:
                    scheduleId = objEmpSchedule.getD2nd8();
                    break;

                case 9:
                    scheduleId = objEmpSchedule.getD2nd9();
                    break;

                case 10:
                    scheduleId = objEmpSchedule.getD2nd10();
                    break;

                case 11:
                    scheduleId = objEmpSchedule.getD2nd11();
                    break;

                case 12:
                    scheduleId = objEmpSchedule.getD2nd12();
                    break;

                case 13:
                    scheduleId = objEmpSchedule.getD2nd13();
                    break;

                case 14:
                    scheduleId = objEmpSchedule.getD2nd14();
                    break;

                case 15:
                    scheduleId = objEmpSchedule.getD2nd15();
                    break;

                case 16:
                    scheduleId = objEmpSchedule.getD2nd16();
                    break;

                case 17:
                    scheduleId = objEmpSchedule.getD2nd17();
                    break;

                case 18:
                    scheduleId = objEmpSchedule.getD2nd18();
                    break;

                case 19:
                    scheduleId = objEmpSchedule.getD2nd19();
                    break;

                case 20:
                    scheduleId = objEmpSchedule.getD2nd20();
                    break;

                case 21:
                    scheduleId = objEmpSchedule.getD2nd21();
                    break;

                case 22:
                    scheduleId = objEmpSchedule.getD2nd22();
                    break;

                case 23:
                    scheduleId = objEmpSchedule.getD2nd23();
                    break;

                case 24:
                    scheduleId = objEmpSchedule.getD2nd24();
                    break;

                case 25:
                    scheduleId = objEmpSchedule.getD2nd25();
                    break;

                case 26:
                    scheduleId = objEmpSchedule.getD2nd26();
                    break;

                case 27:
                    scheduleId = objEmpSchedule.getD2nd27();
                    break;

                case 28:
                    scheduleId = objEmpSchedule.getD2nd28();
                    break;

                case 29:
                    scheduleId = objEmpSchedule.getD2nd29();
                    break;

                case 30:
                    scheduleId = objEmpSchedule.getD2nd30();
                    break;

                case 31:
                    scheduleId = objEmpSchedule.getD2nd31();
                    break;
            }
            try {
                //objScheduleSymbol = PstScheduleSymbol.fetchExc(scheduleSymbolOid);
            } catch (Exception e) {
                System.out.println("Exc when fetch Schedule Symbol : " + e.toString());
            }
        }
        return scheduleId;

    }

    public static int getStatus1(int startDate, long employeeId, Date periodStartDate) {
        int status1 = 0;
        long periodId = PstPeriod.getPeriodIdBySelectedDate(periodStartDate);
        //System.out.println("startDateBean  " + startDate);
        String whereClause = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                + " = " + periodId
                + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                + " = " + employeeId;
        Vector vectEmpSchedule = PstEmpSchedule.list(0, 0, whereClause, "");
        if (vectEmpSchedule != null && vectEmpSchedule.size() > 0) {
            int maxEmpSchedule = vectEmpSchedule.size();
            EmpSchedule objEmpSchedule = new EmpSchedule();
            for (int i = 0; i < maxEmpSchedule; i++) {
                objEmpSchedule = (EmpSchedule) vectEmpSchedule.get(i);
                break;
            }

            switch (startDate) {
                case 1:
                    status1 = objEmpSchedule.getStatus1();
                    //System.out.println("status1Bean1  "+status1);
                    break;

                case 2:
                    status1 = objEmpSchedule.getStatus2();
                    // System.out.println("status1Bean2  "+status1);
                    break;

                case 3:
                    status1 = objEmpSchedule.getStatus3();
                    // System.out.println("status1Bean3  "+status1);
                    break;

                case 4:
                    status1 = objEmpSchedule.getStatus4();
                    //System.out.println("status1Bean4  "+status1);
                    break;

                case 5:
                    status1 = objEmpSchedule.getStatus5();
                    //System.out.println("status1Bean 5 "+status1);
                    break;

                case 6:
                    status1 = objEmpSchedule.getStatus6();
                    //System.out.println("status1Bean6  "+status1);
                    break;

                case 7:
                    status1 = objEmpSchedule.getStatus7();
                    //System.out.println("status1Bean7  "+status1);
                    break;

                case 8:
                    status1 = objEmpSchedule.getStatus8();
                    //System.out.println("status1Bean8  "+status1);
                    break;

                case 9:
                    status1 = objEmpSchedule.getStatus9();
                    // System.out.println("status1Bean9  "+status1);
                    break;

                case 10:
                    status1 = objEmpSchedule.getStatus10();
                    //System.out.println("status1Bean 10 "+status1);
                    break;

                case 11:
                    status1 = objEmpSchedule.getStatus11();
                    // System.out.println("status1Bean11  "+status1);
                    break;

                case 12:
                    status1 = objEmpSchedule.getStatus12();
                    //System.out.println("status1Bean12  "+status1);
                    break;

                case 13:
                    status1 = objEmpSchedule.getStatus13();
                    //System.out.println("status1Bean13  "+status1);
                    break;

                case 14:
                    status1 = objEmpSchedule.getStatus14();
                    // System.out.println("status1Bean14  "+status1);
                    break;

                case 15:
                    status1 = objEmpSchedule.getStatus15();
                    // System.out.println("status1Bean15  "+status1);
                    break;

                case 16:
                    status1 = objEmpSchedule.getStatus16();
                    //System.out.println("status1Bean16  "+status1);

                    break;

                case 17:
                    status1 = objEmpSchedule.getStatus17();
                    //System.out.println("status1Bean17  "+status1);
                    break;

                case 18:
                    status1 = objEmpSchedule.getStatus18();
                    //System.out.println("status1Bean18  "+status1);
                    break;

                case 19:
                    status1 = objEmpSchedule.getStatus19();
                    //System.out.println("status1Bean19  "+status1);
                    break;

                case 20:
                    status1 = objEmpSchedule.getStatus20();
                    //System.out.println("status1Bean20  "+status1);
                    break;

                case 21:
                    status1 = objEmpSchedule.getStatus21();
                    //System.out.println("status1Bean21  "+status1);
                    break;

                case 22:
                    status1 = objEmpSchedule.getStatus22();
                    //System.out.println("status1Bean22  "+status1);
                    break;

                case 23:
                    status1 = objEmpSchedule.getStatus23();
                    //System.out.println("status1Bean23  "+status1);
                    break;

                case 24:
                    status1 = objEmpSchedule.getStatus24();
                    // System.out.println("status1Bean24  "+status1);
                    break;

                case 25:
                    status1 = objEmpSchedule.getStatus25();
                    //System.out.println("status1Bean25  "+status1);
                    break;

                case 26:
                    status1 = objEmpSchedule.getStatus26();
                    // System.out.println("status1Bean  "+status1);
                    break;

                case 27:
                    status1 = objEmpSchedule.getStatus27();
                    // System.out.println("status1Bean27  "+status1);
                    break;

                case 28:
                    status1 = objEmpSchedule.getStatus28();
                    // System.out.println("status1Bean28  "+status1);
                    break;

                case 29:
                    status1 = objEmpSchedule.getStatus29();
                    // System.out.println("status1Bean29  "+status1);
                    break;

                case 30:
                    status1 = objEmpSchedule.getStatus30();
                    //System.out.println("status1Bean30  "+status1);
                    break;

                case 31:
                    status1 = objEmpSchedule.getStatus31();
                    // System.out.println("status1Bean 31 "+status1);
                    break;
            }
            try {
                //objScheduleSymbol = PstScheduleSymbol.fetchExc(scheduleSymbolOid);
            } catch (Exception e) {
                System.out.println("Exc when fetch Schedule Symbol : " + e.toString());
            }
        }
        return status1;

    }

    public static int getStatus1WithInAndOut(int startDate, long employeeId, long periodId) {
        int status1 = 0;
        //System.out.println("startDateBean  " + startDate);
        String whereClause = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                + " = " + periodId
                + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                + " = " + employeeId;
        Vector vectEmpSchedule = PstEmpSchedule.list(0, 0, whereClause, "");
        if (vectEmpSchedule != null && vectEmpSchedule.size() > 0) {
            int maxEmpSchedule = vectEmpSchedule.size();
            EmpSchedule objEmpSchedule = new EmpSchedule();
            for (int i = 0; i < maxEmpSchedule; i++) {
                objEmpSchedule = (EmpSchedule) vectEmpSchedule.get(i);
                break;
            }
            Date InDate = null;
            Date OutDate = null;
            switch (startDate) {
                case 1:
                    status1 = objEmpSchedule.getStatus1();
                    InDate = objEmpSchedule.getIn1();
                    OutDate = objEmpSchedule.getOut1();
                    //System.out.println("status1Bean1  "+status1);
                    break;

                case 2:
                    status1 = objEmpSchedule.getStatus2();
                    InDate = objEmpSchedule.getIn2();
                    OutDate = objEmpSchedule.getOut2();
                    // System.out.println("status1Bean2  "+status1);
                    break;

                case 3:
                    status1 = objEmpSchedule.getStatus3();
                    InDate = objEmpSchedule.getIn3();
                    OutDate = objEmpSchedule.getOut3();
                    // System.out.println("status1Bean3  "+status1);
                    break;

                case 4:
                    status1 = objEmpSchedule.getStatus4();
                    InDate = objEmpSchedule.getIn4();
                    OutDate = objEmpSchedule.getOut4();
                    //System.out.println("status1Bean4  "+status1);
                    break;

                case 5:
                    status1 = objEmpSchedule.getStatus5();
                    InDate = objEmpSchedule.getIn5();
                    OutDate = objEmpSchedule.getOut5();
                    //System.out.println("status1Bean 5 "+status1);
                    break;

                case 6:
                    status1 = objEmpSchedule.getStatus6();
                    InDate = objEmpSchedule.getIn6();
                    OutDate = objEmpSchedule.getOut6();
                    //System.out.println("status1Bean6  "+status1);
                    break;

                case 7:
                    status1 = objEmpSchedule.getStatus7();
                    InDate = objEmpSchedule.getIn7();
                    OutDate = objEmpSchedule.getOut7();
                    //System.out.println("status1Bean7  "+status1);
                    break;

                case 8:
                    status1 = objEmpSchedule.getStatus8();
                    InDate = objEmpSchedule.getIn8();
                    OutDate = objEmpSchedule.getOut8();
                    //System.out.println("status1Bean8  "+status1);
                    break;

                case 9:
                    status1 = objEmpSchedule.getStatus9();
                    InDate = objEmpSchedule.getIn9();
                    OutDate = objEmpSchedule.getOut9();
                    // System.out.println("status1Bean9  "+status1);
                    break;

                case 10:
                    status1 = objEmpSchedule.getStatus10();
                    InDate = objEmpSchedule.getIn10();
                    OutDate = objEmpSchedule.getOut10();
                    //System.out.println("status1Bean 10 "+status1);
                    break;

                case 11:
                    status1 = objEmpSchedule.getStatus11();
                    InDate = objEmpSchedule.getIn11();
                    OutDate = objEmpSchedule.getOut11();
                    // System.out.println("status1Bean11  "+status1);
                    break;

                case 12:
                    status1 = objEmpSchedule.getStatus12();
                    InDate = objEmpSchedule.getIn12();
                    OutDate = objEmpSchedule.getOut12();
                    //System.out.println("status1Bean12  "+status1);
                    break;

                case 13:
                    status1 = objEmpSchedule.getStatus13();
                    InDate = objEmpSchedule.getIn13();
                    OutDate = objEmpSchedule.getOut13();
                    //System.out.println("status1Bean13  "+status1);
                    break;

                case 14:
                    status1 = objEmpSchedule.getStatus14();
                    InDate = objEmpSchedule.getIn14();
                    OutDate = objEmpSchedule.getOut14();
                    // System.out.println("status1Bean14  "+status1);
                    break;

                case 15:
                    status1 = objEmpSchedule.getStatus15();
                    InDate = objEmpSchedule.getIn15();
                    OutDate = objEmpSchedule.getOut15();
                    // System.out.println("status1Bean15  "+status1);
                    break;

                case 16:
                    status1 = objEmpSchedule.getStatus16();
                    InDate = objEmpSchedule.getIn16();
                    OutDate = objEmpSchedule.getOut16();
                    //System.out.println("status1Bean16  "+status1);

                    break;

                case 17:
                    status1 = objEmpSchedule.getStatus17();
                    InDate = objEmpSchedule.getIn17();
                    OutDate = objEmpSchedule.getOut17();
                    //System.out.println("status1Bean17  "+status1);
                    break;

                case 18:
                    status1 = objEmpSchedule.getStatus18();
                    InDate = objEmpSchedule.getIn18();
                    OutDate = objEmpSchedule.getOut18();
                    //System.out.println("status1Bean18  "+status1);
                    break;

                case 19:
                    status1 = objEmpSchedule.getStatus19();
                    InDate = objEmpSchedule.getIn19();
                    OutDate = objEmpSchedule.getOut19();
                    //System.out.println("status1Bean19  "+status1);
                    break;

                case 20:
                    status1 = objEmpSchedule.getStatus20();
                    InDate = objEmpSchedule.getIn20();
                    OutDate = objEmpSchedule.getOut20();
                    //System.out.println("status1Bean20  "+status1);
                    break;

                case 21:
                    status1 = objEmpSchedule.getStatus21();
                    InDate = objEmpSchedule.getIn21();
                    OutDate = objEmpSchedule.getOut21();
                    //System.out.println("status1Bean21  "+status1);
                    break;

                case 22:
                    status1 = objEmpSchedule.getStatus22();
                    InDate = objEmpSchedule.getIn22();
                    OutDate = objEmpSchedule.getOut22();
                    //System.out.println("status1Bean22  "+status1);
                    break;

                case 23:
                    status1 = objEmpSchedule.getStatus23();
                    InDate = objEmpSchedule.getIn23();
                    OutDate = objEmpSchedule.getOut23();
                    //System.out.println("status1Bean23  "+status1);
                    break;

                case 24:
                    status1 = objEmpSchedule.getStatus24();
                    InDate = objEmpSchedule.getIn24();
                    OutDate = objEmpSchedule.getOut24();
                    // System.out.println("status1Bean24  "+status1);
                    break;

                case 25:
                    status1 = objEmpSchedule.getStatus25();
                    InDate = objEmpSchedule.getIn25();
                    OutDate = objEmpSchedule.getOut25();
                    //System.out.println("status1Bean25  "+status1);
                    break;

                case 26:
                    status1 = objEmpSchedule.getStatus26();
                    InDate = objEmpSchedule.getIn26();
                    OutDate = objEmpSchedule.getOut26();
                    // System.out.println("status1Bean  "+status1);
                    break;

                case 27:
                    status1 = objEmpSchedule.getStatus27();
                    InDate = objEmpSchedule.getIn27();
                    OutDate = objEmpSchedule.getOut27();
                    // System.out.println("status1Bean27  "+status1);
                    break;

                case 28:
                    status1 = objEmpSchedule.getStatus28();
                    InDate = objEmpSchedule.getIn28();
                    OutDate = objEmpSchedule.getOut28();
                    // System.out.println("status1Bean28  "+status1);
                    break;

                case 29:
                    status1 = objEmpSchedule.getStatus29();
                    InDate = objEmpSchedule.getIn29();
                    OutDate = objEmpSchedule.getOut29();
                    // System.out.println("status1Bean29  "+status1);
                    break;

                case 30:
                    status1 = objEmpSchedule.getStatus30();
                    InDate = objEmpSchedule.getIn30();
                    OutDate = objEmpSchedule.getOut30();
                    //System.out.println("status1Bean30  "+status1);
                    break;

                case 31:
                    status1 = objEmpSchedule.getStatus31();
                    InDate = objEmpSchedule.getIn31();
                    OutDate = objEmpSchedule.getOut31();
                    // System.out.println("status1Bean 31 "+status1);
                    break;
            }

            if ((status1 == STATUS_PRESENCE_OK) && (InDate == null) && (OutDate == null)) {
                status1 = STATUS_PRESENCE_NOT_PROCESSED;///prosessnyA
            }

            try {
                //objScheduleSymbol = PstScheduleSymbol.fetchExc(scheduleSymbolOid);
            } catch (Exception e) {
                System.out.println("Exc when fetch Schedule Symbol : " + e.toString());
            }
        }
        return status1;
    }

    //method untuk mencari reason pertama
    //khusus untuk schedule yang dinamis
    public static int getReason1(int startDate, long employeeId, Date periodStartDate) {
        int reason1 = 0;
        long periodId = PstPeriod.getPeriodIdBySelectedDate(periodStartDate);
        // System.out.println("startDateBean  "+startDate);
        String whereClause = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                + " = " + periodId
                + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                + " = " + employeeId;
        Vector vectEmpSchedule = PstEmpSchedule.list(0, 0, whereClause, "");
        if (vectEmpSchedule != null && vectEmpSchedule.size() > 0) {
            int maxEmpSchedule = vectEmpSchedule.size();
            EmpSchedule objEmpSchedule = new EmpSchedule();
            for (int i = 0; i < maxEmpSchedule; i++) {
                objEmpSchedule = (EmpSchedule) vectEmpSchedule.get(i);
                break;
            }

            switch (startDate) {
                case 1:
                    reason1 = objEmpSchedule.getReason1();
                    //System.out.println("status1Bean1  "+status1);
                    break;

                case 2:
                    reason1 = objEmpSchedule.getReason2();
                    // System.out.println("status1Bean2  "+status1);
                    break;

                case 3:
                    reason1 = objEmpSchedule.getReason3();
                    // System.out.println("status1Bean3  "+status1);
                    break;

                case 4:
                    reason1 = objEmpSchedule.getReason4();
                    //System.out.println("status1Bean4  "+status1);
                    break;

                case 5:
                    reason1 = objEmpSchedule.getReason5();
                    //System.out.println("status1Bean 5 "+status1);
                    break;

                case 6:
                    reason1 = objEmpSchedule.getReason6();
                    //System.out.println("status1Bean6  "+status1);
                    break;

                case 7:
                    reason1 = objEmpSchedule.getReason7();
                    //System.out.println("status1Bean7  "+status1);
                    break;

                case 8:
                    reason1 = objEmpSchedule.getReason8();
                    //System.out.println("status1Bean8  "+status1);
                    break;

                case 9:
                    reason1 = objEmpSchedule.getReason9();
                    // System.out.println("status1Bean9  "+status1);
                    break;

                case 10:
                    reason1 = objEmpSchedule.getReason10();
                    //System.out.println("status1Bean 10 "+status1);
                    break;

                case 11:
                    reason1 = objEmpSchedule.getReason11();
                    // System.out.println("status1Bean11  "+status1);
                    break;

                case 12:
                    reason1 = objEmpSchedule.getReason12();
                    //System.out.println("status1Bean12  "+status1);
                    break;

                case 13:
                    reason1 = objEmpSchedule.getReason13();
                    //System.out.println("status1Bean13  "+status1);
                    break;

                case 14:
                    reason1 = objEmpSchedule.getReason14();
                    // System.out.println("status1Bean14  "+status1);
                    break;

                case 15:
                    reason1 = objEmpSchedule.getReason15();
                    // System.out.println("status1Bean15  "+status1);
                    break;

                case 16:
                    reason1 = objEmpSchedule.getReason16();
                    //System.out.println("status1Bean16  "+status1);

                    break;

                case 17:
                    reason1 = objEmpSchedule.getReason17();
                    //System.out.println("status1Bean17  "+status1);
                    break;

                case 18:
                    reason1 = objEmpSchedule.getReason18();
                    //System.out.println("status1Bean18  "+status1);
                    break;

                case 19:
                    reason1 = objEmpSchedule.getReason19();
                    //System.out.println("status1Bean19  "+status1);
                    break;

                case 20:
                    reason1 = objEmpSchedule.getReason20();
                    //System.out.println("status1Bean20  "+status1);
                    break;

                case 21:
                    reason1 = objEmpSchedule.getReason21();
                    //System.out.println("status1Bean21  "+status1);
                    break;

                case 22:
                    reason1 = objEmpSchedule.getReason22();
                    //System.out.println("status1Bean22  "+status1);
                    break;

                case 23:
                    reason1 = objEmpSchedule.getReason23();
                    // System.out.println("status1Bean23  "+status1);
                    break;

                case 24:
                    reason1 = objEmpSchedule.getReason24();
                    // System.out.println("status1Bean24  "+status1);
                    break;

                case 25:
                    reason1 = objEmpSchedule.getReason25();
                    //System.out.println("status1Bean25  "+status1);
                    break;

                case 26:
                    reason1 = objEmpSchedule.getReason26();
                    // System.out.println("status1Bean  "+status1);
                    break;

                case 27:
                    reason1 = objEmpSchedule.getReason27();
                    // System.out.println("status1Bean27  "+status1);
                    break;

                case 28:
                    reason1 = objEmpSchedule.getReason28();
                    // System.out.println("status1Bean28  "+status1);
                    break;

                case 29:
                    reason1 = objEmpSchedule.getReason29();
                    // System.out.println("status1Bean29  "+status1);
                    break;

                case 30:
                    reason1 = objEmpSchedule.getReason30();
                    //System.out.println("status1Bean30  "+status1);
                    break;

                case 31:
                    reason1 = objEmpSchedule.getReason31();
                    // System.out.println("status1Bean 31 "+status1);
                    break;
            }
            try {
                //objScheduleSymbol = PstScheduleSymbol.fetchExc(scheduleSymbolOid);
            } catch (Exception e) {
                System.out.println("Exc when fetch Schedule Symbol : " + e.toString());
            }
        }
        return reason1;

    }

    //method khusus untuk perubahan period
    public static ScheduleSymbol getStartDate(int startDate) {
        ScheduleSymbol objScheduleSymbol = new ScheduleSymbol();

        /*long periodId = PstPeriod.getPeriodeIdBetween(selectedDate);
         String whereClause = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + 
         " = " + periodId + 
         " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + 
         " = " + employeeId;*/
        Vector vectEmpSchedule = PstEmpSchedule.list(0, 0, "", "");
        if (vectEmpSchedule != null && vectEmpSchedule.size() > 0) {
            int maxEmpSchedule = vectEmpSchedule.size();
            EmpSchedule objEmpSchedule = new EmpSchedule();
            for (int i = 0; i < maxEmpSchedule; i++) {
                objEmpSchedule = (EmpSchedule) vectEmpSchedule.get(i);
                break;
            }

            long scheduleSymbolOid = 0;
            if (objEmpSchedule.getOID() != 0) {
                //int idxSelectedDate = selectedDate.getDate();
                switch (startDate) {
                    case 1:
                        scheduleSymbolOid = objEmpSchedule.getD1();
                        break;

                    case 2:
                        scheduleSymbolOid = objEmpSchedule.getD2();
                        break;

                    case 3:
                        scheduleSymbolOid = objEmpSchedule.getD3();
                        break;

                    case 4:
                        scheduleSymbolOid = objEmpSchedule.getD4();
                        break;

                    case 5:
                        scheduleSymbolOid = objEmpSchedule.getD5();
                        break;

                    case 6:
                        scheduleSymbolOid = objEmpSchedule.getD6();
                        break;

                    case 7:
                        scheduleSymbolOid = objEmpSchedule.getD7();
                        break;

                    case 8:
                        scheduleSymbolOid = objEmpSchedule.getD8();
                        break;

                    case 9:
                        scheduleSymbolOid = objEmpSchedule.getD9();
                        break;

                    case 10:
                        scheduleSymbolOid = objEmpSchedule.getD10();
                        break;

                    case 11:
                        scheduleSymbolOid = objEmpSchedule.getD11();
                        break;

                    case 12:
                        scheduleSymbolOid = objEmpSchedule.getD12();
                        break;

                    case 13:
                        scheduleSymbolOid = objEmpSchedule.getD13();
                        break;

                    case 14:
                        scheduleSymbolOid = objEmpSchedule.getD14();
                        break;

                    case 15:
                        scheduleSymbolOid = objEmpSchedule.getD15();
                        break;

                    case 16:
                        scheduleSymbolOid = objEmpSchedule.getD16();
                        break;

                    case 17:
                        scheduleSymbolOid = objEmpSchedule.getD17();
                        break;

                    case 18:
                        scheduleSymbolOid = objEmpSchedule.getD18();
                        break;

                    case 19:
                        scheduleSymbolOid = objEmpSchedule.getD19();
                        break;

                    case 20:
                        scheduleSymbolOid = objEmpSchedule.getD20();
                        break;

                    case 21:
                        scheduleSymbolOid = objEmpSchedule.getD21();
                        break;

                    case 22:
                        scheduleSymbolOid = objEmpSchedule.getD22();
                        break;

                    case 23:
                        scheduleSymbolOid = objEmpSchedule.getD23();
                        break;

                    case 24:
                        scheduleSymbolOid = objEmpSchedule.getD24();
                        break;

                    case 25:
                        scheduleSymbolOid = objEmpSchedule.getD25();
                        break;

                    case 26:
                        scheduleSymbolOid = objEmpSchedule.getD26();
                        break;

                    case 27:
                        scheduleSymbolOid = objEmpSchedule.getD27();
                        break;

                    case 28:
                        scheduleSymbolOid = objEmpSchedule.getD28();
                        break;

                    case 29:
                        scheduleSymbolOid = objEmpSchedule.getD29();
                        break;

                    case 30:
                        scheduleSymbolOid = objEmpSchedule.getD30();
                        break;

                    case 31:
                        scheduleSymbolOid = objEmpSchedule.getD31();
                        break;
                }
            }


            try {
                objScheduleSymbol = PstScheduleSymbol.fetchExc(scheduleSymbolOid);
            } catch (Exception e) {
                System.out.println("Exc when fetch Schedule Symbol : " + e.toString());
            }
        }

        return objScheduleSymbol;
    }

    /**
     * Keterangan: untuk update schedule satu satu berdasarkan tanggal Create by
     * satrya 2013-0311
     *
     * @param periodId
     * @param empSchId
     * @param empId
     * @param dtPeriod
     */
    public static int updateSchedule(long periodId, long empId, Date dtPeriod, long oidPublicHoliday) {
        DBResultSet dbrs = null;
        int upd = 0;
        try {
            String sql = "";
            int idxFieldName = getIdxNameOfTableBySelectedDate(dtPeriod);
            sql = " UPDATE " + TBL_HR_EMP_SCHEDULE + " SET " + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1] + " = " + oidPublicHoliday;
            sql = sql + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + "=" + empId
                    + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + "=" + periodId;
            //+ " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID] + "=" + empSchId;

            upd = DBHandler.execUpdate(sql);


        } catch (Exception e) {
            System.err.println("\tupdateCompValue error : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            //return result;
            return upd;
        }
    }

    /*
     *  This method used to update presence
     *  Created By Yunny
     */
    public static void updatePresence(long periodId, Date date, long empId, int status) {
        DBResultSet dbrs = null;
        //boolean result = false;
        //String barcode = (barcodeNumber.equals(null)) ? "null" : barcodeNumber;
        String StrDate = (date.getYear() + 1900) + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
        try {
            String sql = "";

            sql = " UPDATE " + TBL_HR_EMP_SCHEDULE + " SET ";
            if (date.getDate() == 1) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT1] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN1] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 2) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 3) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT3] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN3] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 4) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT4] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN4] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 5) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT5] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN5] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 6) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT6] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN6] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 7) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT7] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN7] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 8) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT8] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN8] + "='" + StrDate + "'";
                }
            }

            if (date.getDate() == 9) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT9] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN9] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 10) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT10] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN10] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 11) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT11] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN11] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 12) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT12] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN12] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 13) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT13] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN13] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 14) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT14] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN14] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 15) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT15] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN15] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 16) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT16] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN16] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 17) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT17] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN17] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 18) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT18] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN18] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 19) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT19] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN19] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 20) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT20] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN20] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 21) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT21] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN21] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 22) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT22] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN22] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 23) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT23] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN23] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 24) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT24] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN24] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 25) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT25] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN25] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 26) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT26] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN26] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 27) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT27] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN27] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 28) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT28] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN28] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 29) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT29] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN29] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 30) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT30] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN30] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 31) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT31] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN31] + "='" + StrDate + "'";
                }
            }


            sql = sql + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + "=" + empId
                    + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + "=" + periodId;

            //dbrs = DBHandler.execQueryResult(sql);
            status = DBHandler.execUpdate(sql);
            //ResultSet rs = dbrs.getResultSet();
            System.out.println("\tupdatePresence : " + sql);
            //while(rs.next()) { result = true; }

            //rs.close();
        } catch (Exception e) {
            System.err.println("\tupdateCompValue error : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            //return result;
        }
    }

    /*
     *  This method used to update presence
     *  Created By Yunny
     */
    public static void updatePresence1(long periodId, Date date, Date dateEmpSch, long empId, int status, String symbol) {
        DBResultSet dbrs = null;
        //boolean result = false;
        //String barcode = (barcodeNumber.equals(null)) ? "null" : barcodeNumber;
        int scheduleCategory = PstScheduleSymbol.getCategoryType(symbol);
        String StrDate = "";
        if (scheduleCategory == PstScheduleCategory.CATEGORY_ACCROSS_DAY) {
            /* if(status==Presence.STATUS_IN){*/
            StrDate = (dateEmpSch.getYear() + 1900) + "-" + (dateEmpSch.getMonth() + 1) + "-" + dateEmpSch.getDate() + " " + dateEmpSch.getHours() + ":" + dateEmpSch.getMinutes() + ":" + dateEmpSch.getSeconds();
            /*}
             else{
             StrDate = (dateEmpSch.getYear()+1900)+"-"+(dateEmpSch.getMonth()+1)+"-"+(dateEmpSch.getDate()+1)+" "+dateEmpSch.getHours()+":"+dateEmpSch.getMinutes()+":"+dateEmpSch.getSeconds(); 
             }*/
        } else {
            StrDate = (dateEmpSch.getYear() + 1900) + "-" + (dateEmpSch.getMonth() + 1) + "-" + dateEmpSch.getDate() + " " + dateEmpSch.getHours() + ":" + dateEmpSch.getMinutes() + ":" + dateEmpSch.getSeconds();
        }
        try {
            String sql = "";

            sql = " UPDATE " + TBL_HR_EMP_SCHEDULE + " SET ";
            if (date.getDate() == 1) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN1] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT1] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 2) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN2] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT2] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 3) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN3] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT3] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 4) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN4] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT4] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 5) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN5] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT5] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 6) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN6] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT6] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 7) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN7] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT7] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 8) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN8] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT8] + "='" + StrDate + "'";
                }
            }

            if (date.getDate() == 9) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN9] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT9] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 10) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN10] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT10] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 11) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN11] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT11] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 12) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN12] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT12] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 13) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN13] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT13] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 14) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN14] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT14] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 15) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN15] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT15] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 16) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN16] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT16] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 17) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN17] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT17] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 18) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN18] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT18] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 19) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN19] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT19] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 20) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN20] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT20] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 21) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN21] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT21] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 22) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN22] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT22] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 23) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN23] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT23] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 24) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN24] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT24] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 25) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN25] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT25] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 26) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN26] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT26] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 27) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN27] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT27] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 28) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN28] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT28] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 29) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN29] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT29] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 30) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN30] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT30] + "='" + StrDate + "'";
                }
            }
            if (date.getDate() == 31) {
                if (status == Presence.STATUS_IN) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN31] + "='" + StrDate + "'";
                } else if (status == Presence.STATUS_OUT) {
                    sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT31] + "='" + StrDate + "'";
                }
            }


            sql = sql + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + "=" + empId
                    + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + "=" + periodId;

            //dbrs = DBHandler.execQueryResult(sql);
            status = DBHandler.execUpdate(sql);
            //ResultSet rs = dbrs.getResultSet();
            System.out.println("\tupdatePresence : " + sql);
            //while(rs.next()) { result = true; }

            //rs.close();
        } catch (Exception e) {
            System.err.println("\tupdateCompValue error : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            //return result;
        }
    }

    public static int getCategorySchedule(int d) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID] + ") FROM " + TBL_HR_EMP_SCHEDULE;


            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                count = rs.getInt(1);
            }

            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    public static int getStatusPresence(long employeeId, long periodId, int dayOfMonth, int schStatus, Date dtPeriod) {
        //update by satrya 2013-02-18
        //public static int getStatusPresence(long employeeId, long periodId, int dayOfMonth, int schStatus) {
        DBResultSet dbrs = null;
        int count = 0;
        try {
            // String sql = "SELECT " 
                    /*+ PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS3]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS4]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS5]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS6]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS7]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS8]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS9]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS10]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS11]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS12]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS13]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS14]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS15]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS16]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS17]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS18]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS19]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS20]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS21]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS22]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS23]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS24]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS25]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS26]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS27]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS28]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS29]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS30]
             + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS31] */
            if (dtPeriod != null) {
                String sql = "SELECT ";
                int idxFieldName = getIdxNameOfTableBySelectedDate(dtPeriod);
                int x = 0;
                for (int i = 0; i <= dayOfMonth; i++) {
                    int idxFieldNameX = idxFieldName + i;
                    if (idxFieldNameX >= 32) {
                        idxFieldNameX = x + 1;
                        x = x + 1;
                    }
                    sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldNameX - 1] + ", ";
                }
                sql = sql.substring(0, sql.length() - 2);


                sql += " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                        + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " = " + employeeId;

                //System.out.println("sql getStatusPresence....................."+sql);
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();


//            while (rs.next()) {
//                EmpSchedule empSchedule = new EmpSchedule();
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS3]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS4]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS5]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS6]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS7]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS8]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS9]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS10]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS11]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS12]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS13]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS14]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS15]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS16]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS17]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS18]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS19]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS20]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS21]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS22]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS23]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS24]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS25]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS26]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS27]) == schStatus) {
//                    count++;
//                }
//                if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS28]) == schStatus) {
//                    count++;
//                }
//                if (dayOfMonth > 28) {
//                    if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS29]) == schStatus) {
//                        count++;
//                    }
//
//                    if (dayOfMonth > 29) {
//                        if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS30]) == schStatus) {
//                            count++;
//                        }
//                        if (dayOfMonth > 30) {
//                            if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS31]) == schStatus) {
//                                count++;
//                            }
//                        }
//                    }
//                }
//
//            }
//
//            rs.close();
//            return count;
//        } catch (Exception e) {
//            return 0;
//        } finally {
//            DBResultSet.close(dbrs);
//        }
                while (rs.next()) {

                    int status = 0;
                    x = 0;
                    for (int i = 0; i <= dayOfMonth; i++) {
                        int idxFieldNameX = idxFieldName + i;
                        if (idxFieldNameX >= 32) {
                            idxFieldNameX = x + 1;
                            x = x + 1;
                        }
                        status = rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldNameX - 1]);
                        //PstEmpSchedule.STATUS_PRESENCE_ABSENCE = 2
                        //mencari status Absence
                        if ((status == schStatus)) {
                            count++;
                        }
                    }
                }
                rs.close();
            }
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }

    }

    /**
     * create by satrya 2013-02-20 /n Keterangan: mencari jumlah count hari
     * libbur
     *
     * @param employeeId
     * @param periodId
     * @param dayOfMonth
     * @param schDayOff
     * @param dtPeriod
     * @return
     */
    public static int getStatusDayOff(long employeeId, long periodId, int dayOfMonth, Vector schDayOff, Date dtPeriod) {
        DBResultSet dbrs = null;
        int count = 0;
        try {

            if (dtPeriod != null) {
                String sql = "SELECT ";
                int idxFieldName = getIdxNameOfTableBySelectedDate(dtPeriod);
                int x = 0;
                for (int i = 0; i <= dayOfMonth; i++) {
                    int idxFieldNameX = idxFieldName + i;
                    if (idxFieldNameX >= 32) {
                        idxFieldNameX = x + 1;
                        x = x + 1;
                    }
                    sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldNameX - 1] + ", ";
                }
                sql = sql.substring(0, sql.length() - 2);


                sql += " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                        + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " = " + employeeId;

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {

                    long schOffId = 0;
                    x = 0;
                    for (int i = 0; i <= dayOfMonth; i++) {
                        int idxFieldNameX = idxFieldName + i;
                        if (idxFieldNameX >= 32) {
                            idxFieldNameX = x + 1;
                            x = x + 1;
                        }
                        schOffId = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldNameX - 1]);

                        for (int ix = 0; ix < schDayOff.size(); ix++) {
                            long id = -1;//agar jika di pilih 0 nnti salah
                            if (schDayOff.get(ix) != null) {
                                id = ((Long) schDayOff.get(ix)).longValue();
                            }
                            if ((schOffId == id)) {
                                count++;
                            }

                        }
                        /* if ((schOffId == schDayOff)) {
                         count++;
                         }*/
                    }
                }
                rs.close();
            }
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }

    }

    /**
     * Mencari tanggal employee OFF
     *
     * @param employeeId
     * @param periodId
     * @param dayOfMonth
     * @param schDayOff
     * @param dtPeriod
     * @return null jika salah
     */
    public static Vector getDateOfScheduleSymbol(long employeeId, long periodId, int dayOfMonth, Vector schDayOff, Date dtPeriod) {
        DBResultSet dbrs = null;
        Vector datesMatch = new Vector();
        try {

            if (dtPeriod != null) {
                String sql = "SELECT ";
                int idxFieldName = getIdxNameOfTableBySelectedDate(dtPeriod);
                int x = 0;
                for (int i = 0; i <= dayOfMonth; i++) {
                    int idxFieldNameX = idxFieldName + i;
                    if (idxFieldNameX >= 32) {
                        idxFieldNameX = x + 1;
                        x = x + 1;
                    }
                    sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldNameX - 1] + ", ";
                }
                sql = sql.substring(0, sql.length() - 2);


                sql += " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                        + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " = " + employeeId;

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {

                    long schOffId = 0;
                    x = 0;
                    int idx = 0;
                    for (int i = 0; i <= dayOfMonth; i++) {

                        int idxFieldNameX = idxFieldName + i;
                        if (idxFieldNameX >= 32) {
                            idxFieldNameX = x + 1;
                            x = x + 1;
                        }
                        schOffId = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldNameX - 1]);
                        //tujuannya yaitu merubah D1 menjadi 1
                        String sIdx = "" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldNameX - 1].substring(1);
                        if (sIdx != null && sIdx.length() > 0) {
                            idx = Integer.parseInt(sIdx);
                        }
                        for (int ix = 0; ix < schDayOff.size(); ix++) {
                            long id = -1;//agar jika di pilih 0 nnti salah
                            if (schDayOff.get(ix) != null) {
                                id = ((Long) schDayOff.get(ix)).longValue();
                            }
                            if ((schOffId == id)) {
                                Date dt = new Date(dtPeriod.getTime());
                                if (idx < dtPeriod.getDate()) {  // date probe less than start date then , the month will be after the month on start date of period
                                    dt.setDate(idx);
                                    dt.setMonth(dt.getMonth() + 1);
                                } else {
                                    dt.setDate(idx);
                                }
                                datesMatch.add(dt);
                            }
                        }

                        /* if ((schOffId == schDayOff)) {
                         count++;
                         }*/
                    }
                }
                rs.close();
            }
            return datesMatch;
        } catch (Exception e) {
            return null;
        } finally {
            DBResultSet.close(dbrs);
        }

    }

    /**
     * Keterangan : ngecek DC
     *
     * @param employeeId
     * @param periodId
     * @param dtPeriod
     * @param reasonDC
     * @return
     */
    public static boolean getchkDC(long employeeId, Date dtPeriod, int reasonDC) {

        DBResultSet dbrs = null;
        boolean chkDC = true;
        long periodId = PstPeriod.getPeriodIdBySelectedDate(dtPeriod);
        try {

            if (dtPeriod != null) {
                String sql = "SELECT " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID]
                        + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_SCHEDULE_TYPE] + " , ";
                int idxFieldName = getIdxNameOfTableBySelectedDate(dtPeriod);

                sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1] + ", "
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1] + ", "
                        + PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldName - 1] + ", ";

                sql = sql.substring(0, sql.length() - 2);


                sql += " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                        + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " = " + employeeId;

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {
                    int reason = rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldName - 1]);
                    if (reasonDC != 0 && reason == reasonDC) {
                        chkDC = false;
                    }
                }
                rs.close();
            }
            return chkDC;
        } catch (Exception e) {
            return chkDC;
        } finally {
            DBResultSet.close(dbrs);
        }

    }

    /**
     * create byv satrya 2013-02-19 keterangam untung mengambil empSchedule
     *
     * @param employeeId
     * @param periodId
     * @param dayOfMonth
     * @param dtPeriod
     * @return
     */
    public static EmpSchedule getEmpSchedule(long employeeId, long periodId, int dayOfMonth, Date dtPeriod) {

        DBResultSet dbrs = null;
        EmpSchedule empSchedule = new EmpSchedule();
        try {

            if (dtPeriod != null) {
                String sql = "SELECT " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID]
                        + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_SCHEDULE_TYPE] + " , ";
                int idxFieldName = getIdxNameOfTableBySelectedDate(dtPeriod);
                int x = 0;
                for (int i = 0; i <= dayOfMonth; i++) {
                    int idxFieldNameX = idxFieldName + i;
                    if (idxFieldNameX >= 32) {
                        idxFieldNameX = x + 1;
                        x = x + 1;
                    }
                    sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldNameX - 1] + ", "
                            + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldNameX - 1] + ", "
                            + PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldNameX - 1] + ", ";
                    //  + PstEmpSchedule.fieldNames[OFFSET_INDEX_NOTE + idxFieldNameX - 1] + ", "
                    // + PstEmpSchedule.fieldNames[OFFSET_INDEX_IN + idxFieldNameX - 1] + ", "
                    //+ PstEmpSchedule.fieldNames[OFFSET_INDEX_OUT + idxFieldNameX - 1] + ", ";
                }
                sql = sql.substring(0, sql.length() - 2);


                sql += " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                        + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " = " + employeeId;

                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();

                while (rs.next()) {

                    long schId = 0;
                    int reason = 0;
                    int status = 0;
                    x = 0;
                    int idx = 0;
                    for (int i = 0; i <= dayOfMonth; i++) {
                        int idxFieldNameX = idxFieldName + i;
                        if (idxFieldNameX >= 32) {
                            idxFieldNameX = x + 1;
                            x = x + 1;
                        }
                        //untuk merubah D1 menjadi 1
                        String sIdx = "" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldNameX - 1].substring(1);
                        if (sIdx != null && sIdx.length() > 0) {
                            idx = Integer.parseInt(sIdx);
                        }
                        schId = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldNameX - 1]);
                        reason = rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldNameX - 1]);
                        status = rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldNameX - 1]);
                        empSchedule.setD(idx, schId);
                        empSchedule.setReason(idx, reason);
                        empSchedule.setStatus(idx, status);
                    }
                    empSchedule.setOID(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID]));
                    empSchedule.setPeriodId(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]));
                    empSchedule.setEmployeeId(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]));
                    empSchedule.setScheduleType(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_SCHEDULE_TYPE]));

                }
                rs.close();
            }
            return empSchedule;
        } catch (Exception e) {
            return empSchedule = new EmpSchedule();
        } finally {
            DBResultSet.close(dbrs);
        }

    }

    public static int getStatusPresenceWoLeave(long employeeId, long periodId, int dayOfMonth, int schStatus) {

        DBResultSet dbrs = null;
        try {
            String sql = "SELECT " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS3]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS4]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS5]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS6]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS7]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS8]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS9]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS10]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS11]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS12]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS13]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS14]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS15]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS16]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS17]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS18]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS19]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS20]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS21]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS22]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS23]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS24]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS25]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS26]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS27]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS28]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS29]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS30]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS31]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                    + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

            //System.out.println("sql getStatusPresence....................."+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                Vector listLeave = null;
                Period period = null;
                try {
                    period = PstPeriod.fetchExc(periodId);
                    if (period != null) {
                        listLeave = PstLeaveApplication.listDetailLeave(employeeId, period.getStartDate(), period.getEndDate());
                    }
                } catch (Exception exc1) {
                    System.out.println(exc1);
                }

                EmpSchedule empSchedule = new EmpSchedule();
                for (int idx = 0; idx < 31; idx++) {
                    if (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1 + idx]) == schStatus) {
                        // check cuti
                        if (!(period != null && listLeave != null && listLeave.size() > 0
                                && PstLeaveApplication.checkDateInLeave(period.getObjDateByIndex(1 + idx), listLeave))) {
                            count++;
                        }
                    }
                }
            }

            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * Get number of presence with time in or out
     *
     * @param employeeId
     * @param periodId
     * @param dayOfMonth
     * @param schStatus
     * @return
     */
    public static int getStatusPresenceWithTimeInOrOut(long employeeId, long periodId, int dayOfMonth, int schStatus) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT ";


            for (int i = 0; i < dayOfMonth; i++) {
                sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1 + i] + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN1 + i] + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT1 + i] + ", ";
                ;
            }
            sql = sql.substring(0, sql.length() - 2);


            sql = sql
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                    + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

            //System.out.println("sql getStatusPresence....................."+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                EmpSchedule empSchedule = new EmpSchedule();
                for (int i = 0; i < dayOfMonth; i++) {
                    if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1 + i]) == schStatus)
                            && (rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_IN1 + i]) != null
                            || rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_OUT1 + i]) != null)) {
                        count++;
                    }
                }
            }
            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * Keterangan: untuk mencari attendace yg ada summary attd create by satrya
     * 2014-01-31
     *
     * @param fromDate
     * @param toDate
     * @param employee_id
     * @param vctSchIDOff
     * @param payrollCalculatorConfig
     * @return
     */
    public static Vector getListAttendaceNoReason(I_Atendance attdConfig, I_Leave leaveConfig, Date fromDate, Date toDate, String employee_id, Hashtable vctSchIDOff, Hashtable hashSchOff, int iPropInsentifLevel, HolidaysTable holidaysTable, Hashtable hashPositionLevel, I_PayrollCalculator payrollCalculatorConfig, Hashtable hashTblPeriod, HashTblOvertimeDetail hashTblOvertimeDetail) {
        //String untukTestSaja="";
        if (fromDate == null || toDate == null || employee_id.length() == 0 || payrollCalculatorConfig == null || attdConfig == null || leaveConfig == null) {
            return new Vector();
        }
        
        //update by satrya 2014-03-10
        if (payrollCalculatorConfig != null) {
            payrollCalculatorConfig.loadEmpCategoryInsentif();
        }
        String whereClausePresence = " (1=1) ";
        if (fromDate != null && toDate != null) {
            //update by satrya 2012-10-15
            if (fromDate.getTime() > toDate.getTime()) {
                Date tempFromDate = fromDate;
                Date tempToDate = toDate;
                fromDate = tempToDate;
                toDate = tempFromDate;
            }

            whereClausePresence = whereClausePresence + " AND PS." + PstPresence.fieldNames[PstPresence.FLD_PRESENCE_DATETIME] + " BETWEEN \"" + Formater.formatDate(fromDate, "yyyy-MM-dd HH:mm:00") + "\" AND \"" + Formater.formatDate(toDate, "yyyy-MM-dd HH:mm:59") + "\"";

            whereClausePresence = whereClausePresence + "  AND (( HE." + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED]
                    + " = " + PstEmployee.YES_RESIGN + " AND " + "HE. " + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED_DATE]
                    + " BETWEEN \"" + Formater.formatDate(fromDate, "yyyy-MM-dd  00:00:00") + "\"" + " AND " + "\"" + Formater.formatDate(toDate, "yyyy-MM-dd  23:59:59") + "\""
                    + " ) OR (HE." + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED]
                    + " = " + PstEmployee.NO_RESIGN + "))";
        }
        if (employee_id != null && employee_id.length() > 0) {
            whereClausePresence = whereClausePresence + " AND HE." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID] + " IN(" + employee_id + ")";
        }

        String orderPresence = PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_NUM] + "," + PstPresence.fieldNames[PstPresence.FLD_PRESENCE_DATETIME] + "," + PstPresence.fieldNames[PstPresence.FLD_SCHEDULE_DATETIME];
        Vector listPresencePersonalInOutOk = PstPresence.listPresenceForSummaryAttd(orderPresence, whereClausePresence + " AND PS." + PstPresence.fieldNames[PstPresence.FLD_STATUS] + " NOT IN(" + Presence.STATUS_IN + "," + Presence.STATUS_OUT + "," + Presence.STATUS_INVALID + ")", null);
        Hashtable hasTblSchedule = PstScheduleSymbol.getHashTlScheduleAll();
        Hashtable breakTimeDuration = PstScheduleSymbol.getBreakTimeDuration();
        //Vector listReason = PstReason.list(0, 0, PstReason.fieldNames[PstReason.FLD_FLAG_IN_PAY_INPUT] + "=" + PstReason.SHOW_REASON_IN_PAY_INPUT_YES, PstReason.fieldNames[PstReason.FLD_REASON] + " ASC ");
        //Hashtable hashReasonNoReason = new Hashtable();
//        try {
//            if (listReason != null && listReason.size() > 0) {
//                for (int idxRea = 0; idxRea < listReason.size(); idxRea++) {
//                    Reason reason = (Reason) listReason.get(idxRea);
//                    hashReasonNoReason.put("" + reason.getNo(), reason);
//                }
//            }
//            //reason = PstReason.fetchExc(oidReason);
//
//        } catch (Exception exception) {
//            System.out.println("error getReasonId" + exception);
//        }
        DBResultSet dbrs = null;
        Vector list = new Vector();
        try {
            Vector listPeriod = PstPeriod.getListStartEndDatePeriod(fromDate, toDate);
            String sql = "SELECT HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , HEP."
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " , "
                    + " EMP." + PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID] + " ,"
                    + " EMP." + PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID] + " , "
                    //update by satrya 2014-02-10
                    + "EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMP_CATEGORY_ID] + " , ";
            String periodId = "";
            boolean cekMaxMonth = false;//inisilaisai awal pengambilan maxMonth
            Hashtable cekIdxSama = new Hashtable();
            if (listPeriod != null && listPeriod.size() > 0) {
                //update by satrya 2014-01-22
                Hashtable hashCekTglSama = new Hashtable();

                for (int idxPeriod = 0; idxPeriod < listPeriod.size(); idxPeriod++) {
                    Period period = (Period) listPeriod.get(idxPeriod);
                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);

                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();

                    if (listPeriod.size() == 1) {

                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//+ 86400000);//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = (Date) fromDate.clone();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }
                    int idxFieldName = cloneFromDate.getDate();

                    // update by satrya 2014-01-22 for(int idxDt=0; idxDt<=itDate;idxDt++){
                    // int idxFieldName = fromDate.getDate()+idxDt;
                    int idxDt = 0;
                    do {
                        if (idxFieldName > maxMonth) {
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }

                        if (!cekIdxSama.containsKey(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1])) {
                            sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1] + ", "
                                    + " IF(((p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY) < p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + "),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " -  INTERVAL(DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY)) AS SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1] + " , ";


                            cekIdxSama.put(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1], PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                        }
                        idxFieldName = idxFieldName + 1;
                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);
                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start

                }
                periodId = periodId.substring(0, periodId.length() - 2);
                sql = sql.substring(0, sql.length() - 2);
                sql = sql
                        + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS HEP "
                        + " INNER JOIN " + PstPeriod.TBL_HR_PERIOD + " AS p ON p." + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " INNER JOIN " + PstEmployee.TBL_HR_EMPLOYEE + " AS EMP ON EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " WHERE HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " IN ( " + periodId + ")"
                        + " AND HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " IN ( " + employee_id + ")";

                sql = sql + " ORDER BY HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " ASC ";
                dbrs = DBHandler.execQueryResult(sql);
                
                ResultSet rs = dbrs.getResultSet();
                long empId = 0;
                PayInputPresence payInputPresence = new PayInputPresence();
                cekMaxMonth = false;
                Period period = new Period();
                long currPeriodId = 0;
                Hashtable hashPeriod = new Hashtable();
                //int countSts=0;

                int dayOffSchedule = 0;
                int totalInsentif = 0;

                int presenceOnTime = 0;
                float timePresenceOnTime = 0;
                
                long timeWorkHour=0;

                int totalLate = 0;
                float timeLate = 0;

                int totalEarlyHome = 0;
                float timeEarlyHome = 0;

                int totalLateEarly = 0;
                float timeLateEarly = 0;

                double totalReason = 0;//ini bersifat dinamis
                double timeReason = 0;//ini bersifat dinamis

                int totalAbs = 0;
                float timeAbs = 0;

                int totalWorkingDays = 0;
                
                int totalOnlyIn=0;
                //float timeOnlyIn=0;
                int totalOnlyOut=0;
                //float timeOnlyOut=0;
                //Hashtable hashReasonIdx = new Hashtable();
                //Hashtable hashReasonTime = new Hashtable();
                //hanya untuk cek
                 long strMl = System.currentTimeMillis();
                 Calendar calendar = Calendar.getInstance();
                while (rs.next()) {
                    currPeriodId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]);
                    if (period.getOID() != currPeriodId) {
                        period = (Period) hashPeriod.get("" + currPeriodId);
                        if (period == null) {
                            if (currPeriodId != 0 && (hashTblPeriod != null && hashTblPeriod.get(currPeriodId) != null)) {
                                period = (Period) hashTblPeriod.get(currPeriodId);
                            }
                            hashPeriod.put("" + currPeriodId, period);
                        }
                    }
                    empId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]);
                    if (payInputPresence.getEmployeeId() != empId) {
                        payInputPresence = new PayInputPresence();
                        
                        dayOffSchedule = 0;
                        totalInsentif = 0;

                        presenceOnTime = 0;
                        timePresenceOnTime = 0;

                        totalLate = 0;
                        timeLate = 0;

                        totalEarlyHome = 0;
                        timeEarlyHome = 0;

                        totalLateEarly = 0;
                        timeLateEarly = 0;

                        totalReason = 0;//ini bersifat dinamis
                        timeReason = 0;//ini bersifat dinamis

                        totalAbs = 0;
                        timeAbs = 0;

                        totalWorkingDays = 0;
                        
                        timeWorkHour=0;
                        
                        totalOnlyIn=0;
                        
                        totalOnlyOut=0;
                        
                        //hashReasonIdx = new Hashtable();
                       // hashReasonTime = new Hashtable();
                        payInputPresence.setEmployeeId(empId);
                        cekMaxMonth = false;
                        hashCekTglSama = new Hashtable();
                        list.add(payInputPresence);
                        //hanya untuk cek
                        
                    }

                    //Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    //jika pencariannya hanya d dalam 1 periode
                    if (listPeriod.size() == 1) {
                        //update by satrya 2013-09-13
                        //kasusu jika user memilih tanggal 21 agustus s/d 11 september hanya sampai 10 september saja yg di hitung
                        // diffStartToFinish = (toDate.getTime() - fromDate.getTime())
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = new Date();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }

                    int idxFieldName = cloneFromDate.getDate();
                    //update by satrya 2013-08-15
                    //kasusnya jika user memilih tanggal 20 juni s/d 21 juli masih di temukan yg tanggal 21 juni buka juli
                    // for(int idxDt=0; idxDt<=itDate;idxDt++){
                    // update by satrya 2014-01-22 karena hari terakhir tidak d baca for(int idxDt=0; idxDt<itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;
                        if (idxFieldName > maxMonth) {
                            //di update karena exception d tanggal 31
                            //if(idxFieldName > maxMonth){
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            //calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }
                        try {
                            long oidSch1St = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                            Date actualIn = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]));
                            Date actualOut = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]));
                            //untukTestSaja = untukTestSaja + rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1])+",";
                            if (hashCekTglSama.size() == 0 || !hashCekTglSama.containsKey(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))) {


                                //mencari dayOffSch
                                //long schId = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && vctSchIDOff.containsKey(""+oidSch1St)) {
//                                    for (int ix = 0; ix < vctSchIDOff.size(); ix++) {
//                                        long id = -1;//agar jika di pilih 0 nnti salah
//                                        if (vctSchIDOff.get(ix) != null) {
//                                            id = ((Long) vctSchIDOff.get(ix)).longValue();
//                                        }
//                                        if ((oidSch1St == id)) {
//                                            dayOffSchedule = dayOffSchedule + 1;
//                                        }
//
//                                    }
                                    
                                            dayOffSchedule = dayOffSchedule + 1;
                                    
                                }



                                //update by satrya 2013-04-30
                                Date dtSelect = rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                if (PstEmpSchedule.STATUS_PRESENCE_OK == rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1])) {
                                    //untuk karyawan
                                    //if(payrollCalculatorConfig.checkInsentif(empId, rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID]), rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]), PstEmpSchedule.STATUS_PRESENCE_OK, iPropInsentifLevel, iPropInsentifLevel, rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), lHolidays, rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))){
                                    //Date dtSelect =rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                    long religionId = rs.getLong("EMP." + PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID]);
                                    long deptId = rs.getLong("EMP." + PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]);
                                    //update by satrya 2014-02-10
                                    long empCategoryId = rs.getLong("EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMP_CATEGORY_ID]);
                                    int stsSchedule = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1]);
                                    int positionLevel = 0;
                                    if (hashPositionLevel != null && hashPositionLevel.get(empId) != null) {
                                        positionLevel = (Integer) hashPositionLevel.get(empId);
                                    }
                                    if (payrollCalculatorConfig.checkInsentif(empId, religionId, deptId, stsSchedule, positionLevel, iPropInsentifLevel, oidSch1St, hashSchOff, holidaysTable.isHoliday(religionId != 0 ? religionId : 0, dtSelect), dtSelect, hashTblOvertimeDetail, empCategoryId)) {
                                        totalInsentif = totalInsentif + 1;
                                    }
                                }



                                int stsus = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1]);

                                if ((PstEmpSchedule.STATUS_PRESENCE_OK == rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]))
                                        && (actualIn) != null && (actualOut) != null) {
                                    if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && !vctSchIDOff.containsKey(""+oidSch1St)) {
//                                        for (int ix = 0; ix < vctSchIDOff.size(); ix++) {
//                                            long id = -1;//agar jika di pilih 0 nnti salah
//                                            if (vctSchIDOff.get(ix) != null) {
//                                                id = ((Long) vctSchIDOff.get(ix)).longValue();
//                                            }
//                                            if ((oidSch1St!=0 && oidSch1St != id)) {
//                                                presenceOnTime = (presenceOnTime + 1);
//                                                timePresenceOnTime = timePresenceOnTime + PstEmpSchedule.timePresenceStatusOk(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
//                                            }
//
//                                        }
                                           presenceOnTime = (presenceOnTime + 1);
                                           timePresenceOnTime = timePresenceOnTime + PstEmpSchedule.timePresenceStatusOk(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                    }

                                }

                                //if ((actualIn) != null && (actualOut) != null) {
                                    if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && !vctSchIDOff.containsKey(""+oidSch1St)) {
//                                        for (int ix = 0; ix < vctSchIDOff.size(); ix++) {
//                                            long id = -1;//agar jika di pilih 0 nnti salah
//                                            if (vctSchIDOff.get(ix) != null) {
//                                                id = ((Long) vctSchIDOff.get(ix)).longValue();
//                                            }
//                                            if ((oidSch1St!=0 && oidSch1St != id)) {
//                                                totalWorkingDays = (totalWorkingDays + 1);
//                                                timeWorkHour = timeWorkHour + PstEmpSchedule.timeWorkDurationHours(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
//                                            }
//
//                                        }
                                        totalWorkingDays = (totalWorkingDays + 1);
                                        timeWorkHour = timeWorkHour + PstEmpSchedule.timeWorkDurationHours(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                    }

                                //}


                                if (PstEmpSchedule.STATUS_PRESENCE_LATE == stsus) {
                                    totalLate = totalLate + 1;
                                    timeLate = timeLate + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                }
                                
                                if (PstEmpSchedule.STATUS_PRESENCE_ONLY_IN== stsus) {
                                    totalOnlyIn = totalOnlyIn + 1;
                                    //timeOnlyIn = timeLate + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                }
                                
                                if (PstEmpSchedule.STATUS_PRESENCE_ONLY_OUT== stsus) {
                                    totalOnlyOut = totalOnlyOut + 1;
                                    //timeOnlyIn = timeLate + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                }



                                if (PstEmpSchedule.STATUS_PRESENCE_EARLY_HOME == stsus) {
                                    totalEarlyHome = totalEarlyHome + 1;
                                    timeEarlyHome = timeEarlyHome + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);

                                }

                                if (PstEmpSchedule.STATUS_PRESENCE_LATE_EARLY == stsus) {
                                    totalLateEarly = totalLateEarly + 1;
                                    timeLateEarly = timeLateEarly + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                }
                                //konfigurasi mau menghitung mangkir
                                if (PstEmpSchedule.STATUS_PRESENCE_ABSENCE == rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1])) {
                                    totalAbs = totalAbs + 1;
                                    //long idSchOff=0;
//                        for(int ix=0;ix< vctSchIDOff.size();ix++ ){ 
//                            long idOff=-1;//agar jika di pilih 0 nnti salah
//                            if(vctSchIDOff.get(ix)!=null){
//                               idOff = ((Long)vctSchIDOff.get(ix)).longValue();
//                            }
//                               if((schOffId == idOff)){
//                                   //dayOffSchedule=dayOffSchedule+1;
//                                   break;
//                               }
// 
//                       }
                                    timeAbs = timeAbs + PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration, 0);
                                }
                                //PstEmpSchedule.STATUS_PRESENCE_ABSENCE == rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1]) &&
//                                if (listReason != null && listReason.size() > 0) {
//                                    int nilaiReason = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1]);
//                                    long periodIds = 0;//di buat 0 karna periode attednace berbeda dengan periode payrool, ini di hidden karna agar tidak merubah semuanya lagi rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]);
//                                    if (hashReasonNoReason != null && hashReasonNoReason.containsKey("" + nilaiReason) && (hashReasonIdx == null || hashReasonTime == null || (hashReasonIdx != null && hashReasonIdx.containsKey(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId) == false && hashReasonTime != null && hashReasonTime.containsKey(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId) == false))) {
//                                        //jika baru ada reasonId ataupun berbeda maka pasti nilainya 1
//                                        totalReason = 1;
//                                        timeReason = PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration, 0);
//                                        hashReasonIdx.put(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId, totalReason);
//                                        hashReasonTime.put(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId, timeReason);
//                                    } else if (hashReasonNoReason != null && hashReasonNoReason.containsKey("" + nilaiReason) && hashReasonIdx != null && hashReasonIdx.containsKey(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId) && hashReasonTime != null && hashReasonTime.containsKey(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId)) {
//                                        totalReason = (Double) hashReasonIdx.get(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId);
//                                        timeReason = (Double) hashReasonTime.get(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId);
//                                        totalReason = totalReason + 1;
//                                        timeReason = timeReason + PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration, 0);
//                                        hashReasonIdx.put(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId, totalReason);
//                                        hashReasonTime.put(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId, timeReason);
//                                    }
//                                    //totalMangkir = totalMangkir + 1;
//                                    //mangkir
//                                    //timeMangkir= timeMangkir + PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect,oidSch1St,actualIn,actualOut,empId,listPresencePersonalInOutOk,hasDfltSchedule,breakTimeDuration,schOffId);
//                                }



                                //update by satrya 2014-01-22
                                hashCekTglSama.put(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), true);
                            }
                        } catch (Exception exc) {
                            System.out.println("error " + empId + exc);
                        }
                        
                        payInputPresence.setEmployeeId(empId);
                        payInputPresence.setPresenceOnTime(presenceOnTime);
                        payInputPresence.setPresenceOnTimeTime(timePresenceOnTime);
                        payInputPresence.setLate(totalLate);
                        payInputPresence.setLateTime(timeLate);
                        payInputPresence.setEarlyHome(totalEarlyHome);
                        payInputPresence.setEarlyHomeTime(timeEarlyHome);
                        payInputPresence.setLateEarly(totalLateEarly);
                        payInputPresence.setLateEarlyTime(timeLateEarly);
                        //nnti diambil berdasarkan vector listReason
                        //payInputPresence.setReason(hashReasonIdx);
                        //payInputPresence.setReasonTime(hashReasonTime);
                        payInputPresence.setAbsence(totalAbs);
                        payInputPresence.setAbsenceTime(timeAbs);
                        payInputPresence.setDayOffSchedule(dayOffSchedule);
                        payInputPresence.setInsentif(totalInsentif);
                        payInputPresence.setTotalWorkingDays(totalWorkingDays);
                        payInputPresence.setTimeWorkHour(timeWorkHour);
                        payInputPresence.setTotalOnlyIn(totalOnlyIn);
                        payInputPresence.setTimeOnlyOut(totalOnlyOut);
                        //empScheduleReport.setTotStatus(countSts);
                        idxFieldName = idxFieldName + 1;
                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);

                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start
                    //}
                    //}
                }
                 System.out.println("Durations >>>>> jsp" + (System.currentTimeMillis() - strMl));
                rs.close();
            }
            //update by satrya 2014-01-23
            //System.out.println("hanya untuk test"+untukTestSaja);
            return list;
        } catch (Exception e) {
            System.out.println("Exception get calcutaion aatendance untuk pay input" + e);
            return list;
        } finally {
            DBResultSet.close(dbrs);
        }

    }
    
    
    /**
     * Keterangan: untuk mencari attendace rekapitulsi tanpa overtime create by satrya
     * 2014-01-31
     *
     * @param fromDate
     * @param toDate
     * @param employee_id
     * @param vctSchIDOff
     * @param payrollCalculatorConfig
     * @return
     */
    public static Hashtable getListAttendaceRekap(I_Atendance attdConfig, I_Leave leaveConfig, Date fromDate, Date toDate, String employee_id, Hashtable vctSchIDOff, Hashtable hashSchOff, int iPropInsentifLevel, HolidaysTable holidaysTable, Hashtable hashPositionLevel, I_PayrollCalculator payrollCalculatorConfig, Hashtable hashTblPeriod) {
        //String untukTestSaja="";
        if (fromDate == null || toDate == null || employee_id.length() == 0 || payrollCalculatorConfig == null || attdConfig == null || leaveConfig == null) {
            return new Hashtable();
        }
        
          int intLateToleransi =0;
            try{
                String sintLateToleransi = com.dimata.system.entity.system.PstSystemProperty.getValueByName("VALUE_LATE_TOLERANSI"); 
                intLateToleransi = Integer.parseInt(sintLateToleransi);
             }catch(Exception ex){
                 System.out.println("VALUE_LATE_TOLERANSI NOT Be SET"+ex);
                
             } 
            
            
        //update by priska 2014-12-26
        //update by priska 2014-12-24
              //ambill value AL dan DP dari system properties
                long intAl =0;
            try{
                String sintAl = com.dimata.system.entity.system.PstSystemProperty.getValueByName("VALUE_ANNUAL_LEAVE"); 
                intAl = Integer.parseInt(sintAl);
             }catch(Exception ex){
                 System.out.println("VALUE_ANNUAL_LEAVE NOT Be SET"+ex);
                 intAl = 0;
             }
                
                long intDp =0;
            try{
                String sintDp = com.dimata.system.entity.system.PstSystemProperty.getValueByName("VALUE_DAY_OF_PAYMENT"); 
                intDp = Integer.parseInt(sintDp);
             }catch(Exception ex){
                 System.out.println("VALUE_DAY_OF_PAYMENT NOT Be SET"+ex);
                 intDp = 0;
             }
            
            long StockOpname4Jam =0;
                try{
                    StockOpname4Jam = Long.parseLong(com.dimata.system.entity.system.PstSystemProperty.getValueByName("STOCK_OPNAME_4JAM_ID")); 
                }catch(Exception ex){
                     System.out.println("STOCK_OPNAME_4JAM_ID NOT Be SET"+ex);
                }
                
            long StockOpname8Jam =0;
                try{
                    StockOpname8Jam = Long.parseLong(com.dimata.system.entity.system.PstSystemProperty.getValueByName("STOCK_OPNAME_8JAM_ID")); 
                }catch(Exception ex){
                     System.out.println("STOCK_OPNAME_8JAM_ID NOT Be SET"+ex);
                }   
                  
            long nightShiftCategoryId =0;
                try{
                    nightShiftCategoryId = Long.parseLong(com.dimata.system.entity.system.PstSystemProperty.getValueByName("NIGHT_SHIFT_OID")); 
                }catch(Exception ex){
                     System.out.println("NIGHT_SHIFT_OID NOT Be SET"+ex);
                }      
            
            long intB =0;
            try{
                String sintB = com.dimata.system.entity.system.PstSystemProperty.getValueByName("VALUE_B_REASON_SYMBOL"); 
                intB = Integer.parseInt(sintB);
             }catch(Exception ex){
                 System.out.println("VALUE_DAY_OF_PAYMENT NOT Be SET"+ex);
                 intB = 0;
             }
        
        //update by satrya 2014-03-10
        if (payrollCalculatorConfig != null) {
            payrollCalculatorConfig.loadEmpCategoryInsentif();
        }
        String whereClausePresence = " (1=1) ";
        if (fromDate != null && toDate != null) {
            //update by satrya 2012-10-15
            if (fromDate.getTime() > toDate.getTime()) {
                Date tempFromDate = fromDate;
                Date tempToDate = toDate;
                fromDate = tempToDate;
                toDate = tempFromDate;
            }

            whereClausePresence = whereClausePresence + " AND PS." + PstPresence.fieldNames[PstPresence.FLD_PRESENCE_DATETIME] + " BETWEEN \"" + Formater.formatDate(fromDate, "yyyy-MM-dd HH:mm:00") + "\" AND \"" + Formater.formatDate(toDate, "yyyy-MM-dd HH:mm:59") + "\"";

            whereClausePresence = whereClausePresence + "  AND (( HE." + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED]
                    + " = " + PstEmployee.YES_RESIGN + " AND " + "HE. " + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED_DATE]
                    + " BETWEEN \"" + Formater.formatDate(fromDate, "yyyy-MM-dd  00:00:00") + "\"" + " AND " + "\"" + Formater.formatDate(toDate, "yyyy-MM-dd  23:59:59") + "\""
                    + " ) OR (HE." + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED]
                    + " = " + PstEmployee.NO_RESIGN + "))";
        }
        if (employee_id != null && employee_id.length() > 0) {
            whereClausePresence = whereClausePresence + " AND HE." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID] + " IN(" + employee_id + ")";
        }

        String orderPresence = PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_NUM] + "," + PstPresence.fieldNames[PstPresence.FLD_PRESENCE_DATETIME] + "," + PstPresence.fieldNames[PstPresence.FLD_SCHEDULE_DATETIME];
        //Vector listPresencePersonalInOutOk = PstPresence.listPresenceForSummaryAttd(orderPresence, whereClausePresence + " AND PS." + PstPresence.fieldNames[PstPresence.FLD_STATUS] + " NOT IN(" + Presence.STATUS_IN + "," + Presence.STATUS_OUT + "," + Presence.STATUS_INVALID + ")", null);
        Hashtable hasTblSchedule = PstScheduleSymbol.getHashTlScheduleAll();
        //update by satrya 2014-11-10
        Hashtable hashReasonTbl = PstReason.getKodeReason(0, 0, "", "");
        
        //Hashtable breakTimeDuration = PstScheduleSymbol.getBreakTimeDuration();
     
        DBResultSet dbrs = null;
        Hashtable list = new Hashtable();
        try {
            Vector listPeriod = PstPeriod.getListStartEndDatePeriod(fromDate, toDate);
            String sql = "SELECT HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , HEP."
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " , "
                    + " EMP." + PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID] + " ,"
                    + " EMP." + PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID] + " , "
                    //update by satrya 2014-02-10
                    + "EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMP_CATEGORY_ID] + " , ";
            String periodId = "";
            boolean cekMaxMonth = false;//inisilaisai awal pengambilan maxMonth
            Hashtable cekIdxSama = new Hashtable();
            if (listPeriod != null && listPeriod.size() > 0) {
                //update by satrya 2014-01-22
                Hashtable hashCekTglSama = new Hashtable();

                for (int idxPeriod = 0; idxPeriod < listPeriod.size(); idxPeriod++) {
                    Period period = (Period) listPeriod.get(idxPeriod);
                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);

                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();

                    if (listPeriod.size() == 1) {

                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//+ 86400000);//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    //kok dapet cuma 2 hari dari tanggal 16 sampai 18 ??
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = (Date) fromDate.clone();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }
                    int idxFieldName = cloneFromDate.getDate();

                    // update by satrya 2014-01-22 for(int idxDt=0; idxDt<=itDate;idxDt++){
                    // int idxFieldName = fromDate.getDate()+idxDt;
                    int idxDt = 0;
                    do {
                        if (idxFieldName > maxMonth) {
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }

                        if (!cekIdxSama.containsKey(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1])) {
                            sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1] + ", "
                                    + " IF(((p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY) < p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + "),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " -  INTERVAL(DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY)) AS SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1] + " , ";


                            cekIdxSama.put(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1], PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                        }
                        idxFieldName = idxFieldName + 1;
                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);
                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start

                }
                periodId = periodId.substring(0, periodId.length() - 2);
                sql = sql.substring(0, sql.length() - 2);
                sql = sql
                        + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS HEP "
                        + " INNER JOIN " + PstPeriod.TBL_HR_PERIOD + " AS p ON p." + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " INNER JOIN " + PstEmployee.TBL_HR_EMPLOYEE + " AS EMP ON EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " WHERE HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " IN ( " + periodId + ")"
                        + " AND HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " IN ( " + employee_id + ")";

                sql = sql + " ORDER BY HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " ASC ";
                dbrs = DBHandler.execQueryResult(sql);
                
                ResultSet rs = dbrs.getResultSet();
                long empId = 0;
                RekapitulasiPresenceDanSchedule rekapitulasiPresenceDanSchedule = new RekapitulasiPresenceDanSchedule();
                cekMaxMonth = false;
                Period period = new Period();
                long currPeriodId = 0;
                Hashtable hashPeriod = new Hashtable();
                //int countSts=0;

                int dayOffSchedule = 0;
                int totalInsentif = 0;

                int presenceOnTime = 0;
                float timePresenceOnTime = 0;
                
                long timeWorkHour=0;

                int totalLate = 0;
                float timeLate = 0;

                int totalLateKurangLimaMenit = 0;
                
                int totalEarlyHome = 0;
                float timeEarlyHome = 0;

                int totalLateEarly = 0;
                float timeLateEarly = 0;

                //double totalReason = 0;//ini bersifat dinamis
               // double timeReason = 0;//ini bersifat dinamis

                int totalAbs = 0;
                float timeAbs = 0;

                int totalWorkingDays = 0;
                int totalAnnualLeave = 0;
                int totaldpayment = 0;
                
                int totalOnlyIn=0;
                //float timeOnlyIn=0;
                int totalOnlyOut=0;
                
                int totalStockOpname4Jam = 0 ;
                int totalStockOpname8Jam = 0 ;
                int nightShift = 0 ;
                //float timeOnlyOut=0;
                //Hashtable hashReasonIdx = new Hashtable();
                //Hashtable hashReasonTime = new Hashtable();
                //hanya untuk cek
                 long strMl = System.currentTimeMillis();
                 Calendar calendar = Calendar.getInstance();
                while (rs.next()) {
                    currPeriodId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]);
                    if (period.getOID() != currPeriodId) {
                        period = (Period) hashPeriod.get("" + currPeriodId);
                        if (period == null) {
                            if (currPeriodId != 0 && (hashTblPeriod != null && hashTblPeriod.get(currPeriodId) != null)) {
                                period = (Period) hashTblPeriod.get(currPeriodId);
                            }
                            hashPeriod.put("" + currPeriodId, period);
                        }
                    }
                    empId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]);
                    if (rekapitulasiPresenceDanSchedule.getEmployeeId() != empId) {
                        rekapitulasiPresenceDanSchedule = new RekapitulasiPresenceDanSchedule();
                        
                        dayOffSchedule = 0;
                        totalInsentif = 0;

                        presenceOnTime = 0;
                        timePresenceOnTime = 0;

                        totalLate = 0;
                        timeLate = 0;

                        totalLateKurangLimaMenit=0;
                        
                        totalEarlyHome = 0;
                        timeEarlyHome = 0;

                        totalLateEarly = 0;
                        timeLateEarly = 0;

                        //totalReason = 0;//ini bersifat dinamis
                       // timeReason = 0;//ini bersifat dinamis

                        totalAbs = 0;
                        timeAbs = 0;

                        totalWorkingDays = 0;
                        
                        totalAnnualLeave = 0;
                        totaldpayment = 0;
                
                        timeWorkHour=0;
                        
                        totalOnlyIn=0;
                        
                        totalOnlyOut=0;
                        
                        totalStockOpname4Jam = 0 ;
                        totalStockOpname8Jam = 0 ;
                        nightShift = 0;
                        //hashReasonIdx = new Hashtable();
                       // hashReasonTime = new Hashtable();
                        rekapitulasiPresenceDanSchedule.setEmployeeId(empId);
                        cekMaxMonth = false;
                        hashCekTglSama = new Hashtable();
                        list.put(""+empId,rekapitulasiPresenceDanSchedule);
                        //hanya untuk cek
                        
                    }

                    //Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    //jika pencariannya hanya d dalam 1 periode
                    if (listPeriod.size() == 1) {
                        //update by satrya 2013-09-13
                        //kasusu jika user memilih tanggal 21 agustus s/d 11 september hanya sampai 10 september saja yg di hitung
                        // diffStartToFinish = (toDate.getTime() - fromDate.getTime())
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = new Date();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }

                    int idxFieldName = cloneFromDate.getDate();
                    //update by satrya 2013-08-15
                    //kasusnya jika user memilih tanggal 20 juni s/d 21 juli masih di temukan yg tanggal 21 juni buka juli
                    // for(int idxDt=0; idxDt<=itDate;idxDt++){
                    // update by satrya 2014-01-22 karena hari terakhir tidak d baca for(int idxDt=0; idxDt<itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;
                        if (idxFieldName > maxMonth) {
                            //di update karena exception d tanggal 31
                            //if(idxFieldName > maxMonth){
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            //calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }
                        try {
                            long oidSch1St = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                           
                            Date actualIn = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]));
                            Date actualOut = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]));
                            //untukTestSaja = untukTestSaja + rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1])+",";
                            if (hashCekTglSama.size() == 0 || !hashCekTglSama.containsKey(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))) {


                                //mencari dayOffSch
                                //long schId = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && vctSchIDOff.containsKey(""+oidSch1St)) {

                                     dayOffSchedule = dayOffSchedule + 1;
                                    
                                }



                                //update by satrya 2013-04-30
                                Date dtSelect = rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                if (PstEmpSchedule.STATUS_PRESENCE_OK == rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1])) {
                                    //untuk karyawan
                                    //if(payrollCalculatorConfig.checkInsentif(empId, rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID]), rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]), PstEmpSchedule.STATUS_PRESENCE_OK, iPropInsentifLevel, iPropInsentifLevel, rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), lHolidays, rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))){
                                    //Date dtSelect =rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                    //long religionId = rs.getLong("EMP." + PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID]);
                                    //long deptId = rs.getLong("EMP." + PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]);
                                    //update by satrya 2014-02-10
                                    //long empCategoryId = rs.getLong("EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMP_CATEGORY_ID]);
                                    //int stsSchedule = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1]);
                                    int positionLevel = 0;
                                    if (hashPositionLevel != null && hashPositionLevel.get(empId) != null) {
                                        positionLevel = (Integer) hashPositionLevel.get(empId);
                                    }
                                    //if (payrollCalculatorConfig.checkInsentif(empId, religionId, deptId, stsSchedule, positionLevel, iPropInsentifLevel, oidSch1St, hashSchOff, holidaysTable.isHoliday(religionId != 0 ? religionId : 0, dtSelect), dtSelect, hashTblOvertimeDetail, empCategoryId)) {
                                    //    totalInsentif = totalInsentif + 1;
                                    //}
                                }


                                ScheduleSymbol scheduleSymbol  = (hasTblSchedule!=null && hasTblSchedule.size()>0)?(ScheduleSymbol) hasTblSchedule.get(oidSch1St):null;
                                

                                int stsus = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1]);

                                if ((PstEmpSchedule.STATUS_PRESENCE_OK == rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]))
                                        && (actualIn) != null && (actualOut) != null) {
                                    if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 ) {
                                        
                                             Date MincloneActualIn = new Date();
                                             Date cloneActualIn = new Date();
                                                  cloneActualIn = (Date) actualIn.clone();
                                                  MincloneActualIn = (Date) cloneActualIn.clone();
                                                  MincloneActualIn.setHours(scheduleSymbol.getTimeIn().getHours() + intLateToleransi);
                                                  MincloneActualIn.setMinutes(scheduleSymbol.getTimeIn().getMinutes());
                                                  MincloneActualIn.setSeconds(scheduleSymbol.getTimeIn().getSeconds());
                                             Date MincloneActualOut = new Date();
                                             Date cloneActualOut = new Date();
                                                  cloneActualOut = (Date) actualOut.clone();
                                                  MincloneActualOut = (Date) cloneActualOut.clone();
                                                  MincloneActualOut.setHours(scheduleSymbol.getTimeOut().getHours() - intLateToleransi);
                                                  MincloneActualOut.setMinutes(scheduleSymbol.getTimeOut().getMinutes());
                                                  MincloneActualOut.setSeconds(scheduleSymbol.getTimeOut().getSeconds());
                                        
                                        if (((actualIn.getTime() <= MincloneActualIn.getTime()) && (actualIn.getTime() > scheduleSymbol.getTimeIn().getTime())) && (actualOut.getTime() >= scheduleSymbol.getTimeOut().getTime())){
                                           
                                           if ((scheduleSymbol.getWorkDays() ==0) )  {
                                                presenceOnTime = (presenceOnTime + 1);
                                                } else {
                                                presenceOnTime = (presenceOnTime + scheduleSymbol.getWorkDays());
                                                }
                                        } else if ((actualIn.getTime() <= scheduleSymbol.getTimeIn().getTime()) && (actualOut.getTime() >= MincloneActualOut.getTime())){
                                           if ((scheduleSymbol.getWorkDays() ==0) )  {
                                                presenceOnTime = (presenceOnTime + 1);
                                                } else {
                                                presenceOnTime = (presenceOnTime + scheduleSymbol.getWorkDays());
                                                }  
                                        } 
                                           
                                          // timePresenceOnTime = timePresenceOnTime + PstEmpSchedule.timePresenceStatusOk(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                    }

                                }

                                //update by priska menambahkan kondisi dimana reason AL dan DP maka hari kerja tidak ditambahkan 
                                //if ((actualIn) != null && (actualOut) != null) {
                                int reason =rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1]);
                               
                                    if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && !vctSchIDOff.containsKey(""+oidSch1St)) {
                                       if ( intAl != 0 && intDp != 0 && intB !=0){ 
                                        if ((reason !=intAl ) && (reason !=intDp )) {
                                            if (reason !=intB ){
                                                if ((scheduleSymbol.getWorkDays() ==0) )  {
                                                totalWorkingDays = (totalWorkingDays + 1);
                                                } else {
                                                totalWorkingDays = (totalWorkingDays + scheduleSymbol.getWorkDays());
                                                }
                                            }
                                                
                                        }
                                       } else {
                                            if ((scheduleSymbol.getWorkDays() ==0) )  {
                                                totalWorkingDays = (totalWorkingDays + 1);
                                                } else {
                                                totalWorkingDays = (totalWorkingDays + scheduleSymbol.getWorkDays());
                                                }
                                       }
                                        
                                    if(rekapitulasiPresenceDanSchedule.telatlebihLimaMenit(dtSelect,scheduleSymbol,actualIn)){
                                    totalLateKurangLimaMenit = totalLateKurangLimaMenit + 1;
                                    }
                                        //timeWorkHour = timeWorkHour + PstEmpSchedule.timeWorkDurationHours(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                    }

                                 //}
                                 //priska menambahkan annual leave 2014-12-23
                                    if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && !vctSchIDOff.containsKey(""+oidSch1St) && (String.valueOf(oidSch1St).equals("504404569361097396")) ) {

                                        totalAnnualLeave = (totalAnnualLeave + 1);
                                        //timeWorkHour = timeWorkHour + PstEmpSchedule.timeWorkDurationHours(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                    }

                                 //priska menambahkan Dp 2014-12-23
                                    if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && !vctSchIDOff.containsKey(""+oidSch1St) && (String.valueOf(oidSch1St).equals("504404569360615278")) ) {

                                        totaldpayment = (totaldpayment + 1);
                                        //timeWorkHour = timeWorkHour + PstEmpSchedule.timeWorkDurationHours(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                    }
                                    
                                    if (scheduleSymbol.getScheduleCategoryId() == StockOpname4Jam ){
                                        if (actualIn != null || actualOut != null ){
                                        totalStockOpname4Jam = totalStockOpname4Jam + 1;
                                        }
                                    }
                                    if (scheduleSymbol.getScheduleCategoryId() == StockOpname8Jam ){
                                        if (actualIn != null || actualOut != null ){
                                        totalStockOpname8Jam = totalStockOpname8Jam + 1;
                                        }
                                    }
                                     if (scheduleSymbol.getScheduleCategoryId() == nightShiftCategoryId ){
                                        if ((PstEmpSchedule.STATUS_PRESENCE_OK == rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]))
                                        && (actualIn) != null && (actualOut) != null) {
                                        nightShift = nightShift + 1;
                                        }
                                    }
                                    
                                if (PstEmpSchedule.STATUS_PRESENCE_LATE == stsus) {
                                    totalLate = totalLate + 1;
                                    //timeLate = timeLate + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                }
                                
                                //telat lima menit
                                //ScheduleSymbol scheduleSymbol  = (hasTblSchedule!=null && hasTblSchedule.size()>0)?(ScheduleSymbol) hasTblSchedule.get(oidSch1St):null;
                               
                                
                                if (PstEmpSchedule.STATUS_PRESENCE_ONLY_IN== stsus) {
                                    totalOnlyIn = totalOnlyIn + 1;
                                    //timeOnlyIn = timeLate + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                }
                                
                                if (PstEmpSchedule.STATUS_PRESENCE_ONLY_OUT== stsus) {
                                    totalOnlyOut = totalOnlyOut + 1;
                                    //timeOnlyIn = timeLate + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                }



                                if (PstEmpSchedule.STATUS_PRESENCE_EARLY_HOME == stsus) {
                                    totalEarlyHome = totalEarlyHome + 1;
                                   // timeEarlyHome = timeEarlyHome + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);

                                }

                                if (PstEmpSchedule.STATUS_PRESENCE_LATE_EARLY == stsus) {
                                    totalLateEarly = totalLateEarly + 1;
                                   // timeLateEarly = timeLateEarly + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                }
                                //konfigurasi mau menghitung mangkir
                                if (PstEmpSchedule.STATUS_PRESENCE_ABSENCE == rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1])) {
                                    totalAbs = totalAbs + 1;
                                   
                                    //timeAbs = timeAbs + PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration, 0);
                                }

                                //menyimpan di memory data schedulenya
                                 if(hasTblSchedule!=null && hasTblSchedule.size()>0 && hasTblSchedule.containsKey(oidSch1St)){
                                    //String symbol=(String)(hasTblSchedule.get(oidSch1St));
                                     rekapitulasiPresenceDanSchedule.addHashDataSchedule(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), (scheduleSymbol!=null && scheduleSymbol.getSymbol()!=null && scheduleSymbol.getSymbol().length()>0?scheduleSymbol.getSymbol():"-"));
                                }else{
                                     rekapitulasiPresenceDanSchedule.addHashDataSchedule(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), "-");
                                }
                                
                                 //menyimpan di memory dataReason
                                 
                                 //int nilai=0;
                                 //update by satrya 2014-11-10
                                 if(reason==intB){
                                     boolean dx=true;
                                 }
                                String codeReason  = (hashReasonTbl!=null && hashReasonTbl.size()>0)?(String) hashReasonTbl.get(""+reason):null;
                                  if(hashReasonTbl!=null && hashReasonTbl.size()>0 && hashReasonTbl.containsKey(""+reason)){
                                    //String symbol=(String)(hasTblSchedule.get(oidSch1St));
                                    rekapitulasiPresenceDanSchedule.addHashDataReason(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), (codeReason!=null && codeReason.length()>0?codeReason:"-"));
                                }else{
                                     rekapitulasiPresenceDanSchedule.addHashDataReason(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), "");
                                }
                                  
                               //status priska 20150326
                               String ststatus = strPresenceStatus[stsus];
                               rekapitulasiPresenceDanSchedule.addHashDataStatus(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), ststatus);
                                 
                                  
                                if(rekapitulasiPresenceDanSchedule.getReason()!=null && rekapitulasiPresenceDanSchedule.getReason().containsKey(""+reason)){
                                    int nilai = rekapitulasiPresenceDanSchedule.getTotalReason(reason);
                                    nilai = nilai + 1;
                                    rekapitulasiPresenceDanSchedule.addReason(reason, nilai);
                                }else{
                                    //0 itu artinya selected
                                   if(reason!=0){
                                       rekapitulasiPresenceDanSchedule.addReason(reason, 1);
                                   }
                                    
                                }
                                //update by satrya 2014-01-22
                                hashCekTglSama.put(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), true);
                            }
                        } catch (Exception exc) {
                            System.out.println("error " + empId + exc);
                        }
                        
                        
                       
                                
                        
                        rekapitulasiPresenceDanSchedule.setEmployeeId(empId);
                        rekapitulasiPresenceDanSchedule.setTotalpresencelateearlyonly(presenceOnTime+totalOnlyOut+totalOnlyIn+totalLate+totalEarlyHome+totalLateEarly);
                        rekapitulasiPresenceDanSchedule.setPresenceOnTime(presenceOnTime);
                        rekapitulasiPresenceDanSchedule.setPresenceOnTimeTime(timePresenceOnTime);
                        rekapitulasiPresenceDanSchedule.setLate(totalLate);
                        rekapitulasiPresenceDanSchedule.setLateTime(timeLate);
                        rekapitulasiPresenceDanSchedule.setEarlyHome(totalEarlyHome);
                        rekapitulasiPresenceDanSchedule.setEarlyHomeTime(timeEarlyHome);
                        rekapitulasiPresenceDanSchedule.setLateEarly(totalLateEarly);
                        rekapitulasiPresenceDanSchedule.setLateEarlyTime(timeLateEarly);
                        rekapitulasiPresenceDanSchedule.setAnnualLeave(totalAnnualLeave);
                        rekapitulasiPresenceDanSchedule.setdPayment(totaldpayment);
                        rekapitulasiPresenceDanSchedule.setAbsence(totalAbs);
                        rekapitulasiPresenceDanSchedule.setAbsenceTime(timeAbs);
                        rekapitulasiPresenceDanSchedule.setDayOffSchedule(dayOffSchedule);
                        rekapitulasiPresenceDanSchedule.setInsentif(totalInsentif);
                        rekapitulasiPresenceDanSchedule.setTotalWorkingDays(totalWorkingDays);
                        rekapitulasiPresenceDanSchedule.setTimeWorkHour(timeWorkHour);
                        rekapitulasiPresenceDanSchedule.setTotalOnlyIn(totalOnlyIn);
                        rekapitulasiPresenceDanSchedule.setTimeOnlyOut(totalOnlyOut);
                        rekapitulasiPresenceDanSchedule.setTotalLateLebihLimaMenit(totalLateKurangLimaMenit);
                        rekapitulasiPresenceDanSchedule.setTotalScheduleOpname4jam(totalStockOpname4Jam);
                        rekapitulasiPresenceDanSchedule.setTotalScheduleOpname8jam(totalStockOpname8Jam);
                        rekapitulasiPresenceDanSchedule.setNightShift(nightShift);
                        idxFieldName = idxFieldName + 1;
                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);

                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start
                    //}
                    //}
                }
                 System.out.println("Durations >>>>> jsp" + (System.currentTimeMillis() - strMl));
                rs.close();
            }
            //update by satrya 2014-01-23
            //System.out.println("hanya untuk test"+untukTestSaja);
            return list;
        } catch (Exception e) {
            System.out.println("Exception get calcutaion aatendance untuk pay input" + e);
            return list;
        } finally {
            DBResultSet.close(dbrs);
        }

    }
    
    
    
    /**
     * Keterangan: untuk mencari attendace yg ada di pay input create by satrya
     * 2014-01-31
     *
     * @param fromDate
     * @param toDate
     * @param employee_id
     * @param vctSchIDOff
     * @param payrollCalculatorConfig
     * @return
     */
    public static Vector getListAttendace(I_Atendance attdConfig, I_Leave leaveConfig, Date fromDate, Date toDate, String employee_id, Hashtable vctSchIDOff, Hashtable hashSchOff, int iPropInsentifLevel, HolidaysTable holidaysTable, Hashtable hashPositionLevel, I_PayrollCalculator payrollCalculatorConfig, Hashtable hashTblPeriod, HashTblOvertimeDetail hashTblOvertimeDetail) {
        //String untukTestSaja="";
        if (fromDate == null || toDate == null || employee_id.length() == 0 || payrollCalculatorConfig == null || attdConfig == null || leaveConfig == null) {
            return new Vector();
        }
         //jika mm
                          long propFormatDatePresent = -1;
                            try {
                                 propFormatDatePresent = Long.parseLong(com.dimata.system.entity.system.PstSystemProperty.getValueByName("FORMAT_DATE_PRESENT"));
                            } catch (Exception ex) {

                            }     
        int intLateToleransi =0;
            try{
                String sintLateToleransi = com.dimata.system.entity.system.PstSystemProperty.getValueByName("VALUE_LATE_TOLERANSI"); 
                intLateToleransi = Integer.parseInt(sintLateToleransi);
             }catch(Exception ex){
                 System.out.println("VALUE_LATE_TOLERANSI NOT Be SET"+ex);
                
             } 
        //update by satrya 2014-03-10
        if (payrollCalculatorConfig != null) {
            payrollCalculatorConfig.loadEmpCategoryInsentif();
        }
        long oidSecCategoryNight = 0;//hanya cuti full day jika fullDayLeave = 0
    try {
        oidSecCategoryNight = Long.parseLong(PstSystemProperty.getValueByName("CONFIGURATION_SCH_CATEGORY_NIGHT_WORKER"));
    } catch (Exception ex) {

        //System.out.println("Execption PAYROLL_INSENTIF_MAX_LEVEL: " + ex);
        System.out.println("<blink>PAYROLL_INSENTIF_MAX_LEVEL NOT TO BE SET</blink>");
    }
        String whereClausePresence = " (1=1) ";
        if (fromDate != null && toDate != null) {
            //update by satrya 2012-10-15
            if (fromDate.getTime() > toDate.getTime()) {
                Date tempFromDate = fromDate;
                Date tempToDate = toDate;
                fromDate = tempToDate;
                toDate = tempFromDate;
            }

            whereClausePresence = whereClausePresence + " AND PS." + PstPresence.fieldNames[PstPresence.FLD_PRESENCE_DATETIME] + " BETWEEN \"" + Formater.formatDate(fromDate, "yyyy-MM-dd HH:mm:00") + "\" AND \"" + Formater.formatDate(toDate, "yyyy-MM-dd HH:mm:59") + "\"";

            whereClausePresence = whereClausePresence + "  AND (( HE." + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED]
                    + " = " + PstEmployee.YES_RESIGN + " AND " + "HE. " + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED_DATE]
                    + " BETWEEN \"" + Formater.formatDate(fromDate, "yyyy-MM-dd  00:00:00") + "\"" + " AND " + "\"" + Formater.formatDate(toDate, "yyyy-MM-dd  23:59:59") + "\""
                    + " ) OR (HE." + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED]
                    + " = " + PstEmployee.NO_RESIGN + "))";
        }
        if (employee_id != null && employee_id.length() > 0) {
            whereClausePresence = whereClausePresence + " AND HE." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID] + " IN(" + employee_id + ")";
        }

        String orderPresence = PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_NUM] + "," + PstPresence.fieldNames[PstPresence.FLD_PRESENCE_DATETIME] + "," + PstPresence.fieldNames[PstPresence.FLD_SCHEDULE_DATETIME];
        Vector listPresencePersonalInOutOk = PstPresence.listPresenceForSummaryAttd(orderPresence, whereClausePresence + " AND PS." + PstPresence.fieldNames[PstPresence.FLD_STATUS] + " NOT IN(" + Presence.STATUS_IN + "," + Presence.STATUS_OUT + "," + Presence.STATUS_INVALID + ")", null);
        Hashtable hasTblSchedule = PstScheduleSymbol.getHashTlScheduleAll();
        Hashtable breakTimeDuration = PstScheduleSymbol.getBreakTimeDuration();
        Vector listReason = PstReason.list(0, 0, PstReason.fieldNames[PstReason.FLD_FLAG_IN_PAY_INPUT] + "=" + PstReason.SHOW_REASON_IN_PAY_INPUT_YES, PstReason.fieldNames[PstReason.FLD_REASON] + " ASC ");
        Hashtable hashReasonNoReason = new Hashtable();
        String wherex= oidSecCategoryNight!=0?PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_CATEGORY_ID]+"="+oidSecCategoryNight:null;
        Hashtable listSchCatLongSifht = wherex==null?null:PstScheduleSymbol.getHashTblSchedule(0, 0, wherex, "");
       
        try {
            if (listReason != null && listReason.size() > 0) {
                for (int idxRea = 0; idxRea < listReason.size(); idxRea++) {
                    Reason reason = (Reason) listReason.get(idxRea);
                    hashReasonNoReason.put("" + reason.getNo(), reason);
                }
            }
            //reason = PstReason.fetchExc(oidReason);

        } catch (Exception exception) {
            System.out.println("error getReasonId" + exception);
        }
        DBResultSet dbrs = null;
        Vector list = new Vector();
        try {
            Vector listPeriod = PstPeriod.getListStartEndDatePeriod(fromDate, toDate);
            String sql = "SELECT HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , HEP."
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " , "
                    + " EMP." + PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID] + " ,"
                    + " EMP." + PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID] + " , "
                    //update by satrya 2014-02-10
                    + "EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMP_CATEGORY_ID] + " , ";
            String periodId = "";
            boolean cekMaxMonth = false;//inisilaisai awal pengambilan maxMonth
            Hashtable cekIdxSama = new Hashtable();
            if (listPeriod != null && listPeriod.size() > 0) {
                //update by satrya 2014-01-22
                Hashtable hashCekTglSama = new Hashtable();

                for (int idxPeriod = 0; idxPeriod < listPeriod.size(); idxPeriod++) {
                    Period period = (Period) listPeriod.get(idxPeriod);
                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);

                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();

                    if (listPeriod.size() == 1) {

                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//+ 86400000);//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = (Date) fromDate.clone();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }
                    int idxFieldName = cloneFromDate.getDate();

                    // update by satrya 2014-01-22 for(int idxDt=0; idxDt<=itDate;idxDt++){
                    // int idxFieldName = fromDate.getDate()+idxDt;
                    int idxDt = 0;
                    do {
                        if (idxFieldName > maxMonth) {
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }

                        if (!cekIdxSama.containsKey(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1])) {
                            sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1] + ", "
                                    + " IF(((p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY) < p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + "),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " -  INTERVAL(DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY)) AS SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1] + " , ";


                            cekIdxSama.put(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1], PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                        }
                        idxFieldName = idxFieldName + 1;
                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);
                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start

                }
                periodId = periodId.substring(0, periodId.length() - 2);
                sql = sql.substring(0, sql.length() - 2);
                sql = sql
                        + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS HEP "
                        + " INNER JOIN " + PstPeriod.TBL_HR_PERIOD + " AS p ON p." + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " INNER JOIN " + PstEmployee.TBL_HR_EMPLOYEE + " AS EMP ON EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " WHERE HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " IN ( " + periodId + ")"
                        + " AND HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " IN ( " + employee_id + ")";

                sql = sql + " ORDER BY HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " ASC ";
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();
                long empId = 0;
                PayInputPresence payInputPresence = new PayInputPresence();
                cekMaxMonth = false;
                Period period = new Period();
                long currPeriodId = 0;
                Hashtable hashPeriod = new Hashtable();
                //int countSts=0;

                int dayOffSchedule = 0;
                int totalInsentif = 0;

                int presenceOnTime = 0;
                float timePresenceOnTime = 0;
                
                int TotalOnlyIn = 0;
                float timeOnlyIn = 0;
                
                int TotalOnlyOut = 0;
                float timeOnlyOut = 0;
                
                int nightAllowance = 0;
                int transportAllowance = 0;
                
                long timeWorkHour=0;

                int totalLate = 0;
                float timeLate = 0;

                int totalEarlyHome = 0;
                float timeEarlyHome = 0;

                int totalLateEarly = 0;
                float timeLateEarly = 0;

                double totalReason = 0;//ini bersifat dinamis
                double timeReason = 0;//ini bersifat dinamis

                int totalAbs = 0;
                float timeAbs = 0;

                int totalWorkingDays = 0;
                Hashtable hashReasonIdx = new Hashtable();
                Hashtable hashReasonTime = new Hashtable();
                while (rs.next()) {
                    currPeriodId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]);
                    if (period.getOID() != currPeriodId) {
                        period = (Period) hashPeriod.get("" + currPeriodId);
                        if (period == null) {
                            if (currPeriodId != 0 && (hashTblPeriod != null && hashTblPeriod.get(currPeriodId) != null)) {
                                period = (Period) hashTblPeriod.get(currPeriodId);
                            }
                            hashPeriod.put("" + currPeriodId, period);
                        }
                    }
                    empId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]);
                    if (payInputPresence.getEmployeeId() != empId) {
                        payInputPresence = new PayInputPresence();

                        dayOffSchedule = 0;
                        totalInsentif = 0;

                        presenceOnTime = 0;
                        timePresenceOnTime = 0;

                        
                        
                        totalLate = 0;
                        timeLate = 0;

                        totalEarlyHome = 0;
                        timeEarlyHome = 0;

                        totalLateEarly = 0;
                        timeLateEarly = 0;

                        
                        TotalOnlyIn = 0;
                        timeOnlyIn = 0;
                
                        TotalOnlyOut = 0;
                        timeOnlyOut = 0;
                
                        totalReason = 0;//ini bersifat dinamis
                        timeReason = 0;//ini bersifat dinamis

                        totalAbs = 0;
                        timeAbs = 0;

                        totalWorkingDays = 0;
                        hashReasonIdx = new Hashtable();
                        hashReasonTime = new Hashtable();
                        payInputPresence.setEmployeeId(empId);
                        cekMaxMonth = false;
                        hashCekTglSama = new Hashtable();
                        list.add(payInputPresence);
                    }

                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    //jika pencariannya hanya d dalam 1 periode
                    if (listPeriod.size() == 1) {
                        //update by satrya 2013-09-13
                        //kasusu jika user memilih tanggal 21 agustus s/d 11 september hanya sampai 10 september saja yg di hitung
                        // diffStartToFinish = (toDate.getTime() - fromDate.getTime())
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = new Date();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }

                    int idxFieldName = cloneFromDate.getDate();
                    //update by satrya 2013-08-15
                    //kasusnya jika user memilih tanggal 20 juni s/d 21 juli masih di temukan yg tanggal 21 juni buka juli
                    // for(int idxDt=0; idxDt<=itDate;idxDt++){
                    // update by satrya 2014-01-22 karena hari terakhir tidak d baca for(int idxDt=0; idxDt<itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;
                        if (idxFieldName > maxMonth) {
                            //di update karena exception d tanggal 31
                            //if(idxFieldName > maxMonth){
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }
                        try {
                            long oidSch1St = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                            Date actualIn = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]));
                            Date actualOut = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]));
                            //untukTestSaja = untukTestSaja + rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1])+",";
                            if (hashCekTglSama.size() == 0 || !hashCekTglSama.containsKey(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))) {


                                //mencari dayOffSch
                                //long schId = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && vctSchIDOff.containsKey(""+oidSch1St)) {
                                    //update by satrya 2014-06-09
//                                    for (int ix = 0; ix < vctSchIDOff.size(); ix++) {
//                                        long id = -1;//agar jika di pilih 0 nnti salah
//                                        if (vctSchIDOff.get(ix) != null) {
//                                            id = ((Long) vctSchIDOff.get(ix)).longValue();
//                                        }
//                                        if ((oidSch1St == id)) {
//                                            dayOffSchedule = dayOffSchedule + 1;
//                                        }
//
//                                    }
                                     dayOffSchedule = dayOffSchedule + 1;
                                    
                                }



                                //update by satrya 2013-04-30
                                Date dtSelect = rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                if (PstEmpSchedule.STATUS_PRESENCE_OK == rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1])) {
                                    //untuk karyawan
                                    //if(payrollCalculatorConfig.checkInsentif(empId, rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID]), rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]), PstEmpSchedule.STATUS_PRESENCE_OK, iPropInsentifLevel, iPropInsentifLevel, rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), lHolidays, rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))){
                                    //Date dtSelect =rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                    long religionId = rs.getLong("EMP." + PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID]);
                                    long deptId = rs.getLong("EMP." + PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]);
                                    //update by satrya 2014-02-10
                                    long empCategoryId = rs.getLong("EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMP_CATEGORY_ID]);
                                    int stsSchedule = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1]);
                                    int positionLevel = 0;
                                    if (hashPositionLevel != null && hashPositionLevel.get(empId) != null) {
                                        positionLevel = (Integer) hashPositionLevel.get(empId);
                                    }
                                    if (payrollCalculatorConfig.checkInsentif(empId, religionId, deptId, stsSchedule, positionLevel, iPropInsentifLevel, oidSch1St, hashSchOff, holidaysTable.isHoliday(religionId != 0 ? religionId : 0, dtSelect), dtSelect, hashTblOvertimeDetail, empCategoryId)) {
                                        totalInsentif = totalInsentif + 1;
                                    }
                                }



                                int stsus = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1]);
                                ScheduleSymbol scheduleSymbol  = (hasTblSchedule!=null && hasTblSchedule.size()>0)?(ScheduleSymbol) hasTblSchedule.get(oidSch1St):null;
                                
                                if ((PstEmpSchedule.STATUS_PRESENCE_OK == rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]))
                                        && (actualIn) != null && (actualOut) != null) {
                                    if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && !vctSchIDOff.containsKey(""+oidSch1St)) {
//                                        for (int ix = 0; ix < vctSchIDOff.size(); ix++) {
//                                            long id = -1;//agar jika di pilih 0 nnti salah
//                                            if (vctSchIDOff.get(ix) != null) {
//                                                id = ((Long) vctSchIDOff.get(ix)).longValue();
//                                            }
//                                            if ((oidSch1St!=0 && oidSch1St != id)) {
//                                                presenceOnTime = (presenceOnTime + 1);
//                                                timePresenceOnTime = timePresenceOnTime + PstEmpSchedule.timePresenceStatusOk(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
//                                            }
//
//                                        }
                                      //  maudiedit
                                        
                                        
                                        //update by priska 20150316
                                        
                                            Date MincloneActualIn = new Date();
                                             Date cloneActualIn = new Date();
                                                  cloneActualIn = (Date) actualIn.clone();
                                                  MincloneActualIn = (Date) cloneActualIn.clone();
                                                  MincloneActualIn.setHours(scheduleSymbol.getTimeIn().getHours() + intLateToleransi);
                                                  MincloneActualIn.setMinutes(scheduleSymbol.getTimeIn().getMinutes());
                                                  MincloneActualIn.setSeconds(scheduleSymbol.getTimeIn().getSeconds());
                                             Date MincloneActualOut = new Date();
                                             Date cloneActualOut = new Date();
                                                  cloneActualOut = (Date) actualOut.clone();
                                                  MincloneActualOut = (Date) cloneActualOut.clone();
                                                  MincloneActualOut.setHours(scheduleSymbol.getTimeOut().getHours() - intLateToleransi);
                                                  MincloneActualOut.setMinutes(scheduleSymbol.getTimeOut().getMinutes());
                                                  MincloneActualOut.setSeconds(scheduleSymbol.getTimeOut().getSeconds());
                                        
                                        if (((actualIn.getTime() <= MincloneActualIn.getTime()) && (actualIn.getTime() > scheduleSymbol.getTimeIn().getTime())) && (actualOut.getTime() >= scheduleSymbol.getTimeOut().getTime())){
                                           
                                           if ((scheduleSymbol.getWorkDays() ==0) )  {
                                                presenceOnTime = (presenceOnTime + 1);
                                                } else {
                                                presenceOnTime = (presenceOnTime + scheduleSymbol.getWorkDays());
                                           }
                                           
                                        } else if ((actualIn.getTime() <= scheduleSymbol.getTimeIn().getTime()) && (actualOut.getTime() >= MincloneActualOut.getTime())){
                                           if ((scheduleSymbol.getWorkDays() ==0) )  {
                                                presenceOnTime = (presenceOnTime + 1);
                                                } else {
                                                presenceOnTime = (presenceOnTime + scheduleSymbol.getWorkDays());
                                                }  
                                        }
                                        
                                        
                                        
                                        // presenceOnTime = (presenceOnTime + 1);
                                       if (PstEmpSchedule.timePresenceStatusOk(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration) != 1)  {
                                         timePresenceOnTime = timePresenceOnTime + PstEmpSchedule.timePresenceStatusOk(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                      } else {
                                           if ((scheduleSymbol.getWorkDays() ==0) )  {
                                               timePresenceOnTime = timePresenceOnTime + 1; 
                                           } else {
                                               timePresenceOnTime = timePresenceOnTime + scheduleSymbol.getWorkDays();   
                                           }
                                        }
                                          // night
                                         
                                        //if(PstEmpSchedule.FLD_SCHEDULE == "L1")
                                        //if(listSchCatLongSifht!=null && listSchCatLongSifht.containsKey(rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1])))
                                        if(PstEmpSchedule.FLD_SCHEDULE == "L1")
                                        {
                                            nightAllowance = nightAllowance + 1;
                                            transportAllowance = transportAllowance + 1; 
                                        }
                                    }
                                    
                                   

                                }

                                //if ((actualIn) != null && (actualOut) != null) {
                                    if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && !vctSchIDOff.containsKey(""+oidSch1St)) {
//                                        for (int ix = 0; ix < vctSchIDOff.size(); ix++) {
//                                            long id = -1;//agar jika di pilih 0 nnti salah
//                                            if (vctSchIDOff.get(ix) != null) {
//                                                id = ((Long) vctSchIDOff.get(ix)).longValue();
//                                            }
//                                            if ((oidSch1St!=0 && oidSch1St != id)) {
//                                                totalWorkingDays = (totalWorkingDays + 1);
//                                                timeWorkHour = timeWorkHour + PstEmpSchedule.timeWorkDurationHours(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
//                                            }
//
//                                        }
                                        totalWorkingDays = (totalWorkingDays + 1);
                                                timeWorkHour = timeWorkHour + PstEmpSchedule.timeWorkDurationHours(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                    }

                                //}


                                if (PstEmpSchedule.STATUS_PRESENCE_LATE == stsus) {
                                    totalLate = totalLate + 1;
                                    timeLate = timeLate + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                }

                                if (PstEmpSchedule.STATUS_PRESENCE_ONLY_IN == stsus) {
                                    TotalOnlyIn = TotalOnlyIn + 1;
                                    //timeOnlyIn = timeOnlyIn + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);

                                }

                                if (PstEmpSchedule.STATUS_PRESENCE_ONLY_OUT == stsus) {
                                    TotalOnlyOut = TotalOnlyOut + 1;
                                }
                                if (PstEmpSchedule.STATUS_PRESENCE_EARLY_HOME == stsus) {
                                    totalEarlyHome = totalEarlyHome + 1;
                                    timeEarlyHome = timeEarlyHome + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);

                                }

                                if (PstEmpSchedule.STATUS_PRESENCE_LATE_EARLY == stsus) {
                                    totalLateEarly = totalLateEarly + 1;
                                    timeLateEarly = timeLateEarly + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                }
                                //konfigurasi mau menghitung mangkir
                                if (PstEmpSchedule.STATUS_PRESENCE_ABSENCE == rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1])) {
                                    totalAbs = totalAbs + 1;
                                    //long idSchOff=0;
//                        for(int ix=0;ix< vctSchIDOff.size();ix++ ){ 
//                            long idOff=-1;//agar jika di pilih 0 nnti salah
//                            if(vctSchIDOff.get(ix)!=null){
//                               idOff = ((Long)vctSchIDOff.get(ix)).longValue();
//                            }
//                               if((schOffId == idOff)){
//                                   //dayOffSchedule=dayOffSchedule+1;
//                                   break;
//                               }
//
//                       }
                                    timeAbs = timeAbs + PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration, 0);
                                }
                                //PstEmpSchedule.STATUS_PRESENCE_ABSENCE == rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1]) &&
                                if (listReason != null && listReason.size() > 0) {
                                    int nilaiReason = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1]);
                                    long periodIds = 0;//di buat 0 karna periode attednace berbeda dengan periode payrool, ini di hidden karna agar tidak merubah semuanya lagi rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]);
                                    if (hashReasonNoReason != null && hashReasonNoReason.containsKey("" + nilaiReason) && (hashReasonIdx == null || hashReasonTime == null || (hashReasonIdx != null && hashReasonIdx.containsKey(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId) == false && hashReasonTime != null && hashReasonTime.containsKey(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId) == false))) {
                                        //jika baru ada reasonId ataupun berbeda maka pasti nilainya 1
                                        totalReason = 1;
                                        timeReason = PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration, 0);
                                        hashReasonIdx.put(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId, totalReason);
                                        hashReasonTime.put(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId, timeReason);
                                    } else if (hashReasonNoReason != null && hashReasonNoReason.containsKey("" + nilaiReason) && hashReasonIdx != null && hashReasonIdx.containsKey(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId) && hashReasonTime != null && hashReasonTime.containsKey(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId)) {
                                        totalReason = (Double) hashReasonIdx.get(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId);
                                        timeReason = (Double) hashReasonTime.get(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId);
                                        totalReason = totalReason + 1;
                                        timeReason = timeReason + PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration, 0);
                                        hashReasonIdx.put(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId, totalReason);
                                        hashReasonTime.put(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId, timeReason);
                                    }
                                    //totalMangkir = totalMangkir + 1;
                                    //mangkir
                                    //timeMangkir= timeMangkir + PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect,oidSch1St,actualIn,actualOut,empId,listPresencePersonalInOutOk,hasDfltSchedule,breakTimeDuration,schOffId);
                                }



                                //update by satrya 2014-01-22
                                hashCekTglSama.put(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), true);
                            }
                        } catch (Exception exc) {
                            System.out.println("error " + empId + exc);
                        }
                        payInputPresence.setEmployeeId(empId);
                        payInputPresence.setPresenceOnTime(presenceOnTime);
                       
                        if (propFormatDatePresent == 1){
                            payInputPresence.setPresenceOnTimeTime(presenceOnTime);
                        } else {
                           payInputPresence.setPresenceOnTimeTime(timePresenceOnTime);
                        }
                      //  payInputPresence.setPresenceOnTimeTime(timePresenceOnTime);
                        payInputPresence.setLate(totalLate);
                        payInputPresence.setLateTime(timeLate);
                        payInputPresence.setEarlyHome(totalEarlyHome);
                        payInputPresence.setEarlyHomeTime(timeEarlyHome);
                        payInputPresence.setLateEarly(totalLateEarly);
                        payInputPresence.setLateEarlyTime(timeLateEarly);
                        // test ...
                        //nnti diambil berdasarkan vector listReason
                        payInputPresence.setReason(hashReasonIdx);
                        payInputPresence.setReasonTime(hashReasonTime);
                        payInputPresence.setAbsence(totalAbs);
                        payInputPresence.setAbsenceTime(timeAbs);
                        payInputPresence.setDayOffSchedule(dayOffSchedule);
                        payInputPresence.setInsentif(totalInsentif);
                        payInputPresence.setTotalWorkingDays(totalWorkingDays);
                        payInputPresence.setTimeWorkHour(timeWorkHour);
                        //empScheduleReport.setTotStatus(countSts);
                        // mchen 2014-11-25
                        payInputPresence.setNightAllowance(nightAllowance);
                        payInputPresence.setTransportAllowance(transportAllowance);
                        
                        payInputPresence.setTotalOnlyIn(TotalOnlyIn);
                        //payInputPresence.setTimeOnlyIn(TotalOnlyIn);
                        payInputPresence.setTotalOnlyOut(TotalOnlyOut);
                        //payInputPresence.setTimeOnlyOut(TotalOnlyOut);
                        idxFieldName = idxFieldName + 1;
                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);

                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start
                    //}
                    //}
                }

                rs.close();
            }
            //update by satrya 2014-01-23
            //System.out.println("hanya untuk test"+untukTestSaja);
            return list;
        } catch (Exception e) {
            System.out.println("Exception get calcutaion aatendance untuk pay input" + e);
            return list;
        } finally {
            DBResultSet.close(dbrs);
        }

    }
	
	public static Vector getListAttendaceSimple(I_Atendance attdConfig, I_Leave leaveConfig, Date fromDate, Date toDate, String employee_id, Hashtable vctSchIDOff, Hashtable hashSchOff, int iPropInsentifLevel, HolidaysTable holidaysTable, Hashtable hashPositionLevel, I_PayrollCalculator payrollCalculatorConfig, Hashtable hashTblPeriod, HashTblOvertimeDetail hashTblOvertimeDetail) {
        //String untukTestSaja="";
        if (fromDate == null || toDate == null || employee_id.length() == 0 || payrollCalculatorConfig == null || attdConfig == null || leaveConfig == null) {
            return new Vector();
        }
         //jika mm
                          long propFormatDatePresent = -1;
                            try {
                                 propFormatDatePresent = Long.parseLong(com.dimata.system.entity.system.PstSystemProperty.getValueByName("FORMAT_DATE_PRESENT"));
                            } catch (Exception ex) {

                            }     
        int intLateToleransi =0;
            try{
                String sintLateToleransi = com.dimata.system.entity.system.PstSystemProperty.getValueByName("VALUE_LATE_TOLERANSI"); 
                intLateToleransi = Integer.parseInt(sintLateToleransi);
             }catch(Exception ex){
                 System.out.println("VALUE_LATE_TOLERANSI NOT Be SET"+ex);
                
             } 
        //update by satrya 2014-03-10
        if (payrollCalculatorConfig != null) {
            payrollCalculatorConfig.loadEmpCategoryInsentif();
        }
        long oidSecCategoryNight = 0;//hanya cuti full day jika fullDayLeave = 0
    try {
        oidSecCategoryNight = Long.parseLong(PstSystemProperty.getValueByName("CONFIGURATION_SCH_CATEGORY_NIGHT_WORKER"));
    } catch (Exception ex) {

        //System.out.println("Execption PAYROLL_INSENTIF_MAX_LEVEL: " + ex);
        System.out.println("<blink>PAYROLL_INSENTIF_MAX_LEVEL NOT TO BE SET</blink>");
    }
        String whereClausePresence = " (1=1) ";
        if (fromDate != null && toDate != null) {
            //update by satrya 2012-10-15
            if (fromDate.getTime() > toDate.getTime()) {
                Date tempFromDate = fromDate;
                Date tempToDate = toDate;
                fromDate = tempToDate;
                toDate = tempFromDate;
            }

            whereClausePresence = whereClausePresence + " AND PS." + PstPresence.fieldNames[PstPresence.FLD_PRESENCE_DATETIME] + " BETWEEN \"" + Formater.formatDate(fromDate, "yyyy-MM-dd HH:mm:00") + "\" AND \"" + Formater.formatDate(toDate, "yyyy-MM-dd HH:mm:59") + "\"";

            whereClausePresence = whereClausePresence + "  AND (( HE." + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED]
                    + " = " + PstEmployee.YES_RESIGN + " AND " + "HE. " + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED_DATE]
                    + " BETWEEN \"" + Formater.formatDate(fromDate, "yyyy-MM-dd  00:00:00") + "\"" + " AND " + "\"" + Formater.formatDate(toDate, "yyyy-MM-dd  23:59:59") + "\""
                    + " ) OR (HE." + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED]
                    + " = " + PstEmployee.NO_RESIGN + "))";
        }
        if (employee_id != null && employee_id.length() > 0) {
            whereClausePresence = whereClausePresence + " AND HE." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID] + " IN(" + employee_id + ")";
        }

        String orderPresence = PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_NUM] + "," + PstPresence.fieldNames[PstPresence.FLD_PRESENCE_DATETIME] + "," + PstPresence.fieldNames[PstPresence.FLD_SCHEDULE_DATETIME];
        Vector listPresencePersonalInOutOk = PstPresence.listPresenceForSummaryAttd(orderPresence, whereClausePresence + " AND PS." + PstPresence.fieldNames[PstPresence.FLD_STATUS] + " NOT IN(" + Presence.STATUS_IN + "," + Presence.STATUS_OUT + "," + Presence.STATUS_INVALID + ")", null);
        Hashtable hasTblSchedule = PstScheduleSymbol.getHashTlScheduleAll();
        Hashtable breakTimeDuration = PstScheduleSymbol.getBreakTimeDuration();
        Vector listReason = PstReason.list(0, 0, PstReason.fieldNames[PstReason.FLD_FLAG_IN_PAY_INPUT] + "=" + PstReason.SHOW_REASON_IN_PAY_INPUT_YES, PstReason.fieldNames[PstReason.FLD_REASON] + " ASC ");
        Hashtable hashReasonNoReason = new Hashtable();
        String wherex= oidSecCategoryNight!=0?PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_CATEGORY_ID]+"="+oidSecCategoryNight:null;
        Hashtable listSchCatLongSifht = wherex==null?null:PstScheduleSymbol.getHashTblSchedule(0, 0, wherex, "");
       
        try {
            if (listReason != null && listReason.size() > 0) {
                for (int idxRea = 0; idxRea < listReason.size(); idxRea++) {
                    Reason reason = (Reason) listReason.get(idxRea);
                    hashReasonNoReason.put("" + reason.getNo(), reason);
                }
            }
            //reason = PstReason.fetchExc(oidReason);

        } catch (Exception exception) {
            System.out.println("error getReasonId" + exception);
        }
        DBResultSet dbrs = null;
        Vector list = new Vector();
        try {
            Vector listPeriod = PstPeriod.getListStartEndDatePeriod(fromDate, toDate);
            String sql = "SELECT HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , HEP."
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " , "
                    + " EMP." + PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID] + " ,"
                    + " EMP." + PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID] + " , "
                    //update by satrya 2014-02-10
                    + "EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMP_CATEGORY_ID] + " , ";
            String periodId = "";
            boolean cekMaxMonth = false;//inisilaisai awal pengambilan maxMonth
            Hashtable cekIdxSama = new Hashtable();
            if (listPeriod != null && listPeriod.size() > 0) {
                //update by satrya 2014-01-22
                Hashtable hashCekTglSama = new Hashtable();

                for (int idxPeriod = 0; idxPeriod < listPeriod.size(); idxPeriod++) {
                    Period period = (Period) listPeriod.get(idxPeriod);
                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);

                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();

                    if (listPeriod.size() == 1) {

                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//+ 86400000);//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = (Date) fromDate.clone();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }
                    int idxFieldName = cloneFromDate.getDate();

                    // update by satrya 2014-01-22 for(int idxDt=0; idxDt<=itDate;idxDt++){
                    // int idxFieldName = fromDate.getDate()+idxDt;
                    int idxDt = 0;
                    do {
                        if (idxFieldName > maxMonth) {
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }

                        if (!cekIdxSama.containsKey(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1])) {
                            sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1] + ", "
                                    + " IF(((p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY) < p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + "),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " -  INTERVAL(DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY)) AS SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1] + " , ";


                            cekIdxSama.put(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1], PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                        }
                        idxFieldName = idxFieldName + 1;
                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);
                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start

                }
                periodId = periodId.substring(0, periodId.length() - 2);
                sql = sql.substring(0, sql.length() - 2);
                sql = sql
                        + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS HEP "
                        + " INNER JOIN " + PstPeriod.TBL_HR_PERIOD + " AS p ON p." + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " INNER JOIN " + PstEmployee.TBL_HR_EMPLOYEE + " AS EMP ON EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " WHERE HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " IN ( " + periodId + ")"
                        + " AND HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " IN ( " + employee_id + ")";

                sql = sql + " ORDER BY HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " ASC ";
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();
                long empId = 0;
                PayInputPresence payInputPresence = new PayInputPresence();
                cekMaxMonth = false;
                Period period = new Period();
                long currPeriodId = 0;
                Hashtable hashPeriod = new Hashtable();
                //int countSts=0;

                int dayOffSchedule = 0;
                int totalInsentif = 0;

                int presenceOnTime = 0;
                float timePresenceOnTime = 0;
                
                int TotalOnlyIn = 0;
                float timeOnlyIn = 0;
                
                int TotalOnlyOut = 0;
                float timeOnlyOut = 0;
                
                int nightAllowance = 0;
                int transportAllowance = 0;
                
                long timeWorkHour=0;

                int totalLate = 0;
                float timeLate = 0;

                int totalEarlyHome = 0;
                float timeEarlyHome = 0;

                int totalLateEarly = 0;
                float timeLateEarly = 0;

                double totalReason = 0;//ini bersifat dinamis
                double timeReason = 0;//ini bersifat dinamis

                int totalAbs = 0;
                float timeAbs = 0;

                int totalWorkingDays = 0;
                Hashtable hashReasonIdx = new Hashtable();
                Hashtable hashReasonTime = new Hashtable();
                while (rs.next()) {
                    currPeriodId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]);
                    if (period.getOID() != currPeriodId) {
                        period = (Period) hashPeriod.get("" + currPeriodId);
                        if (period == null) {
                            if (currPeriodId != 0 && (hashTblPeriod != null && hashTblPeriod.get(currPeriodId) != null)) {
                                period = (Period) hashTblPeriod.get(currPeriodId);
                            }
                            hashPeriod.put("" + currPeriodId, period);
                        }
                    }
                    empId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]);
                    if (payInputPresence.getEmployeeId() != empId) {
                        payInputPresence = new PayInputPresence();

                        dayOffSchedule = 0;
                        totalInsentif = 0;

                        presenceOnTime = 0;
                        timePresenceOnTime = 0;

                        
                        
                        totalLate = 0;
                        timeLate = 0;

                        totalEarlyHome = 0;
                        timeEarlyHome = 0;

                        totalLateEarly = 0;
                        timeLateEarly = 0;

                        
                        TotalOnlyIn = 0;
                        timeOnlyIn = 0;
                
                        TotalOnlyOut = 0;
                        timeOnlyOut = 0;
                
                        totalReason = 0;//ini bersifat dinamis
                        timeReason = 0;//ini bersifat dinamis

                        totalAbs = 0;
                        timeAbs = 0;

                        totalWorkingDays = 0;
                        hashReasonIdx = new Hashtable();
                        hashReasonTime = new Hashtable();
                        payInputPresence.setEmployeeId(empId);
                        cekMaxMonth = false;
                        hashCekTglSama = new Hashtable();
                        list.add(payInputPresence);
                    }

                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    //jika pencariannya hanya d dalam 1 periode
                    if (listPeriod.size() == 1) {
                        //update by satrya 2013-09-13
                        //kasusu jika user memilih tanggal 21 agustus s/d 11 september hanya sampai 10 september saja yg di hitung
                        // diffStartToFinish = (toDate.getTime() - fromDate.getTime())
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = new Date();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }

                    int idxFieldName = cloneFromDate.getDate();
                    //update by satrya 2013-08-15
                    //kasusnya jika user memilih tanggal 20 juni s/d 21 juli masih di temukan yg tanggal 21 juni buka juli
                    // for(int idxDt=0; idxDt<=itDate;idxDt++){
                    // update by satrya 2014-01-22 karena hari terakhir tidak d baca for(int idxDt=0; idxDt<itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;
                        if (idxFieldName > maxMonth) {
                            //di update karena exception d tanggal 31
                            //if(idxFieldName > maxMonth){
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }
                        try {
                            long oidSch1St = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                            Date actualIn = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]));
                            Date actualOut = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]));
                            //untukTestSaja = untukTestSaja + rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1])+",";
                            if (hashCekTglSama.size() == 0 || !hashCekTglSama.containsKey(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))) {


                                //mencari dayOffSch
                                //long schId = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && vctSchIDOff.containsKey(""+oidSch1St)) {
                                    //update by satrya 2014-06-09
//                                    for (int ix = 0; ix < vctSchIDOff.size(); ix++) {
//                                        long id = -1;//agar jika di pilih 0 nnti salah
//                                        if (vctSchIDOff.get(ix) != null) {
//                                            id = ((Long) vctSchIDOff.get(ix)).longValue();
//                                        }
//                                        if ((oidSch1St == id)) {
//                                            dayOffSchedule = dayOffSchedule + 1;
//                                        }
//
//                                    }
                                     dayOffSchedule = dayOffSchedule + 1;
                                    
                                }



                                //update by satrya 2013-04-30
                                Date dtSelect = rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                if (PstEmpSchedule.STATUS_PRESENCE_OK == rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1])) {
                                    //untuk karyawan
                                    //if(payrollCalculatorConfig.checkInsentif(empId, rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID]), rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]), PstEmpSchedule.STATUS_PRESENCE_OK, iPropInsentifLevel, iPropInsentifLevel, rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), lHolidays, rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))){
                                    //Date dtSelect =rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                    long religionId = rs.getLong("EMP." + PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID]);
                                    long deptId = rs.getLong("EMP." + PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]);
                                    //update by satrya 2014-02-10
                                    long empCategoryId = rs.getLong("EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMP_CATEGORY_ID]);
                                    int stsSchedule = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1]);
                                    int positionLevel = 0;
                                    if (hashPositionLevel != null && hashPositionLevel.get(empId) != null) {
                                        positionLevel = (Integer) hashPositionLevel.get(empId);
                                    }
                                    if (payrollCalculatorConfig.checkInsentif(empId, religionId, deptId, stsSchedule, positionLevel, iPropInsentifLevel, oidSch1St, hashSchOff, holidaysTable.isHoliday(religionId != 0 ? religionId : 0, dtSelect), dtSelect, hashTblOvertimeDetail, empCategoryId)) {
                                        totalInsentif = totalInsentif + 1;
                                    }
                                }



                                int stsus = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1]);
                                ScheduleSymbol scheduleSymbol  = (hasTblSchedule!=null && hasTblSchedule.size()>0)?(ScheduleSymbol) hasTblSchedule.get(oidSch1St):null;
                                
                                if ((PstEmpSchedule.STATUS_PRESENCE_OK == rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]))
                                        && (actualIn) != null && (actualOut) != null) {
                                    if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && !vctSchIDOff.containsKey(""+oidSch1St)) {
//                                        for (int ix = 0; ix < vctSchIDOff.size(); ix++) {
//                                            long id = -1;//agar jika di pilih 0 nnti salah
//                                            if (vctSchIDOff.get(ix) != null) {
//                                                id = ((Long) vctSchIDOff.get(ix)).longValue();
//                                            }
//                                            if ((oidSch1St!=0 && oidSch1St != id)) {
//                                                presenceOnTime = (presenceOnTime + 1);
//                                                timePresenceOnTime = timePresenceOnTime + PstEmpSchedule.timePresenceStatusOk(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
//                                            }
//
//                                        }
                                      //  maudiedit
                                        
                                        
                                        //update by priska 20150316
                                        
                                            Date MincloneActualIn = new Date();
                                             Date cloneActualIn = new Date();
                                                  cloneActualIn = (Date) actualIn.clone();
                                                  MincloneActualIn = (Date) cloneActualIn.clone();
                                                  MincloneActualIn.setHours(scheduleSymbol.getTimeIn().getHours() + intLateToleransi);
                                                  MincloneActualIn.setMinutes(scheduleSymbol.getTimeIn().getMinutes());
                                                  MincloneActualIn.setSeconds(scheduleSymbol.getTimeIn().getSeconds());
                                             Date MincloneActualOut = new Date();
                                             Date cloneActualOut = new Date();
                                                  cloneActualOut = (Date) actualOut.clone();
                                                  MincloneActualOut = (Date) cloneActualOut.clone();
                                                  MincloneActualOut.setHours(scheduleSymbol.getTimeOut().getHours() - intLateToleransi);
                                                  MincloneActualOut.setMinutes(scheduleSymbol.getTimeOut().getMinutes());
                                                  MincloneActualOut.setSeconds(scheduleSymbol.getTimeOut().getSeconds());
                                        
                                        if (((actualIn.getTime() <= MincloneActualIn.getTime()) && (actualIn.getTime() > scheduleSymbol.getTimeIn().getTime())) && (actualOut.getTime() >= scheduleSymbol.getTimeOut().getTime())){
                                           
                                           if ((scheduleSymbol.getWorkDays() ==0) )  {
                                                presenceOnTime = (presenceOnTime + 1);
                                                } else {
                                                presenceOnTime = (presenceOnTime + scheduleSymbol.getWorkDays());
                                           }
                                           
                                        } else if ((actualIn.getTime() <= scheduleSymbol.getTimeIn().getTime()) && (actualOut.getTime() >= MincloneActualOut.getTime())){
                                           if ((scheduleSymbol.getWorkDays() ==0) )  {
                                                presenceOnTime = (presenceOnTime + 1);
                                                } else {
                                                presenceOnTime = (presenceOnTime + scheduleSymbol.getWorkDays());
                                                }  
                                        }
                                        
                                        
                                        
                                        // presenceOnTime = (presenceOnTime + 1);
                                       if (PstEmpSchedule.timePresenceStatusOk(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration) != 1)  {
                                         timePresenceOnTime = timePresenceOnTime + PstEmpSchedule.timePresenceStatusOk(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                      } else {
                                           if ((scheduleSymbol.getWorkDays() ==0) )  {
                                               timePresenceOnTime = timePresenceOnTime + 1; 
                                           } else {
                                               timePresenceOnTime = timePresenceOnTime + scheduleSymbol.getWorkDays();   
                                           }
                                        }
                                          // night
                                         
                                        //if(PstEmpSchedule.FLD_SCHEDULE == "L1")
                                        //if(listSchCatLongSifht!=null && listSchCatLongSifht.containsKey(rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1])))
                                        if(PstEmpSchedule.FLD_SCHEDULE == "L1")
                                        {
                                            nightAllowance = nightAllowance + 1;
                                            transportAllowance = transportAllowance + 1; 
                                        }
                                    }
                                    
                                   

                                }

                                //if ((actualIn) != null && (actualOut) != null) {
                                    if (oidSch1St!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && !vctSchIDOff.containsKey(""+oidSch1St)) {
//                                        for (int ix = 0; ix < vctSchIDOff.size(); ix++) {
//                                            long id = -1;//agar jika di pilih 0 nnti salah
//                                            if (vctSchIDOff.get(ix) != null) {
//                                                id = ((Long) vctSchIDOff.get(ix)).longValue();
//                                            }
//                                            if ((oidSch1St!=0 && oidSch1St != id)) {
//                                                totalWorkingDays = (totalWorkingDays + 1);
//                                                timeWorkHour = timeWorkHour + PstEmpSchedule.timeWorkDurationHours(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
//                                            }
//
//                                        }
                                        totalWorkingDays = (totalWorkingDays + 1);
                                                timeWorkHour = timeWorkHour + PstEmpSchedule.timeWorkDurationHours(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                    }

                                //}


                                if (PstEmpSchedule.STATUS_PRESENCE_LATE == stsus) {
                                    totalLate = totalLate + 1;
                                    timeLate = timeLate + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                }

                                if (PstEmpSchedule.STATUS_PRESENCE_ONLY_IN == stsus) {
                                    TotalOnlyIn = TotalOnlyIn + 1;
                                    //timeOnlyIn = timeOnlyIn + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);

                                }

                                if (PstEmpSchedule.STATUS_PRESENCE_ONLY_OUT == stsus) {
                                    TotalOnlyOut = TotalOnlyOut + 1;
                                }
                                if (PstEmpSchedule.STATUS_PRESENCE_EARLY_HOME == stsus) {
                                    totalEarlyHome = totalEarlyHome + 1;
                                    timeEarlyHome = timeEarlyHome + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);

                                }

                                if (PstEmpSchedule.STATUS_PRESENCE_LATE_EARLY == stsus) {
                                    totalLateEarly = totalLateEarly + 1;
                                    timeLateEarly = timeLateEarly + PstEmpSchedule.timeLateDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration);
                                }
                                //konfigurasi mau menghitung mangkir
                                if (PstEmpSchedule.STATUS_PRESENCE_ABSENCE == rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1])) {
                                    totalAbs = totalAbs + 1;
                                    //long idSchOff=0;
//                        for(int ix=0;ix< vctSchIDOff.size();ix++ ){ 
//                            long idOff=-1;//agar jika di pilih 0 nnti salah
//                            if(vctSchIDOff.get(ix)!=null){
//                               idOff = ((Long)vctSchIDOff.get(ix)).longValue();
//                            }
//                               if((schOffId == idOff)){
//                                   //dayOffSchedule=dayOffSchedule+1;
//                                   break;
//                               }
//
//                       }
                                    timeAbs = timeAbs + PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration, 0);
                                }
                                //PstEmpSchedule.STATUS_PRESENCE_ABSENCE == rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1]) &&
                                if (listReason != null && listReason.size() > 0) {
                                    int nilaiReason = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1]);
                                    long periodIds = 0;//di buat 0 karna periode attednace berbeda dengan periode payrool, ini di hidden karna agar tidak merubah semuanya lagi rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]);
                                    if (hashReasonNoReason != null && hashReasonNoReason.containsKey("" + nilaiReason) && (hashReasonIdx == null || hashReasonTime == null || (hashReasonIdx != null && hashReasonIdx.containsKey(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId) == false && hashReasonTime != null && hashReasonTime.containsKey(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId) == false))) {
                                        //jika baru ada reasonId ataupun berbeda maka pasti nilainya 1
                                        totalReason = 1;
                                        timeReason = PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration, 0);
                                        hashReasonIdx.put(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId, totalReason);
                                        hashReasonTime.put(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId, timeReason);
                                    } else if (hashReasonNoReason != null && hashReasonNoReason.containsKey("" + nilaiReason) && hashReasonIdx != null && hashReasonIdx.containsKey(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId) && hashReasonTime != null && hashReasonTime.containsKey(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId)) {
                                        totalReason = (Double) hashReasonIdx.get(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId);
                                        timeReason = (Double) hashReasonTime.get(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId);
                                        totalReason = totalReason + 1;
                                        timeReason = timeReason + PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect, oidSch1St, actualIn, actualOut, empId, listPresencePersonalInOutOk, hasTblSchedule, breakTimeDuration, 0);
                                        hashReasonIdx.put(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_IDX] + "_" + nilaiReason + "_" + periodIds + "_" + empId, totalReason);
                                        hashReasonTime.put(FrmPayInput.fieldNames[FrmPayInput.FRM_FIELD_REASON_TIME] + "_" + nilaiReason + "_" + periodIds + "_" + empId, timeReason);
                                    }
                                    //totalMangkir = totalMangkir + 1;
                                    //mangkir
                                    //timeMangkir= timeMangkir + PstEmpSchedule.timeAbsenceDuration(leaveConfig, dtSelect, dtSelect,oidSch1St,actualIn,actualOut,empId,listPresencePersonalInOutOk,hasDfltSchedule,breakTimeDuration,schOffId);
                                }



                                //update by satrya 2014-01-22
                                hashCekTglSama.put(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), true);
                            }
                        } catch (Exception exc) {
                            System.out.println("error " + empId + exc);
                        }
                        payInputPresence.setEmployeeId(empId);
                        payInputPresence.setPresenceOnTime(presenceOnTime);
                       
                        if (propFormatDatePresent == 1){
                            payInputPresence.setPresenceOnTimeTime(presenceOnTime);
                        } else {
                           payInputPresence.setPresenceOnTimeTime(timePresenceOnTime);
                        }
                      //  payInputPresence.setPresenceOnTimeTime(timePresenceOnTime);
                        payInputPresence.setLate(totalLate);
                        payInputPresence.setLateTime(timeLate);
                        payInputPresence.setEarlyHome(totalEarlyHome);
                        payInputPresence.setEarlyHomeTime(timeEarlyHome);
                        payInputPresence.setLateEarly(totalLateEarly);
                        payInputPresence.setLateEarlyTime(timeLateEarly);
                        // test ...
                        //nnti diambil berdasarkan vector listReason
                        payInputPresence.setReason(hashReasonIdx);
                        payInputPresence.setReasonTime(hashReasonTime);
                        payInputPresence.setAbsence(totalAbs);
                        payInputPresence.setAbsenceTime(timeAbs);
                        payInputPresence.setDayOffSchedule(dayOffSchedule);
                        payInputPresence.setInsentif(totalInsentif);
                        payInputPresence.setTotalWorkingDays(totalWorkingDays);
                        payInputPresence.setTimeWorkHour(timeWorkHour);
                        //empScheduleReport.setTotStatus(countSts);
                        // mchen 2014-11-25
                        payInputPresence.setNightAllowance(nightAllowance);
                        payInputPresence.setTransportAllowance(transportAllowance);
                        
                        payInputPresence.setTotalOnlyIn(TotalOnlyIn);
                        //payInputPresence.setTimeOnlyIn(TotalOnlyIn);
                        payInputPresence.setTotalOnlyOut(TotalOnlyOut);
                        //payInputPresence.setTimeOnlyOut(TotalOnlyOut);
                        idxFieldName = idxFieldName + 1;
                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);

                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start
                    //}
                    //}
                }

                rs.close();
            }
            //update by satrya 2014-01-23
            //System.out.println("hanya untuk test"+untukTestSaja);
            return list;
        } catch (Exception e) {
            System.out.println("Exception get calcutaion aatendance untuk pay input" + e);
            return list;
        } finally {
            DBResultSet.close(dbrs);
        }

    }

    /**
     * Keterangan: mencari time dari late berguna di pay input create by satrya
     * 2014-04-19
     *
     * @param leaveConfig
     * @param tmpEndDate
     * @param tmpDate
     * @param oidSch1St
     * @param actualIn
     * @param actualOut
     * @param empId
     * @param hashTblSchedule
     * @param listPresencePersonalInOut
     * @param hasDfltSchedule
     * @param breakTimeDuration
     * @return me
     */
    public static float timeLateDuration(I_Leave leaveConfig, Date tmpEndDate, Date tmpDate, long oidSch1St, Date actualIn, Date actualOut, long empId, Vector listPresencePersonalInOut, Hashtable hasTblSchedule, Hashtable breakTimeDuration) {

        if (tmpDate == null || tmpEndDate == null) {
            return 0;
        }
        // String workDuration;
        long totalLate = 0;
        try {
            ScheduleSymbol scheduleSymbol = new ScheduleSymbol();

            int kk = 0;
            while (tmpDate.before(tmpEndDate) || tmpDate.equals(tmpEndDate)) {

                if (actualIn != null) {
                    actualIn.setSeconds(0);
                }

                if (actualOut != null) {
                    actualOut.setSeconds(0);
                }
                long diffStartToFinish = tmpDate.getTime() - tmpEndDate.getTime();
                int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                Date dtIdx = null;//mengetahui idx date
                for (int i = 0; i <= itDate; i++) {
                    dtIdx = new Date(tmpDate.getYear(), tmpDate.getMonth(), (tmpDate.getDate() + i));
                }


                if (scheduleSymbol != null && scheduleSymbol.getOID() != oidSch1St) {

                    if (oidSch1St != 0) {
                        try {
                            scheduleSymbol = (ScheduleSymbol) hasTblSchedule.get(oidSch1St);//PstScheduleSymbol.fetchExc(oidSch1St);
                        } catch (Exception exc) {
                        }

                    }

                } else {
                    if (scheduleSymbol == null) {

                        if (oidSch1St != 0) {
                            try {
                                scheduleSymbol = (ScheduleSymbol) hasTblSchedule.get(oidSch1St);//scheduleSymbol  = PstScheduleSymbol.fetchExc(oidSch1St);
                            } catch (Exception exc) {
                            }
                        }
                    }
                }
                //Presence presenceBreak = new Presence(); 
                //update by satrya 2014-01-23
                long totalCutiLate = 0;
                long totalLateScheduleBreak = 0;
                long preTimeInLate = 0;
                long preTimeOutLate = 0;
                if (scheduleSymbol != null && scheduleSymbol.getBreakOut() != null && scheduleSymbol.getBreakIn() != null && dtIdx != null && listPresencePersonalInOut != null && listPresencePersonalInOut.size() > 0) {
                    Date dtpresenceDateTime = null;
                    Date dtSchEmpScheduleBIn = (Date) dtIdx.clone();
                    Date dtSchEmpScheduleBOut = (Date) dtIdx.clone();
                    Presence presenceBreak = new Presence();
                    //Hashtable hashCekCutiDtPresenceSama = new Hashtable();
                    for (int bIdx = 0; bIdx < listPresencePersonalInOut.size(); bIdx++) {

                        Date dtPresenceBreakIn = null;
                        Date dtPresenceBreakOut = null;
                        long cutiTimeStartLate = 0;
                        long cutiTimeEndLate = 0;

                        long preBreakOutLate = 0;
                        long preBreakInLate = 0;
                        presenceBreak = (Presence) listPresencePersonalInOut.get(bIdx);//yang di cari harus ada leavenya 
                        //update by satrya 2012-10-17
                        if (dtSchEmpScheduleBOut != null) {
                            dtSchEmpScheduleBOut.setHours(scheduleSymbol.getBreakOut().getHours());
                            dtSchEmpScheduleBOut.setMinutes(scheduleSymbol.getBreakOut().getMinutes());
                            dtSchEmpScheduleBOut.setSeconds(0);
                        }
                        if (dtSchEmpScheduleBIn != null) {
                            dtSchEmpScheduleBIn.setHours(scheduleSymbol.getBreakIn().getHours());
                            dtSchEmpScheduleBIn.setMinutes(scheduleSymbol.getBreakIn().getMinutes());
                            dtSchEmpScheduleBIn.setSeconds(0);
                        }

                        if (presenceBreak.getPresenceDatetime() != null) {
                            //update by satrya 2012-10-17
                            dtpresenceDateTime = (Date) presenceBreak.getPresenceDatetime().clone();
                            dtpresenceDateTime.setHours(dtpresenceDateTime.getHours());
                            dtpresenceDateTime.setMinutes(dtpresenceDateTime.getMinutes());
                            dtpresenceDateTime.setSeconds(0);
                        }

                        if (presenceBreak.getPresenceDatetime() != null /* pdate by satrya 2014-01-27 presenceBreak.getScheduleDatetime() != null*/
                                && presenceBreak.getEmployeeId() == empId
                                && (DateCalc.dayDifference(presenceBreak.getPresenceDatetime(), dtIdx) == 0)) {
                            // update by satrya 2014-01-27 && (DateCalc.dayDifference(presenceBreak.getScheduleDatetime(), dtIdx) == 0)) {
                            //kenapa di buat presenceBreak.getScheduleDatetime()!=null ini berpengaruh pada DateCalc.dayDifference(presenceBreak.getScheduleDatetime() xxxx yg menyebabkan exception
                            if (presenceBreak.getStatus() == Presence.STATUS_OUT_PERSONAL) {
                                //preBreakOutX  = dtpresenceDateTime==null?0:dtpresenceDateTime.getTime();///yang di pakai mengurangi itu adalah presence PO  
                                dtPresenceBreakOut = dtpresenceDateTime;
                                //dtScheduleBO = presenceBreak.getScheduleDatetime();
                                //ispreBreakOutsdhdiambil = false;
                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;
                            } else if (presenceBreak.getStatus() == Presence.STATUS_IN_PERSONAL) {
                                dtPresenceBreakIn = presenceBreak.getPresenceDatetime();

                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;
                                //dtScheduleBI = presenceBreak.getScheduleDatetime();
                            } else if (presenceBreak.getStatus() == Presence.STATUS_OUT_ON_DUTY) {
                                dtPresenceBreakOut = null;//update by satrya 2014-01-27 presenceBreak.getPresenceDatetime();
                                //ispreBreakOutsdhdiambil = false;
                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;
                            } else if (presenceBreak.getStatus() == Presence.STATUS_CALL_BACK) {
                                dtPresenceBreakIn = null;//update by satrya 2014-01-27 presenceBreak.getPresenceDatetime();
                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;
                                //ispreBreakOutsdhdiambil = true;

                            }

                            //cek ada cuti
                            //maka yg di pakai cek keterlambatan yaitu cutinya
                            Vector vLisOverlapCuti = SessLeaveApp.checkOverLapsLeaveTakenNoTime(empId, dtIdx, dtIdx);
                            if (vLisOverlapCuti != null && vLisOverlapCuti.size() > 0) {
                                for (int idxCuti = 0; idxCuti < vLisOverlapCuti.size(); idxCuti++) {
                                    LeaveCheckTakenDateFinish leaveCheckTaken = (LeaveCheckTakenDateFinish) vLisOverlapCuti.get(idxCuti);

                                    if (leaveCheckTaken.getTakenQty() < leaveConfig.getHourOneWorkday() / leaveConfig.getHourOneWorkday()) {
                                        //artinya cuti harus kurang dari satu hari
                                        if (leaveCheckTaken.getTakenDate() != null && dtPresenceBreakOut != null && leaveCheckTaken.getTakenDate() != null
                                                && dtPresenceBreakOut.getTime() < leaveCheckTaken.getTakenDate().getTime()
                                                && (DateCalc.dayDifference(dtPresenceBreakOut, dtIdx) == 0)) {
                                            cutiTimeStartLate = leaveCheckTaken.getTakenDate().getTime() - dtPresenceBreakOut.getTime();
                                            //hashCekCutiDtPresenceSama.put(dtPresenceBreakOut, true);
                                        } else {
                                            cutiTimeStartLate = 0;
                                        }

                                        if (dtSchEmpScheduleBIn != null && dtPresenceBreakIn != null && leaveCheckTaken.getFinishDate() != null
                                                && dtPresenceBreakIn.getTime() > leaveCheckTaken.getFinishDate().getTime()
                                                && (DateCalc.dayDifference(dtPresenceBreakIn, dtIdx) == 0)) {
                                            cutiTimeEndLate = dtPresenceBreakIn.getTime() - leaveCheckTaken.getFinishDate().getTime();
                                            //hashCekCutiDtPresenceSama.put(dtPresenceBreakIn, true);
                                        } else {
                                            cutiTimeEndLate = 0;
                                        }
                                    }
                                    totalCutiLate = totalCutiLate + (cutiTimeStartLate + cutiTimeEndLate);
                                    vLisOverlapCuti.remove(idxCuti);
                                    idxCuti = idxCuti - 1;
                                }

                                //simapan tanggalnya sementara
                            } //cek di schedule presence
                            else {
                                if (presenceBreak.getScheduleDatetime() != null && presenceBreak.getPresenceDatetime() != null
                                        && presenceBreak.getEmployeeId() == empId
                                        && (DateCalc.dayDifference(presenceBreak.getPresenceDatetime(), dtIdx) == 0)) {
                                    //update by satrya 2014-01-27 && (DateCalc.dayDifference(presenceBreak.getScheduleDatetime(), dtIdx) == 0)) {x
                                    if (presenceBreak.getStatus() == Presence.STATUS_OUT_PERSONAL) {
                                        dtPresenceBreakOut = dtpresenceDateTime;
                                        if (dtSchEmpScheduleBOut != null && presenceBreak.getScheduleDatetime() != null && dtSchEmpScheduleBIn != null && dtPresenceBreakIn != null && presenceBreak.getPresenceDatetime().getTime() > dtSchEmpScheduleBIn.getTime()) {
                                            //preBreakOut = presenceBreak.getPresenceDatetime().getTime();
                                            //melewati jam brekIn padahal statusnya presencenya personal out
                                            preBreakOutLate = dtSchEmpScheduleBOut.getTime() + dtPresenceBreakIn.getTime() + (dtPresenceBreakIn.getTime() - presenceBreak.getPresenceDatetime().getTime());
                                        } else if (presenceBreak.getPresenceDatetime() != null && presenceBreak.getScheduleDatetime() != null && (presenceBreak.getPresenceDatetime().getTime() < presenceBreak.getScheduleDatetime().getTime())) { ///jika karyawan mendahului istirahat
                                            preBreakOutLate = presenceBreak.getScheduleDatetime().getTime() - presenceBreak.getPresenceDatetime().getTime();///yang di pakai mengurangi itu adalah presence PO 
                                        } else {
                                            preBreakOutLate = 0;
                                        }
                                        //simapan tanggalnya semetara
                                    } else if (presenceBreak.getStatus() == Presence.STATUS_IN_PERSONAL) {

                                        if (dtSchEmpScheduleBIn != null && dtPresenceBreakOut != null && dtPresenceBreakIn != null
                                                && dtPresenceBreakOut.getTime() > dtSchEmpScheduleBIn.getTime() && dtPresenceBreakIn.getTime() > dtSchEmpScheduleBIn.getTime()) {
                                            //karena sudah pasti melewatijam istirahatnya
                                            preBreakInLate = presenceBreak.getPresenceDatetime().getTime() - dtSchEmpScheduleBIn.getTime();
                                            //preBreakIn = presenceBreak.getPresenceDatetime().getTime() + tmpBreakDuration;
                                        } else if (dtSchEmpScheduleBOut != null && dtPresenceBreakIn != null && dtPresenceBreakIn.getTime() < dtSchEmpScheduleBOut.getTime()) {
                                            preBreakInLate = dtSchEmpScheduleBOut.getTime() - dtPresenceBreakIn.getTime();
                                        } else if (presenceBreak.getPresenceDatetime() != null && presenceBreak.getScheduleDatetime() != null && presenceBreak.getPresenceDatetime().getTime() > presenceBreak.getScheduleDatetime().getTime()) { ///jika karyawan melewati jam istirahat
                                            preBreakInLate = presenceBreak.getPresenceDatetime().getTime() - dtSchEmpScheduleBIn.getTime();
                                        } else {
                                            preBreakInLate = 0;
                                        }
                                    }

                                    totalLateScheduleBreak = totalLateScheduleBreak + (preBreakOutLate + preBreakInLate);
                                }//end else if
                            }
                        }//end for break In                          
                    }
                }

                if (scheduleSymbol != null) {
                    if (scheduleSymbol.getTimeIn() != null && actualIn != null && dtIdx != null) {
                        Date schIn = (Date) dtIdx.clone();
                        schIn.setHours(scheduleSymbol.getTimeIn().getHours());
                        schIn.setMinutes(scheduleSymbol.getTimeIn().getMinutes());

                        if (schIn != null && actualIn.getTime() > schIn.getTime()) {
                            preTimeInLate = (actualIn.getTime() - schIn.getTime());
                        } else {
                            preTimeInLate = 0;
                        }
                    }

                    if (scheduleSymbol.getTimeOut() != null && actualOut != null && dtIdx != null) {
                        Date schOut = (Date) dtIdx.clone();
                        schOut.setHours(scheduleSymbol.getTimeOut().getHours());
                        schOut.setMinutes(scheduleSymbol.getTimeOut().getMinutes());

                        if (actualOut.getTime() < schOut.getTime()) {
                            preTimeOutLate = schOut.getTime() - actualOut.getTime();
                        } else {
                            preTimeOutLate = 0;
                        }
                    }
                }

                totalLate = totalLate + ((preTimeInLate + preTimeOutLate)) + totalLateScheduleBreak + totalCutiLate;
                tmpDate = new Date(tmpDate.getTime() + 24 * 60 * 60 * 1000);
                kk = kk + 1;
            }
        } catch (Exception exc) {
            System.out.println("Exception exc totalLate" + exc);
        }
        float workDuration = ((float) (totalLate * -1) / (leaveConfig.getHourOneWorkday() * 60f * 60f * 1000f));
        return workDuration;
    }

    /**
     * create by satrya 2014-04-19 untuk menghitung time presence ok
     *
     * @param leaveConfig
     * @param tmpEndDate
     * @param tmpDate
     * @param oidSch1St
     * @param actualIn
     * @param actualOut
     * @param empId
     * @param listPresencePersonalInOut
     * @param hasDfltSchedule
     * @param breakTimeDuration
     * @return
     */
    public static float timePresenceStatusOk(I_Leave leaveConfig, Date tmpEndDate, Date tmpDate, long oidSch1St, Date actualIn, Date actualOut, long empId, Vector listPresencePersonalInOut, Hashtable hasTblSchedule, Hashtable breakTimeDuration) {
        long empIdxx = 0;//gunanya hanya untuk testy
        // String workDuration;
        long totalWOrkDur = 0;
        //Hashtable hashDtCutiAndOT=new Hashtable();
        try {
            ScheduleSymbol scheduleSymbol = new ScheduleSymbol();
            // Hashtable hashDtCuti=new Hashtable();
            int kk = 0;
            while (tmpDate.before(tmpEndDate) || tmpDate.equals(tmpEndDate)) {

                long oidSch2st = 0;///belum di pakai
                if (actualIn != null) {
                    actualIn.setSeconds(0);
                }

                if (actualOut != null) {
                    actualOut.setSeconds(0);
                }
                long diffStartToFinish = tmpDate.getTime() - tmpEndDate.getTime();
                int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                Date dtIdx = null;//mengetahui idx date
                for (int i = 0; i <= itDate; i++) {
                    dtIdx = new Date(tmpDate.getYear(), tmpDate.getMonth(), (tmpDate.getDate() + i));
                }


                if (scheduleSymbol != null && scheduleSymbol.getOID() != oidSch1St) {

                    if (oidSch1St != 0) {
                        try {
                            scheduleSymbol = (ScheduleSymbol) hasTblSchedule.get(oidSch1St);//PstScheduleSymbol.fetchExc(oidSch1St);
                        } catch (Exception exc) {
                        }

                    }

                } else {
                    if (scheduleSymbol == null) {

                        if (oidSch1St != 0) {
                            try {
                                scheduleSymbol = (ScheduleSymbol) hasTblSchedule.get(oidSch1St);//scheduleSymbol  = PstScheduleSymbol.fetchExc(oidSch1St);
                            } catch (Exception exc) {
                            }
                        }
                    }
                }


                long preBreakOut = 0;
                long preBreakIn = 0;
                long breakDuration = 0L;
                if (scheduleSymbol != null && scheduleSymbol.getBreakOut() != null && scheduleSymbol.getBreakIn() != null && dtIdx != null && listPresencePersonalInOut != null && listPresencePersonalInOut.size() > 0) {
                    Date dtSchDateTime = null;
                    Date dtpresenceDateTime = null;
                    Date dtSchEmpScheduleBIn = (Date) dtIdx.clone();
                    Date dtSchEmpScheduleBOut = (Date) dtIdx.clone();
                    long preBreakOutX = 0;
                    long preBreakInX = 0;
                    Date dtBreakOut = null;
                    Date dtBreakIn = null;
                    boolean ispreBreakOutsdhdiambil = false;
                    Presence presenceBreak = new Presence();
                    for (int bIdx = 0; bIdx < listPresencePersonalInOut.size(); bIdx++) {
                        presenceBreak = (Presence) listPresencePersonalInOut.get(bIdx);//yang di cari harus ada leavenya 
                        //update by satrya 2012-10-17
                        if (dtSchEmpScheduleBOut != null) {
                            dtSchEmpScheduleBOut.setHours(scheduleSymbol.getBreakOut().getHours());
                            dtSchEmpScheduleBOut.setMinutes(scheduleSymbol.getBreakOut().getMinutes());
                            dtSchEmpScheduleBOut.setSeconds(0);
                        }
                        if (dtSchEmpScheduleBOut != null) {
                            dtSchEmpScheduleBIn.setHours(scheduleSymbol.getBreakIn().getHours());
                            dtSchEmpScheduleBIn.setMinutes(scheduleSymbol.getBreakIn().getMinutes());
                            dtSchEmpScheduleBIn.setSeconds(0);
                        }
                        if (presenceBreak.getScheduleDatetime() != null) {
                            dtSchDateTime = (Date) presenceBreak.getScheduleDatetime().clone();
                            dtSchDateTime.setHours(dtSchDateTime.getHours());
                            dtSchDateTime.setMinutes(dtSchDateTime.getMinutes());
                            dtSchDateTime.setSeconds(0);
                        }
                        if (presenceBreak.getPresenceDatetime() != null) {
                            //update by satrya 2012-10-17
                            dtpresenceDateTime = (Date) presenceBreak.getPresenceDatetime().clone();
                            dtpresenceDateTime.setHours(dtpresenceDateTime.getHours());
                            dtpresenceDateTime.setMinutes(dtpresenceDateTime.getMinutes());
                            dtpresenceDateTime.setSeconds(0);
                        }

                        if (presenceBreak.getEmployeeId() == empId
                                && (DateCalc.dayDifference(presenceBreak.getPresenceDatetime(), dtIdx) == 0)
                                && presenceBreak.getScheduleDatetime() == null) {
                            if (presenceBreak.getStatus() == Presence.STATUS_OUT_ON_DUTY) {
                                //bOut =bOut+ "D:" +Formater.formatDate(presenceBreak.getPresenceDatetime(),"d/M/yy")+"<br>"+Formater.formatDate(presenceBreak.getPresenceDatetime(),"HH:mm")+"<br><br>";                                  
                                // dBout = bOut+ "D:" +Formater.formatDate(presenceBreak.getPresenceDatetime(),"HH:mm");
                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;

                            } else if (presenceBreak.getStatus() == Presence.STATUS_CALL_BACK) {
                                //bIn =bIn+ "D:" +Formater.formatDate(presenceBreak.getPresenceDatetime(),"d/M/yy")+ "<br>"+Formater.formatDate(presenceBreak.getPresenceDatetime(),"HH:mm")+"<br><br>";                                  
                                // dBin = dBin+ "D:" +Formater.formatDate(presenceBreak.getPresenceDatetime(),"HH:mm"); 
                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;

                            }

                        } else if (dtpresenceDateTime != null/*update by satrya 2014-01-27 presenceBreak.getScheduleDatetime() !=null*/
                                && presenceBreak.getEmployeeId() == empId
                                //update by satrya 2014-01-27 &&(DateCalc.dayDifference(presenceBreak.getScheduleDatetime(),dtIdx)==0 )){
                                && (DateCalc.dayDifference(dtpresenceDateTime, dtIdx) == 0)) {
                            //kenapa di buat presenceBreak.getScheduleDatetime()!=null ini berpengaruh pada DateCalc.dayDifference(presenceBreak.getScheduleDatetime() xxxx yg menyebabkan exception
                            if (presenceBreak.getStatus() == Presence.STATUS_OUT_PERSONAL) {
                                //update by satrya 2012-09-27
                                //if((presenceBreak.getScheduleDatetime()==null || presenceBreak.getPresenceDatetime().getTime() < presenceBreak.getScheduleDatetime().getTime())){
                                //update by satrya 2013-07-28

                                //jika sewaktu presence Out melewati schedule BI maka setlah presencenya
                                //misal sch BO & BI = 13 s/d 14 dan ada presence BO 15.00 maka yg di set 15.00 untk penguranganya
                                preBreakOutX = dtpresenceDateTime == null ? 0 : dtpresenceDateTime.getTime();///yang di pakai mengurangi itu adalah presence PO  
                                dtBreakOut = dtpresenceDateTime;
                                if (dtSchEmpScheduleBIn != null && presenceBreak.getPresenceDatetime().getTime() > dtSchEmpScheduleBIn.getTime()) {
                                    preBreakOut = presenceBreak.getPresenceDatetime().getTime();
                                } else if ((presenceBreak.getPresenceDatetime().getTime() < presenceBreak.getScheduleDatetime().getTime())) { ///jika karyawan mendahului istirahat
                                    preBreakOut = presenceBreak.getPresenceDatetime().getTime();///yang di pakai mengurangi itu adalah presence PO 

                                } else if (presenceBreak.getScheduleDatetime().getHours() == 0 && presenceBreak.getScheduleDatetime().getMinutes() == 0) {
                                    preBreakOut = presenceBreak.getPresenceDatetime().getTime();//jika schedulenya 00:00
                                } else {
                                    preBreakOut = presenceBreak.getScheduleDatetime().getTime(); //yang di pakai mengurangi adalah schedule PO
                                }

                                ispreBreakOutsdhdiambil = false;
                            } else if (presenceBreak.getStatus() == Presence.STATUS_IN_PERSONAL) {
                                //istirahat terlamabat 
                                preBreakInX = presenceBreak.getPresenceDatetime() == null ? 0 : presenceBreak.getPresenceDatetime().getTime();///yang di pakai mengurangi itu adalah presence PI
                                dtBreakIn = presenceBreak.getPresenceDatetime();
                                if (preBreakOut != 0L) {
                                    //update by satrya 2012-09-27
                                    //if(presenceBreak.getScheduleDatetime()==null || presenceBreak.getPresenceDatetime().getTime() > presenceBreak.getScheduleDatetime().getTime()){
                                    //update by satrya 2013-07-28\
                                    //misal sch BO & BI = 13 s/d 14 dan ada presence BO 15.00 maka yg di set 15.00 untk penguranganya
                                    if (dtSchEmpScheduleBIn != null && dtBreakOut != null && dtBreakIn != null
                                            && dtBreakOut.getTime() > dtSchEmpScheduleBIn.getTime() && dtBreakIn.getTime() > dtSchEmpScheduleBIn.getTime()) {
                                        //karena sudah pasti melewatijam istirahatnya
                                        long tmpBreakDuration = ((Long) breakTimeDuration.get("" + oidSch1St)).longValue();
                                        preBreakIn = presenceBreak.getPresenceDatetime().getTime() + tmpBreakDuration;
                                    } else if (presenceBreak.getPresenceDatetime().getTime() > presenceBreak.getScheduleDatetime().getTime()) { ///jika karyawan melewati jam istirahat
                                        preBreakIn = presenceBreak.getPresenceDatetime().getTime();///yang di pakai mengurangi itu adalah presence PI
                                    } else if (presenceBreak.getScheduleDatetime().getHours() == 0 && presenceBreak.getScheduleDatetime().getMinutes() == 0) {
                                        preBreakIn = presenceBreak.getPresenceDatetime().getTime(); //jika schedulenya 00:00 
                                    } else {
                                        preBreakIn = presenceBreak.getScheduleDatetime().getTime(); //yang di pakai mengurangi adalah schedule PI
                                    }

                                    breakDuration = breakDuration + (preBreakIn - preBreakOut);


                                    ispreBreakOutsdhdiambil = true;
                                    preBreakOut = 0L;

                                    //breakDuration = breakDuration + presenceBreak.getPresenceDatetime().getTime()-  preBOut.getPresenceDatetime().getTime(); 
                                    // preBOut=null;
                                }
                                // diffBi = diffBi+ (presenceBreak.getScheduleDatetime().getTime() - presenceBreak.getPresenceDatetime().getTime());

                            } else if (presenceBreak.getStatus() == Presence.STATUS_OUT_ON_DUTY) {
                                dtBreakOut = null;//update by satrya 2014-01-27 presenceBreak.getPresenceDatetime();
                                ispreBreakOutsdhdiambil = false;
                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;
                            } else if (presenceBreak.getStatus() == Presence.STATUS_CALL_BACK) {
                                dtBreakIn = null;//update by satrya 2014-01-27 presenceBreak.getPresenceDatetime();
                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;
                                ispreBreakOutsdhdiambil = true;

                            }

                            if (ispreBreakOutsdhdiambil) {
                                preBreakOutX = 0L;
                                preBreakInX = 0L;
                                dtBreakOut = null;
                                dtBreakIn = null;
                            }
                        }//end else if
                    }//end for break In                          
                    //update by satrya 2012-10-18
                    //jika di loop tersebut tidak cocok maka di kurangi schedulenya
                    if (breakDuration == 0 && oidSch1St != 0 && breakTimeDuration.get("" + oidSch1St) != null) {  //&& sPresenceDateTime.equals(pSelectedDate)){
                        try {
                            breakDuration = ((Long) breakTimeDuration.get("" + oidSch1St)).longValue(); //scheduleSymbol.getBreakIn().getTime()  - scheduleSymbol.getBreakOut().getTime(); 
                        } catch (Exception ex) {
                            System.out.println("Exception scheduleSymbol" + ex.toString());
                            //System.out.println("date"+presenceReportDaily.getSelectedDate()+ presenceReportDaily.getEmpFullName());
                        }
                    }
                } //jika employee tidak ada yang keluar maka akan di potong jam istirahat default
                else {
                    if (breakDuration == 0 && oidSch1St != 0 && breakTimeDuration.get("" + oidSch1St) != null) {  //&& sPresenceDateTime.equals(pSelectedDate)){
                        try {
                            breakDuration = ((Long) breakTimeDuration.get("" + oidSch1St)).longValue(); //scheduleSymbol.getBreakIn().getTime()  - scheduleSymbol.getBreakOut().getTime(); 
                        } catch (Exception ex) {
                            System.out.println("Exception scheduleSymbol" + ex.toString());
                            //System.out.println("date"+presenceReportDaily.getSelectedDate()+ presenceReportDaily.getEmpFullName());
                        }
                    }
                }
                //update by satrya 2014-01-24
                long breakOvertime = 0;

                if (actualIn != null && actualOut != null && dtIdx != null) {
                    //update by satrya 2014-02-11
                    //jika melebihi dari 8 jam kerja maka akan di setting 8 jam kerja
                    float total = ((actualOut.getTime() - (breakDuration + breakOvertime)) - actualIn.getTime()) / (leaveConfig.getHourOneWorkday() / leaveConfig.getHourOneWorkday() * 60f * 60f * 1000f);
                    if (total > leaveConfig.getHourOneWorkday()) {
                        totalWOrkDur = totalWOrkDur + (long) (leaveConfig.getHourOneWorkday() * 60L * 60L * 1000L);
                    } else {
                        totalWOrkDur = totalWOrkDur + (actualOut.getTime() - (breakDuration + breakOvertime)) - actualIn.getTime();
                    }
                    //totalWOrkDur = totalWOrkDur + (actualOut.getTime()-(breakDuration + breakOvertime))-actualIn.getTime();
                } else {
                    //jika actual In dan Out tidak ada maka dianggap tidak dihitung
                    //jika dia harinya OFF dan ada tgs kantor
        /*if(scheduleSymbol!=null && scheduleSymbol.getOID()==oidScheduleOff){
                     totalWOrkDur = totalWOrkDur + Math.abs(breakPresence);
                     }else{*/
                    totalWOrkDur = totalWOrkDur + 0;
                    //}
                }
                tmpDate = new Date(tmpDate.getTime() + 24 * 60 * 60 * 1000);
                kk = kk + 1;
                // empIdxx=empId;
            }
        } catch (Exception exc) {
            System.out.println("Exception exc timeWorkDuration" + exc + empIdxx);
            totalWOrkDur = 0;
        }
        //System.out.println("No emp: " +empIdxx); 
        float workDuration = ((float) totalWOrkDur / (leaveConfig.getHourOneWorkday() * 60f * 60f * 1000f));
        //String workDuration= Formater.formatWorkDayHoursMinutes((float)totalWOrkDur/(8f*60f*60f*1000f),leaveConfig.getHourOneWorkday(),leaveConfig.getFormatLeave());
        return workDuration;
    }

    public static float timeAbsenceDuration(I_Leave leaveConfig, Date tmpEndDate, Date tmpDate, long oidSch1St, Date actualIn, Date actualOut, long empId, Vector listPresencePersonalInOut, Hashtable hasTblSchedule, Hashtable breakTimeDuration, long oidScheduleOff) {

        // String workDuration;
        long totalAbsence = 0;
        if(String.valueOf(empId).equalsIgnoreCase("504404530473672020")){
            boolean x =true;
        }
        if(Formater.formatDate(tmpDate, "yyyy-MM-dd").equalsIgnoreCase("2014-02-21")){
            boolean x =true;
        }
        try {
            ScheduleSymbol scheduleSymbol = new ScheduleSymbol();
            // Hashtable hashDtCuti=new Hashtable();
            int kk = 0;
            Hashtable hashTglYgSama = new Hashtable();
            Hashtable hashSisaCutiKemarin = new Hashtable();
            while (tmpDate.before(tmpEndDate) || tmpDate.equals(tmpEndDate)) {

                //int kk = tmpDate.getDate()-1;
                long breakPresence = 0;
                long cuti = 0;
                long oidSch2st = 0;
                if (actualIn != null) {
                    actualIn.setSeconds(0);
                }

                if (actualOut != null) {
                    actualOut.setSeconds(0);
                }
                long diffStartToFinish = tmpDate.getTime() - tmpEndDate.getTime();
                int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                Date dtIdx = null;//mengetahui idx date
                for (int i = 0; i <= itDate; i++) {
                    dtIdx = new Date(tmpDate.getYear(), tmpDate.getMonth(), (tmpDate.getDate() + i));
                }


                if (scheduleSymbol != null && scheduleSymbol.getOID() != oidSch1St) {

                    if (oidSch1St != 0) {
                        try {
                            scheduleSymbol = (ScheduleSymbol) hasTblSchedule.get(oidSch1St);//PstScheduleSymbol.fetchExc(oidSch1St);
                        } catch (Exception exc) {
                        }

                    }

                } else {
                    if (scheduleSymbol == null) {

                        if (oidSch1St != 0) {
                            try {
                                scheduleSymbol = (ScheduleSymbol) hasTblSchedule.get(oidSch1St);//scheduleSymbol  = PstScheduleSymbol.fetchExc(oidSch1St);
                            } catch (Exception exc) {
                            }
                        }
                    }
                }

                long preBreakOut = 0;
                long preBreakIn = 0;
                long breakDuration = 0L;
                long preLateTimeIn = 0;
                long preLateTimeOut = 0;
                long totalCuti = 0;
                boolean cekAdaCuti = false;
                long tidakAdaInOut = 0;

                Vector vLisOverlapCuti = SessLeaveApp.checkOverLapsLeaveTakenNoTime(empId, dtIdx, dtIdx);
                Vector vListOverlapCutiSame = (Vector) vLisOverlapCuti.clone();
                if (vLisOverlapCuti != null && vLisOverlapCuti.size() > 0) {
                    cekAdaCuti = true;
                    for (int idxCuti = 0; idxCuti < vLisOverlapCuti.size(); idxCuti++) {
                        LeaveCheckTakenDateFinish leaveCheckTaken = (LeaveCheckTakenDateFinish) vLisOverlapCuti.get(idxCuti);
                        Date planCutiStart = leaveCheckTaken.getTakenDate();
                        if (leaveCheckTaken.getTakenQty() <= leaveConfig.getHourOneWorkday() / leaveConfig.getHourOneWorkday()) {
                            totalCuti = totalCuti + (long) (leaveCheckTaken.getTakenQty() * leaveConfig.getHourOneWorkday() * 60 * 60 * 1000);
                        } else {

                            if (hashTglYgSama != null && (hashTglYgSama.size() == 0 || !hashTglYgSama.containsKey(planCutiStart))) {

                                totalCuti = totalCuti + (long) (leaveConfig.getHourOneWorkday() * 60 * 60 * 1000);
                                float jumlahSisa = leaveCheckTaken.getTakenQty() - (leaveConfig.getHourOneWorkday() / leaveConfig.getHourOneWorkday());
                                hashSisaCutiKemarin.put(planCutiStart, jumlahSisa);
                                hashTglYgSama.put(planCutiStart, true);
                            } else if (hashSisaCutiKemarin != null && hashTglYgSama != null && hashTglYgSama.size() > 0
                                    && hashSisaCutiKemarin.size() > 0 && hashTglYgSama.containsKey(planCutiStart)) {
                                float sisaCutiDiTglSama = (Float) hashSisaCutiKemarin.get(planCutiStart);
                                if (sisaCutiDiTglSama <= leaveConfig.getHourOneWorkday() / leaveConfig.getHourOneWorkday()) {
                                    totalCuti = totalCuti + (long) (sisaCutiDiTglSama * leaveConfig.getHourOneWorkday() * 60 * 60 * 1000);
                                } else {
                                    float sisaCutiDiTglSamaII = Math.abs(sisaCutiDiTglSama - leaveConfig.getHourOneWorkday() / leaveConfig.getHourOneWorkday());
                                    hashSisaCutiKemarin.remove(planCutiStart);
                                    hashTglYgSama.remove(planCutiStart);

                                    hashSisaCutiKemarin.put(planCutiStart, sisaCutiDiTglSamaII);
                                    hashTglYgSama.put(planCutiStart, true);
                                }
                            }

                        }
                        vLisOverlapCuti.remove(idxCuti);
                        idxCuti = idxCuti - 1;
                    }

                    //simapan tanggalnya sementara
                }
                Date dtSchDateTime = null;
                if (scheduleSymbol != null && scheduleSymbol.getBreakOut() != null && scheduleSymbol.getBreakIn() != null && dtIdx != null && listPresencePersonalInOut != null && listPresencePersonalInOut.size() > 0) {
                    dtSchDateTime = null;
                    Date dtpresenceDateTime = null;
                    Date dtSchEmpScheduleBIn = (Date) dtIdx.clone();
                    Date dtSchEmpScheduleBOut = (Date) dtIdx.clone();
                    long preBreakOutX = 0;
                    long preBreakInX = 0;
                    Date dtBreakOut = null;
                    Date dtBreakIn = null;
                    boolean ispreBreakOutsdhdiambil = false;
                    Presence presenceBreak = new Presence();
                    for (int bIdx = 0; bIdx < listPresencePersonalInOut.size(); bIdx++) {
                        presenceBreak = (Presence) listPresencePersonalInOut.get(bIdx);//yang di cari harus ada leavenya 
                        //update by satrya 2012-10-17
                        if (dtSchEmpScheduleBOut != null) {
                            dtSchEmpScheduleBOut.setHours(scheduleSymbol.getBreakOut().getHours());
                            dtSchEmpScheduleBOut.setMinutes(scheduleSymbol.getBreakOut().getMinutes());
                            dtSchEmpScheduleBOut.setSeconds(0);
                        }
                        if (dtSchEmpScheduleBIn != null) {
                            dtSchEmpScheduleBIn.setHours(scheduleSymbol.getBreakIn().getHours());
                            dtSchEmpScheduleBIn.setMinutes(scheduleSymbol.getBreakIn().getMinutes());
                            dtSchEmpScheduleBIn.setSeconds(0);
                        }
                        if (presenceBreak.getScheduleDatetime() != null) {
                            dtSchDateTime = (Date) presenceBreak.getScheduleDatetime().clone();
                            dtSchDateTime.setHours(dtSchDateTime.getHours());
                            dtSchDateTime.setMinutes(dtSchDateTime.getMinutes());
                            dtSchDateTime.setSeconds(0);
                        }
                        if (presenceBreak.getPresenceDatetime() != null) {
                            //update by satrya 2012-10-17
                            dtpresenceDateTime = (Date) presenceBreak.getPresenceDatetime().clone();
                            dtpresenceDateTime.setHours(dtpresenceDateTime.getHours());
                            dtpresenceDateTime.setMinutes(dtpresenceDateTime.getMinutes());
                            dtpresenceDateTime.setSeconds(0);
                        }

                        //cek ada cuti
                        if (vListOverlapCutiSame != null && vListOverlapCutiSame.size() > 0) {
                        } else if (dtpresenceDateTime != null/*update by satrya 2014-01-27 presenceBreak.getScheduleDatetime() !=null*/
                                && presenceBreak.getEmployeeId() == empId
                                //update by satrya 2014-01-27 &&(DateCalc.dayDifference(presenceBreak.getScheduleDatetime(),dtIdx)==0 )){
                                && (DateCalc.dayDifference(dtpresenceDateTime, dtIdx) == 0)) {
                            //kenapa di buat presenceBreak.getScheduleDatetime()!=null ini berpengaruh pada DateCalc.dayDifference(presenceBreak.getScheduleDatetime() xxxx yg menyebabkan exception
                            if (presenceBreak.getStatus() == Presence.STATUS_OUT_PERSONAL) {
                                //update by satrya 2012-09-27
                                //if((presenceBreak.getScheduleDatetime()==null || presenceBreak.getPresenceDatetime().getTime() < presenceBreak.getScheduleDatetime().getTime())){
                                //update by satrya 2013-07-28

                                //jika sewaktu presence Out melewati schedule BI maka setlah presencenya
                                //misal sch BO & BI = 13 s/d 14 dan ada presence BO 15.00 maka yg di set 15.00 untk penguranganya
                                preBreakOutX = dtpresenceDateTime == null ? 0 : dtpresenceDateTime.getTime();///yang di pakai mengurangi itu adalah presence PO  
                                dtBreakOut = dtpresenceDateTime;
                                if (dtSchEmpScheduleBIn != null && presenceBreak.getPresenceDatetime().getTime() > dtSchEmpScheduleBIn.getTime()) {
                                    preBreakOut = Math.abs(presenceBreak.getPresenceDatetime().getTime() - dtSchEmpScheduleBIn.getTime());
                                } else if (presenceBreak.getScheduleDatetime() != null && (presenceBreak.getPresenceDatetime().getTime() < presenceBreak.getScheduleDatetime().getTime())) { ///jika karyawan mendahului istirahat
                                    preBreakOut = Math.abs(presenceBreak.getPresenceDatetime().getTime() - presenceBreak.getScheduleDatetime().getTime());///yang di pakai mengurangi itu adalah presence PO 

                                } else if (presenceBreak.getScheduleDatetime() != null && presenceBreak.getScheduleDatetime().getHours() == 0 && presenceBreak.getScheduleDatetime().getMinutes() == 0) {
                                    preBreakOut = Math.abs(presenceBreak.getPresenceDatetime().getTime() - presenceBreak.getScheduleDatetime().getTime());//jika schedulenya 00:00
                                }

                                ispreBreakOutsdhdiambil = false;
                            } else if (presenceBreak.getStatus() == Presence.STATUS_IN_PERSONAL) {
                                //istirahat terlamabat 
                                preBreakInX = presenceBreak.getPresenceDatetime() == null ? 0 : presenceBreak.getPresenceDatetime().getTime();///yang di pakai mengurangi itu adalah presence PI
                                dtBreakIn = presenceBreak.getPresenceDatetime();
                                ///kasusnya misalkan dia hanya terlambat di presence In personal if(preBreakOut !=0L){   
                                if (dtSchEmpScheduleBIn != null && dtBreakOut != null && dtBreakIn != null
                                        && dtBreakOut.getTime() > dtSchEmpScheduleBIn.getTime() && dtBreakIn.getTime() > dtSchEmpScheduleBIn.getTime()) {
                                    //karena sudah pasti melewatijam istirahatnya

                                    //long  tmpBreakDuration = ((Long)breakTimeDuration.get(""+oidSch1St)).longValue();
                                    preBreakIn = presenceBreak.getPresenceDatetime().getTime() - dtSchEmpScheduleBIn.getTime();
                                } else if (presenceBreak.getScheduleDatetime() != null && presenceBreak.getPresenceDatetime().getTime() > presenceBreak.getScheduleDatetime().getTime()) { ///jika karyawan melewati jam istirahat
                                    preBreakIn = Math.abs(presenceBreak.getPresenceDatetime().getTime() - presenceBreak.getScheduleDatetime().getTime());///yang di pakai mengurangi itu adalah presence PI
                                } else if (presenceBreak.getScheduleDatetime() != null && presenceBreak.getScheduleDatetime().getHours() == 0 && presenceBreak.getScheduleDatetime().getMinutes() == 0) {
                                    preBreakIn = Math.abs(presenceBreak.getPresenceDatetime().getTime() - presenceBreak.getScheduleDatetime().getTime()); //jika schedulenya 00:00 
                                }
                                breakDuration = breakDuration + (preBreakIn - preBreakOut);


                                ispreBreakOutsdhdiambil = true;
                                preBreakOut = 0L;

                                //breakDuration = breakDuration + presenceBreak.getPresenceDatetime().getTime()-  preBOut.getPresenceDatetime().getTime(); 
                                // preBOut=null;
                                // }
                                // diffBi = diffBi+ (presenceBreak.getScheduleDatetime().getTime() - presenceBreak.getPresenceDatetime().getTime());

                            } else if (presenceBreak.getStatus() == Presence.STATUS_OUT_ON_DUTY) {
                                dtBreakOut = null;//update by satrya 2014-01-27 presenceBreak.getPresenceDatetime();
                                ispreBreakOutsdhdiambil = false;
                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;
                            } else if (presenceBreak.getStatus() == Presence.STATUS_CALL_BACK) {
                                dtBreakIn = null;//update by satrya 2014-01-27 presenceBreak.getPresenceDatetime();
                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;
                                ispreBreakOutsdhdiambil = true;

                            }

                            if (ispreBreakOutsdhdiambil) {
                                preBreakOutX = 0L;
                                preBreakInX = 0L;
                                dtBreakOut = null;
                                dtBreakIn = null;
                            }
                        }//end else if
                    }//end for break In                          

                }



                if (scheduleSymbol != null && !cekAdaCuti && dtIdx != null) {
                    if (scheduleSymbol.getTimeIn() != null && actualIn != null) {
                        Date schIn = (Date) dtIdx.clone();
                        schIn.setHours(scheduleSymbol.getTimeIn().getHours());
                        schIn.setMinutes(scheduleSymbol.getTimeIn().getMinutes());

                        if (schIn != null && actualIn.getTime() > schIn.getTime()) {
                            preLateTimeIn = Math.abs((actualIn.getTime() - schIn.getTime()));
                        } else {
                            preLateTimeIn = 0;
                        }
                    }

                    if (scheduleSymbol.getTimeOut() != null && actualOut != null && dtIdx != null) {
                        Date schOut = (Date) dtIdx.clone();
                        schOut.setHours(scheduleSymbol.getTimeOut().getHours());
                        schOut.setMinutes(scheduleSymbol.getTimeOut().getMinutes());

                        if (actualOut.getTime() < schOut.getTime()) {
                            preLateTimeOut = Math.abs(schOut.getTime() - actualOut.getTime());
                        } else {
                            preLateTimeOut = 0;
                        }
                    }
                    //jika hari libur maka tidak d hitung absence
                    if (oidSch1St != 0 && oidScheduleOff != oidSch1St && scheduleSymbol.getTimeIn() != null && scheduleSymbol.getTimeOut() != null && actualOut == null && actualIn == null) {
                        tidakAdaInOut = tidakAdaInOut + (long) (leaveConfig.getHourOneWorkday() * 60 * 60 * 1000);
                    }
                }


                totalAbsence = totalAbsence + ((preLateTimeIn + preLateTimeOut)) + breakDuration + totalCuti + tidakAdaInOut;
                //totalAbsence = totalAbsence + ((totalLateIn + totalLateOut))+ breakPresence + ((totalLateIn + totalLateOut)<0? istirahat: (Math.abs(istirahat))*-1);

                tmpDate = new Date(tmpDate.getTime() + 24 * 60 * 60 * 1000);
                kk = kk + 1;
            }
        } catch (Exception exc) {
            System.out.println("Exception exc totalAbsence "+ empId + " Date:"+""+tmpDate + exc);
            totalAbsence = 0;
        }
        float absenceTime = ((float) (totalAbsence * -1) / (leaveConfig.getHourOneWorkday() * 60f * 60f * 1000f));
        return absenceTime;
    }

    /**
     * Keterangan: untuk mencari schedule OId berdasarkan start end finsiih date
     *
     * @param fromDate
     * @param toDate
     * @param employee_id
     * @return
     */
    public static Vector getListSchedule(Date fromDate, Date toDate, long employee_id) {

        DBResultSet dbrs = null;
        Vector list = new Vector();
        if (fromDate == null || toDate == null || employee_id == 0) {
            return list;
        }
        try {
            Vector listPeriod = PstPeriod.getListStartEndDatePeriod(fromDate, toDate);
            String sql = "SELECT HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , HEP."
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " , ";
            String periodId = "";
            boolean cekMaxMonth = false;//inisilaisai awal pengambilan maxMonth
            Hashtable cekIdxSama = new Hashtable();
            if (listPeriod != null && listPeriod.size() > 0) {
                Hashtable hashCekTglSama = new Hashtable();
                for (int idxPeriod = 0; idxPeriod < listPeriod.size(); idxPeriod++) {
                    Period period = (Period) listPeriod.get(idxPeriod);
                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);

                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();


                    /*update by satrya 2014-01-24 if(listPeriod.size()==1){
                     diffStartToFinish = (toDate.getTime() - fromDate.getTime());
                     }
                     else if(cekMaxMonth){
                     diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime()+ 86400000);//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                     }else{
                     diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                     }*/
                    if (listPeriod.size() == 1) {
                        //update by satrya 2013-09-13
                        //kasusu jika user memilih tanggal 21 agustus s/d 11 september hanya sampai 10 september saja yg di hitung
                        // diffStartToFinish = (toDate.getTime() - fromDate.getTime())
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//+ 86400000);//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }

                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = (Date) fromDate.clone();
                    int idxFieldName = cloneFromDate.getDate();

                    //update by satrya 2014-01-24 for(int idxDt=0; idxDt<=itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;

                        if (idxFieldName > maxMonth) {
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }

                        if (!cekIdxSama.containsKey(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1])) {
                            sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1] + ", "
                                    + " IF(((p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY) < p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + "),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " -  INTERVAL(DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY)) AS SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1] + " , ";


                            cekIdxSama.put(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1], PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                        }
                        idxFieldName = idxFieldName + 1;
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);
                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start

                }
                periodId = periodId.substring(0, periodId.length() - 2);
                sql = sql.substring(0, sql.length() - 2);
                sql = sql
                        + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS HEP "
                        + " INNER JOIN " + PstPeriod.TBL_HR_PERIOD + " AS P ON p." + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " WHERE HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " IN ( " + periodId + ")"
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " IN ( " + employee_id + ")";

                sql = sql + " ORDER BY " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " ASC ";
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();
                long empId = 0;
                EmpScheduleReport empScheduleReport = new EmpScheduleReport();
                cekMaxMonth = false;
                Period period = new Period();
                long currPeriodId = 0;
                Hashtable hashPeriod = new Hashtable();
                int countSts = 0;
                while (rs.next()) {
                    currPeriodId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]);
                    if (period.getOID() != currPeriodId) {
                        period = (Period) hashPeriod.get("" + currPeriodId);
                        if (period == null) {
                            period = PstPeriod.fetchExc(currPeriodId);
                            hashPeriod.put("" + currPeriodId, period);
                        }
                    }
                    empId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]);
                    if (empScheduleReport.getEmployeeId() != empId) {
                        empScheduleReport = new EmpScheduleReport();
                        countSts = 0;
                        empScheduleReport.setEmployeeId(empId);
                        cekMaxMonth = false;
                        hashCekTglSama = new Hashtable();
                        list.add(empScheduleReport);
                    }

                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    //jika pencariannya hanya d dalam 1 periode

                    /* update by satrya 2014-01-24 if(listPeriod.size()==1){
                     diffStartToFinish = (toDate.getTime() - fromDate.getTime());
                     }
                     else if(cekMaxMonth){
                     diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime() );//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                     }else{
                     diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                     }*/
                    if (listPeriod.size() == 1) {
                        //update by satrya 2013-09-13
                        //kasusu jika user memilih tanggal 21 agustus s/d 11 september hanya sampai 10 september saja yg di hitung
                        // diffStartToFinish = (toDate.getTime() - fromDate.getTime())
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }

                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = new Date();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }

                    int idxFieldName = cloneFromDate.getDate();
                    //update by satrya 2014-01-24 for(int idxDt=0; idxDt<=itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;
                        if (idxFieldName > maxMonth) {
                            //di update karena exception d tanggal 31
                            //if(idxFieldName > maxMonth){
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }
                        //update by satrya 2014-01-24
                        if (hashCekTglSama.size() == 0 || !hashCekTglSama.containsKey(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))) {
                            empScheduleReport.addDtDate(DBHandler.convertDate(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1])));
                            empScheduleReport.addEmpSchedules1st(rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]));
                            //update by satrya 2014-01-24
                            hashCekTglSama.put(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), true);
                        }
                        idxFieldName = idxFieldName + 1;

                        //update by satrya 2014-01-24
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);

                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start
                    //}
                    //}
                }

                rs.close();
            }

            return list;
        } catch (Exception e) {
            System.out.println("Exception" + e);
            return list;
        } finally {
            DBResultSet.close(dbrs);
        }

    }

    /**
     * mencari list attendance yag di pilih user
     *
     * @param fromDate
     * @param toDate
     * @param employee_id
     * @param status
     * @return
     */
    public static Vector getListAttendace(Date fromDate, Date toDate, String employee_id, int reason, int status, Hashtable hashPeriodTbl, Hashtable vctSchIDOff) {
        String untukTestSaja = "";
        DBResultSet dbrs = null;
        Vector list = new Vector();
        try {
            Vector listPeriod = PstPeriod.getListStartEndDatePeriod(fromDate, toDate);
            String sql = "SELECT HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , HEP."
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " , ";
            String periodId = "";
            boolean cekMaxMonth = false;//inisilaisai awal pengambilan maxMonth
            Hashtable cekIdxSama = new Hashtable();
            if (listPeriod != null && listPeriod.size() > 0) {
                //update by satrya 2014-01-22
                Hashtable hashCekTglSama = new Hashtable();

                for (int idxPeriod = 0; idxPeriod < listPeriod.size(); idxPeriod++) {
                    Period period = (Period) listPeriod.get(idxPeriod);
                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    //long xtest = toDate.getTime() - fromDate.getTime();
                    //int itDateTest = Integer.parseInt(String.valueOf(xtest / 86400000));
                    //int xyz = itDateTest;
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    //jika pencariannya hanya d dalam 1 periode

                    if (listPeriod.size() == 1) {
                        //update by satrya 2013-09-13
                        //kasusu jika user memilih tanggal 21 agustus s/d 11 september hanya sampai 10 september saja yg di hitung
                        // diffStartToFinish = (toDate.getTime() - fromDate.getTime())
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//+ 86400000);//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = (Date) fromDate.clone();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }
                    int idxFieldName = cloneFromDate.getDate();

                    // update by satrya 2014-01-22 for(int idxDt=0; idxDt<=itDate;idxDt++){
                    // int idxFieldName = fromDate.getDate()+idxDt;
                    int idxDt = 0;
                    do {
                        if (idxFieldName > maxMonth) {
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }

                        if (!cekIdxSama.containsKey(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1])) {
                            sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1] + ", "
                                    + " IF(((p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY) < p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + "),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " -  INTERVAL(DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY)) AS SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1] + " , ";


                            cekIdxSama.put(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1], PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                        }
                        idxFieldName = idxFieldName + 1;
                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);
                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start

                }
                periodId = periodId.substring(0, periodId.length() - 2);
                sql = sql.substring(0, sql.length() - 2);
                sql = sql
                        + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS HEP "
                        + " INNER JOIN " + PstPeriod.TBL_HR_PERIOD + " AS p ON p." + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " WHERE HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " IN ( " + periodId + ")"
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " IN ( " + employee_id + ")";

                sql = sql + " ORDER BY " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " ASC ";
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();
                long empId = 0;
                EmpScheduleReport empScheduleReport = new EmpScheduleReport();
                cekMaxMonth = false;
                Period period = new Period();
                long currPeriodId = 0;
                Hashtable hashPeriod = new Hashtable();
                int countSts = 0;
                while (rs.next()) {
                    currPeriodId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]);
                    if (period.getOID() != currPeriodId) {
                        period = (Period) hashPeriod.get("" + currPeriodId);
                        if (period == null) {
                            //update by satrya 2014-02-03
                            if (currPeriodId != 0 && (hashPeriodTbl != null && hashPeriodTbl.get(currPeriodId) != null)) {
                                period = (Period) hashPeriodTbl.get(currPeriodId);
                            }
                            //period  = PstPeriod.fetchExc(currPeriodId);
                            hashPeriod.put("" + currPeriodId, period);
                        }
                    }
                    empId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]);
                    if (empScheduleReport.getEmployeeId() != empId) {
                        empScheduleReport = new EmpScheduleReport();
                        countSts = 0;
                        empScheduleReport.setEmployeeId(empId);
                        cekMaxMonth = false;
                        hashCekTglSama = new Hashtable();
                        list.add(empScheduleReport);
                    }

                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    //jika pencariannya hanya d dalam 1 periode
                    if (listPeriod.size() == 1) {
                        //update by satrya 2013-09-13
                        //kasusu jika user memilih tanggal 21 agustus s/d 11 september hanya sampai 10 september saja yg di hitung
                        // diffStartToFinish = (toDate.getTime() - fromDate.getTime())
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = new Date();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }

                    int idxFieldName = cloneFromDate.getDate();
                    //update by satrya 2013-08-15
                    //kasusnya jika user memilih tanggal 20 juni s/d 21 juli masih di temukan yg tanggal 21 juni buka juli
                    // for(int idxDt=0; idxDt<=itDate;idxDt++){
                    // update by satrya 2014-01-22 karena hari terakhir tidak d baca for(int idxDt=0; idxDt<itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;
                        if (idxFieldName > maxMonth) {
                            //di update karena exception d tanggal 31
                            //if(idxFieldName > maxMonth){
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }
                        //update by satrya 2013-04-30
                        //update by satrya 2014-01-23
                        try {
                            untukTestSaja = untukTestSaja + rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]) + ",";
                            if (hashCekTglSama.size() == 0 || !hashCekTglSama.containsKey(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))) {
                                Date actualIn = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]));
                                Date actualOut = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]));
                                long schLoop = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                if ((PstEmpSchedule.STATUS_PRESENCE_OK == rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]))
                                        && (actualIn) != null && (actualOut) != null) {
                                    if (schLoop!=0 && vctSchIDOff != null && vctSchIDOff.size() > 0 && !vctSchIDOff.containsKey(""+schLoop) ) {
                                        
//                                        for (int ix = 0; ix < vctSchIDOff.size(); ix++) {
//                                            long id = -1;//agar jika di pilih 0 nnti salah
//                                            if (vctSchIDOff.get(ix) != null) {
//                                                id = ((Long) vctSchIDOff.get(ix)).longValue();
//                                            }
//                                            if ((schLoop != id)) {
//                                                empScheduleReport.addDtDate(DBHandler.convertDate(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1])));
//                                                empScheduleReport.addEmpSchedules1st(rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]));
//                                                empScheduleReport.addEmpIn1st(DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1])));
//                                                empScheduleReport.addEmpOut1st(DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1])));
//                                                empScheduleReport.addEmpReason1st(rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldName - 1]));
//                                                empScheduleReport.addEmpReason1st(rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]));
//
//
//                                                countSts = countSts + 1;
//                                            }
//
//                                        }
                                        empScheduleReport.addDtDate(DBHandler.convertDate(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1])));
                                                empScheduleReport.addEmpSchedules1st(rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]));
                                                empScheduleReport.addEmpIn1st(DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1])));
                                                empScheduleReport.addEmpOut1st(DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1])));
                                                empScheduleReport.addEmpReason1st(rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldName - 1]));
                                                empScheduleReport.addEmpReason1st(rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]));


                                                countSts = countSts + 1;
                                    }

                                }
//                   if( status == rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]) ){
//                       
//                          //int idt = Integer.parseInt(fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1));SCH_DATE
//                          empScheduleReport.addDtDate(DBHandler.convertDate(rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1])));
//                          empScheduleReport.addEmpSchedules1st(rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]));
//                          empScheduleReport.addEmpIn1st(DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN +  idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN +  idxFieldName - 1])));
//                          empScheduleReport.addEmpOut1st(DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT +  idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT +  idxFieldName - 1])));
//                          empScheduleReport.addEmpReason1st(rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldName - 1]));
//                          empScheduleReport.addEmpReason1st(rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]));
//                   
//                         
//                             countSts = countSts + 1;
//                         }
                                //update by satrya 2014-01-22
                                hashCekTglSama.put(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), true);
                            }
                        } catch (Exception exc) {
                            System.out.println("error " + empId + exc);
                        }
                        empScheduleReport.setTotStatus(countSts);
                        idxFieldName = idxFieldName + 1;
                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);

                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start
                    //}
                    //}
                }

                rs.close();
            }
            //update by satrya 2014-01-23
            //System.out.println("hanya untuk test"+untukTestSaja);
            return list;
        } catch (Exception e) {
            System.out.println("Exception" + e);
            return list;
        } finally {
            DBResultSet.close(dbrs);
        }

    }

    public static Hashtable getListAttendaceReason(Date fromDate, Date toDate, String whereClause, int reason, int status, Hashtable hashPeriodTbl) {
        String untukTestSaja = "";
        DBResultSet dbrs = null;
        Hashtable list = new Hashtable();
        try {
            Vector listPeriod = PstPeriod.getListStartEndDatePeriod(fromDate, toDate);
            String sql = "SELECT HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , HEP."
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " , ";
            String periodId = "";
            boolean cekMaxMonth = false;//inisilaisai awal pengambilan maxMonth
            Hashtable cekIdxSama = new Hashtable();
            if (listPeriod != null && listPeriod.size() > 0) {
                //update by satrya 2014-01-22
                Hashtable hashCekTglSama = new Hashtable();

                for (int idxPeriod = 0; idxPeriod < listPeriod.size(); idxPeriod++) {
                    Period period = (Period) listPeriod.get(idxPeriod);
                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    long xtest = toDate.getTime() - fromDate.getTime();
                    int itDateTest = Integer.parseInt(String.valueOf(xtest / 86400000));
                    int xyz = itDateTest;
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    if (listPeriod.size() == 1) {
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime());
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//+ 86400000);//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = (Date) fromDate.clone();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }

                    int idxFieldName = cloneFromDate.getDate();

                    //update by satrya 2014-01-22 for(int idxDt=0; idxDt<=itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;

                        if (idxFieldName > maxMonth) {
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }

                        if (!cekIdxSama.containsKey(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1])) {
                            sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1] + ", "
                                    + " IF(((p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY) < p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + "),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " -  INTERVAL(DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY)) AS SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1] + " , ";


                            cekIdxSama.put(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1], PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                        }
                        idxFieldName = idxFieldName + 1;
                        //upsdate by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);
                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start

                }
                periodId = periodId.substring(0, periodId.length() - 2);
                sql = sql.substring(0, sql.length() - 2);
                sql = sql
                        + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS HEP "
                        + " INNER JOIN " + PstPeriod.TBL_HR_PERIOD + " AS p ON p." + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        /*+ " WHERE HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                         + " IN ( " + periodId + ")"
                         + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                         + " IN ( " + employee_id + ")";*/
                        //update by satrya 2013-06-6
                        + " INNER JOIN " + PstEmployee.TBL_HR_EMPLOYEE + " AS HE ON HE." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " INNER JOIN " + PstDepartment.TBL_HR_DEPARTMENT + " AS DEPT ON DEPT." + PstDepartment.fieldNames[PstDepartment.FLD_DEPARTMENT_ID] + "=HE." + PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]
                        + " LEFT JOIN  " + PstSection.TBL_HR_SECTION + " AS SEC ON SEC." + PstSection.fieldNames[PstSection.FLD_SECTION_ID] + "=HE." + PstEmployee.fieldNames[PstEmployee.FLD_SECTION_ID]
                        + " WHERE HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " IN ( " + periodId + ")";
                /*+ " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                 + " IN ( " + employee_id + ")"*/
                if (whereClause != null && whereClause.length() > 0) {
                    sql = sql + " AND " + whereClause;
                };

                sql = sql + " ORDER BY " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " ASC ";
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();
                long empId = 0;
                EmpScheduleReport empScheduleReport = new EmpScheduleReport();
                cekMaxMonth = false;
                Period period = new Period();
                long currPeriodId = 0;
                Hashtable hashPeriod = new Hashtable();
                int reasonSts = 0;
                while (rs.next()) {
                    currPeriodId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]);
                    if (period.getOID() != currPeriodId) {
                        period = (Period) hashPeriod.get("" + currPeriodId);
                        if (period == null) {
                            //update by satrya 2014-02-03
                            if (currPeriodId != 0 && (hashPeriodTbl != null && hashPeriodTbl.get(currPeriodId) != null)) {
                                period = (Period) hashPeriodTbl.get(currPeriodId);
                            }
                            //period  = PstPeriod.fetchExc(currPeriodId);
                            hashPeriod.put("" + currPeriodId, period);
                        }
                    }
                    empId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]);
                    if (empScheduleReport.getEmployeeId() != empId) {
                        empScheduleReport = new EmpScheduleReport();
                        empScheduleReport.setEmployeeId(empId);
                        reasonSts = 0;
                        cekMaxMonth = false;
                        hashCekTglSama = new Hashtable();
                        list.put("" + empId, empScheduleReport);
                    }

                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    if (listPeriod.size() == 1) {
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime());
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = new Date();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }

                    int idxFieldName = cloneFromDate.getDate();
                    //update by satrya 2013-08-15
                    //kasusnya jika user memilih tanggal 20 juni s/d 21 juli masih di temukan yg tanggal 21 juni buka juli
                    // for(int idxDt=0; idxDt<=itDate;idxDt++){
                    //update by satrya 2014-01-22  for(int idxDt=0; idxDt<itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;
                        if (idxFieldName > maxMonth) {
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(fromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }
                        //update by satrya 2013-04-30
                        //update by satrya 2014-01-22
                        try {
                            untukTestSaja = untukTestSaja + rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]) + ",";
                            if (hashCekTglSama.size() == 0 || !hashCekTglSama.containsKey(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))) {
                                if (reason == rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldName - 1])) {
                                    empScheduleReport.addDtDate(DBHandler.convertDate(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1])));
                                    empScheduleReport.addEmpSchedules1st(rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]));
                                    empScheduleReport.addEmpIn1st(DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1])));
                                    empScheduleReport.addEmpOut1st(DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1])));
                                    empScheduleReport.addEmpReason1st(rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldName - 1]));
                                    empScheduleReport.addEmpReason1st(rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]));


                                    reasonSts = reasonSts + 1;
                                }
                                //update by satrya 2014-01-22
                                hashCekTglSama.put(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), true);
                            }
                        } catch (Exception exc) {
                            System.out.println("Exc " + empId + " " + exc);
                        }
                        empScheduleReport.setTotReason(reasonSts);
                        idxFieldName = idxFieldName + 1;

                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);

                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start
                    //}
                    //}
                }

                rs.close();
            }
            //update by satrya 2014-01-23
            //System.out.println("list Attd Reason"+untukTestSaja);
            return list;
        } catch (Exception e) {
            System.out.println("Exception" + e);
            return list;

        } finally {
            DBResultSet.close(dbrs);
        }

    }

    /**
     * Keterangan : ,emcari workddays duration dengan parameter status yg bukan
     * not prosess
     *
     * @param fromDate
     * @param toDate
     * @param employee_id
     * @param reason
     * @param status
     * @return
     */
    public static Vector getListWorkDays(Date fromDate, Date toDate, String employee_id, int reason, int status, Hashtable hashTblPeriod) {
        String untukTestSaja = "";
        DBResultSet dbrs = null;
        Vector list = new Vector();
        long oidHolidays = 0;
        try {
            String soidHoliday = PstSystemProperty.getValueByName("OID_PUBLIC_HOLIDAY");
            if (soidHoliday != null && soidHoliday.length() > 0) {
                oidHolidays = Long.parseLong(soidHoliday);
            }
        } catch (Exception exc) {
            oidHolidays = 0;
        }
//update by satrya 2013-10-1
        long oidDayOff = 0;
        try {
            String sOidDayOff = PstSystemProperty.getValueByName("OID_DAY_OFF");
            if (sOidDayOff != null && sOidDayOff.length() > 0) {
                oidDayOff = Long.parseLong(sOidDayOff);
            }
        } catch (Exception exc) {
            oidHolidays = 0;
        }
        I_Atendance attdConfig = null;
        try {
            attdConfig = (I_Atendance) (Class.forName(PstSystemProperty.getValueByName("ATTENDANCE_CONFIG")).newInstance());
        } catch (Exception e) {
            System.out.println("Exception : " + e.getMessage());
            System.out.println("Please contact your system administration to setup system property: ATTENDANCE_CONFIG ");
        }
        try {
            Vector listPeriod = PstPeriod.getListStartEndDatePeriod(fromDate, toDate);
            String sql = "SELECT HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , HEP."
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " , ";
            String periodId = "";
            boolean cekMaxMonth = false;//inisilaisai awal pengambilan maxMonth
            Hashtable cekIdxSama = new Hashtable();
            if (listPeriod != null && listPeriod.size() > 0) {
                //update by satrya 2014-01-22
                Hashtable hashCekTglSama = new Hashtable();

                for (int idxPeriod = 0; idxPeriod < listPeriod.size(); idxPeriod++) {
                    Period period = (Period) listPeriod.get(idxPeriod);
                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    long xtest = toDate.getTime() - fromDate.getTime();
                    int itDateTest = Integer.parseInt(String.valueOf(xtest / 86400000));
                    int xyz = itDateTest;
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    //jika pencariannya hanya d dalam 1 periode
                    if (listPeriod.size() == 1) {
                        //update by satrya 2013-09-13
                        //kasusu jika user memilih tanggal 21 agustus s/d 11 september hanya sampai 10 september saja yg di hitung
                        // diffStartToFinish = (toDate.getTime() - fromDate.getTime())
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//+ 86400000);//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }

                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = (Date) fromDate.clone();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }
                    int idxFieldName = cloneFromDate.getDate();

                    //Date cloneFromDate = (Date) fromDate.clone();
                    //int idxFieldName = cloneFromDate.getDate();

                    //update by satrya 2014-01-22 for(int idxDt=0; idxDt<=itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;

                        if (idxFieldName > maxMonth) {
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }

                        if (!cekIdxSama.containsKey(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1])) {
                            sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1] + ", "
                                    + " IF(((p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY) < p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + "),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " -  INTERVAL(DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY)) AS SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1] + " , ";


                            cekIdxSama.put(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1], PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                        }
                        idxFieldName = idxFieldName + 1;
                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);
                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start

                }
                periodId = periodId.substring(0, periodId.length() - 2);
                sql = sql.substring(0, sql.length() - 2);
                sql = sql
                        + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS HEP "
                        + " INNER JOIN " + PstPeriod.TBL_HR_PERIOD + " AS p ON p." + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        /*+ " WHERE HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                         + " IN ( " + periodId + ")"
                         + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                         + " IN ( " + employee_id + ")";*/
                        //update by satrya 2013-06-6
                        /* + " INNER JOIN " +PstEmployee.TBL_HR_EMPLOYEE + " AS HE ON HE."+PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]+"=HEP."+PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                         + " INNER JOIN " +PstDepartment.TBL_HR_DEPARTMENT +" AS DEPT ON DEPT."+PstDepartment.fieldNames[PstDepartment.FLD_DEPARTMENT_ID] +"=HE."+PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]
                         + " LEFT JOIN  " +PstSection.TBL_HR_SECTION + " AS SEC ON SEC."+PstSection.fieldNames[PstSection.FLD_SECTION_ID]+ "=HE."+PstEmployee.fieldNames[PstEmployee.FLD_SECTION_ID]*/
                        + " WHERE HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " IN ( " + periodId + ")"
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " IN ( " + employee_id + ")";

                sql = sql + " ORDER BY " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " ASC ";
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();
                long empId = 0;
                EmpScheduleReport empScheduleReport = new EmpScheduleReport();
                cekMaxMonth = false;
                Period period = new Period();
                long currPeriodId = 0;
                Hashtable hashPeriod = new Hashtable();
                int countSts = 0;
                int countReason = 0;
                while (rs.next()) {
                    currPeriodId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]);
                    if (period != null && period.getOID() != currPeriodId) {
                        period = (Period) hashPeriod.get("" + currPeriodId);
                        if (period == null) {
                            //update by satrya 2014-02-03
                            if (currPeriodId != 0 && (hashTblPeriod != null && hashTblPeriod.get(currPeriodId) != null)) {
                                period = (Period) hashTblPeriod.get(currPeriodId);
                            }
                            hashPeriod.put("" + currPeriodId, period);
                        }
                    }
                    empId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]);
                    if (empScheduleReport.getEmployeeId() != empId) {
                        empScheduleReport = new EmpScheduleReport();
                        empScheduleReport.setEmployeeId(empId);
                        cekMaxMonth = false;
                        countSts = 0;
                        //    cekIdxSama = new Hashtable();
                        //update by satrya 2014-01-22
                        hashCekTglSama = new Hashtable();
                        list.add(empScheduleReport);
                    }

                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    //jika pencariannya hanya d dalam 1 periode
                    if (listPeriod.size() == 1) {
                        //update by satrya 2013-09-13
                        //kasusu jika user memilih tanggal 21 agustus s/d 11 september hanya sampai 10 september saja yg di hitung
                        // diffStartToFinish = (toDate.getTime() - fromDate.getTime())
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = new Date();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }

                    int idxFieldName = cloneFromDate.getDate();
                    //update by satrya 2013-08-15
                    //kasusnya jika user memilih tanggal 20 juni s/d 21 juli masih di temukan yg tanggal 21 juni buka juli
                    // for(int idxDt=0; idxDt<=itDate;idxDt++){
                    //update by satrya 2014-01-22 for(int idxDt=0; idxDt<itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;
                        if (idxFieldName > maxMonth) {
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(fromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }

                        // int idt = Integer.parseInt(fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1));
                        //update by satrya 2013-10-01
                        //jika schedulenya off maka tidak dihitung
                        //update by satrya 2014-01-22
                        try {
                            untukTestSaja = untukTestSaja + rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]) + ",";
                            if (hashCekTglSama.size() == 0 || !hashCekTglSama.containsKey(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))) {
                                if (attdConfig != null && attdConfig.getConfigurasiWorkingDays(oidDayOff, rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]), rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]))) {

                                    empScheduleReport.addDtDate(DBHandler.convertDate(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1])));
                                    empScheduleReport.addEmpSchedules1st(rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]));
                                    empScheduleReport.addEmpIn1st(DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1])));
                                    empScheduleReport.addEmpOut1st(DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1])));
                                    empScheduleReport.addEmpReason1st(rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldName - 1]));
                                    empScheduleReport.addEmpReason1st(rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]));
                                    if (status != rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldName - 1]) && oidHolidays != rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1])) {
                                        countSts = countSts + 1;
                                    }
                                    /*if(reason != rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldName - 1]) ){
                                     countReason = countReason + 1;
                                     }*/
                                    empScheduleReport.setTotStatus(countSts);
                                }
                                hashCekTglSama.put(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), true);
                            }
                        } catch (Exception exc) {
                            System.out.println("Error " + empId + " " + exc);
                        }

                        //empScheduleReport.setTotReason(countReason);
                        idxFieldName = idxFieldName + 1;

                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);

                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start
                    //}
                    //}
                }

                rs.close();
            }
            //update by satrya 2014-01-23
            //System.out.println("Work Days"+untukTestSaja);
            return list;
        } catch (Exception e) {
            System.out.println("Exception" + e);
            return new Vector();

        } finally {
            DBResultSet.close(dbrs);
        }

    }

    /**
     * Create by satrya 2014-03-07 Keterangan: untuk mencari schedule
     *
     * @param fromDate
     * @param toDate
     * @param employee_id
     * @param hashTblPeriod
     * @return
     */
    public static Hashtable getSchedule(Date fromDate, Date toDate, String employee_id, Hashtable hashTblPeriod) {
        DBResultSet dbrs = null;
        Hashtable hashList = new Hashtable();

        try {
            Vector listPeriod = PstPeriod.getListStartEndDatePeriod(fromDate, toDate);
            String sql = "SELECT HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , HEP."
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " , ";
            String periodId = "";
            boolean cekMaxMonth = false;//inisilaisai awal pengambilan maxMonth
            Hashtable cekIdxSama = new Hashtable();
            if (listPeriod != null && listPeriod.size() > 0) {
                //update by satrya 2014-01-22
                Hashtable hashCekTglSama = new Hashtable();

                for (int idxPeriod = 0; idxPeriod < listPeriod.size(); idxPeriod++) {
                    Period period = (Period) listPeriod.get(idxPeriod);
                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    long xtest = toDate.getTime() - fromDate.getTime();
                    int itDateTest = Integer.parseInt(String.valueOf(xtest / 86400000));
                    int xyz = itDateTest;
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    //jika pencariannya hanya d dalam 1 periode
                    if (listPeriod.size() == 1) {
                        //update by satrya 2013-09-13
                        //kasusu jika user memilih tanggal 21 agustus s/d 11 september hanya sampai 10 september saja yg di hitung
                        // diffStartToFinish = (toDate.getTime() - fromDate.getTime())
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//+ 86400000);//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }

                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = (Date) fromDate.clone();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }
                    int idxFieldName = cloneFromDate.getDate();

                    //Date cloneFromDate = (Date) fromDate.clone();
                    //int idxFieldName = cloneFromDate.getDate();

                    //update by satrya 2014-01-22 for(int idxDt=0; idxDt<=itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;

                        if (idxFieldName > maxMonth) {
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(cloneFromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }

                        if (!cekIdxSama.containsKey(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1])) {
                            sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                                    + ", " + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]
                                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_IN + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_OUT + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_STATUS + idxFieldName - 1] + ", "
                                    + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldName - 1] + ", "
                                    + " IF(((p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY) < p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + "),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + " - INTERVAL (DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_END_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY),"
                                    + " (p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + " -  INTERVAL(DAYOFMONTH(p." + PstPeriod.fieldNames[PstPeriod.FLD_START_DATE] + ") - " + (PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1)) + ") DAY)) AS SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1] + " , ";


                            cekIdxSama.put(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1], PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                        }
                        idxFieldName = idxFieldName + 1;
                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);
                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start

                }
                periodId = periodId.substring(0, periodId.length() - 2);
                sql = sql.substring(0, sql.length() - 2);
                sql = sql
                        + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS HEP "
                        + " INNER JOIN " + PstPeriod.TBL_HR_PERIOD + " AS p ON p." + PstPeriod.fieldNames[PstPeriod.FLD_PERIOD_ID] + "=HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        /*+ " WHERE HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                         + " IN ( " + periodId + ")"
                         + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                         + " IN ( " + employee_id + ")";*/
                        //update by satrya 2013-06-6
                        /* + " INNER JOIN " +PstEmployee.TBL_HR_EMPLOYEE + " AS HE ON HE."+PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]+"=HEP."+PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                         + " INNER JOIN " +PstDepartment.TBL_HR_DEPARTMENT +" AS DEPT ON DEPT."+PstDepartment.fieldNames[PstDepartment.FLD_DEPARTMENT_ID] +"=HE."+PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]
                         + " LEFT JOIN  " +PstSection.TBL_HR_SECTION + " AS SEC ON SEC."+PstSection.fieldNames[PstSection.FLD_SECTION_ID]+ "=HE."+PstEmployee.fieldNames[PstEmployee.FLD_SECTION_ID]*/
                        + " WHERE HEP." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " IN ( " + periodId + ")"
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " IN ( " + employee_id + ")";

                sql = sql + " ORDER BY " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " , " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + " ASC ";
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();
                long empId = 0;
                EmployeeSchedule employeeSchedule = new EmployeeSchedule();
                cekMaxMonth = false;
                Period period = new Period();
                long currPeriodId = 0;
                Hashtable hashPeriod = new Hashtable();
                int countSts = 0;

                while (rs.next()) {
                    currPeriodId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]);
                    if (period != null && period.getOID() != currPeriodId) {
                        period = (Period) hashPeriod.get("" + currPeriodId);
                        if (period == null) {
                            //update by satrya 2014-02-03
                            if (currPeriodId != 0 && (hashTblPeriod != null && hashTblPeriod.get(currPeriodId) != null)) {
                                period = (Period) hashTblPeriod.get(currPeriodId);
                            }
                            hashPeriod.put("" + currPeriodId, period);
                        }
                    }
                    empId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]);
                    if (employeeSchedule.getEmployeeId() != empId) {
                        //Date selected = DBHandler.convertDate(rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]));
                        employeeSchedule = new EmployeeSchedule();
                        employeeSchedule.setEmployeeId(empId);
                        cekMaxMonth = false;
                        countSts = 0;
                        //    cekIdxSama = new Hashtable();
                        //update by satrya 2014-01-22
                        hashCekTglSama = new Hashtable();
                        hashList.put("" + empId, employeeSchedule);
                    }

                    Calendar calendar = Calendar.getInstance();
                    if (cekMaxMonth) {
                        calendar.setTime(period.getStartDate());
                    } else {
                        calendar.setTime(fromDate);
                    }
                    int maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                    long diffStartToFinish = 0;//toDate.getTime() - fromDate.getTime();
                    //pengecekan yg mana yg akan di pakai sebagai pengurang
                    //jika pencariannya hanya d dalam 1 periode
                    if (listPeriod.size() == 1) {
                        //update by satrya 2013-09-13
                        //kasusu jika user memilih tanggal 21 agustus s/d 11 september hanya sampai 10 september saja yg di hitung
                        // diffStartToFinish = (toDate.getTime() - fromDate.getTime())
                        diffStartToFinish = (toDate.getTime() - fromDate.getTime()) /* update by satrya 2014-01-23 karena kelebihan 1 hari jadinya + 1000 * 60 * 60 * 24*/;
                    } else if (cekMaxMonth) {
                        diffStartToFinish = (toDate.getTime() - period.getStartDate().getTime());//di tambah 1 hari karena misalkan kita mencari tagnggal 21 maret smpe 3 mei tpi 3 meinya tdk kehitung
                    } else {
                        diffStartToFinish = period.getEndDate().getTime() - fromDate.getTime();
                    }
                    int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                    periodId = periodId + period.getOID() + ", ";
                    Date cloneFromDate = new Date();
                    if (cekMaxMonth) {
                        cloneFromDate = (Date) period.getStartDate().clone();
                    } else {
                        cloneFromDate = (Date) fromDate.clone();
                    }

                    int idxFieldName = cloneFromDate.getDate();
                    //update by satrya 2013-08-15
                    //kasusnya jika user memilih tanggal 20 juni s/d 21 juli masih di temukan yg tanggal 21 juni buka juli
                    // for(int idxDt=0; idxDt<=itDate;idxDt++){
                    //update by satrya 2014-01-22 for(int idxDt=0; idxDt<itDate;idxDt++){
                    int idxDt = 0;
                    do {
                        // int idxFieldName = fromDate.getDate()+idxDt;
                        if (idxFieldName > maxMonth) {
                            idxFieldName = 1;
                            // fromDate.setDate(1);
                            cloneFromDate.setDate(1);
                            cloneFromDate.setMonth(cloneFromDate.getMonth() + 1);
                            //fromDate.setYear(reason);
                            calendar = Calendar.getInstance();
                            calendar.setTime(fromDate);
                            maxMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
                        }

                        // int idt = Integer.parseInt(fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1].substring(1));
                        //update by satrya 2013-10-01
                        //jika schedulenya off maka tidak dihitung
                        //update by satrya 2014-01-22
                        try {
                            // untukTestSaja = untukTestSaja + rs.getDate("SCH_DATE_"+PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]) + ",";
                            if (hashCekTglSama.size() == 0 || !hashCekTglSama.containsKey(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]))) {
                                Date dtSelected = rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                long scheduleId = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]);
                                long scheduleId2nd = rs.getLong(PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]);
                                long employeeId = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]);;
                                employeeSchedule.addEmpSchedulesId1st(dtSelected, scheduleId, employeeId);
                                employeeSchedule.addEmpSchedulesId2st(toDate, scheduleId2nd, employeeId);

                                hashCekTglSama.put(rs.getDate("SCH_DATE_" + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_CALENDAR + idxFieldName - 1]), true);
                            }
                        } catch (Exception exc) {
                            System.out.println("Error " + empId + " " + exc);
                        }

                        //empScheduleReport.setTotReason(countReason);
                        idxFieldName = idxFieldName + 1;

                        //update by satrya 2014-01-22
                        idxDt = idxDt + 1;
                    } while (idxDt <= itDate);

                    cekMaxMonth = true;//artinya sudah menggunakan berdasarkan period start
                    //}
                    //}
                }

                rs.close();
            }
            //update by satrya 2014-01-23
            //System.out.println("Work Days"+untukTestSaja);
            return hashList;
        } catch (Exception e) {
            System.out.println("Exception" + e);
            return hashList;

        } finally {
            DBResultSet.close(dbrs);
        }

    }

    /**
     * Menghitung jumlah employee schedule dengan status dan reason tertentu
     *
     * @param employeeId
     * @param periodId
     * @param dayOfMonth
     * @param stringSchStatusCode
     * @param stringReasonStatusCode
     * @return
     */
    public static int sumStatusDispString(long employeeId, long periodId, int dayOfMonth, Vector stringSchStatusCode, Vector stringReasonStatusCode) {
        if (stringSchStatusCode == null || stringSchStatusCode.size() < 1 || stringReasonStatusCode == null || stringReasonStatusCode.size() < 1) {
            return 0;
        }

        Vector intSchStatus = new Vector();
        Vector intReasonStatus = new Vector();

        /*
         for(int s=0;s< stringSchStatusCode.size();s++){
         String status = ((String)stringSchStatusCode.get(s)).intValue(); 
         int PstEmp
         }*/


        return sumStatusDisp(employeeId, periodId, dayOfMonth, intSchStatus, intReasonStatus);

    }

    public static int sumStatusDisp(long employeeId, long periodId, int dayOfMonth, Vector intSchStatus, Vector intReasonStatus) {
        DBResultSet dbrs = null;
        if (intSchStatus == null || intSchStatus.size() < 1 || intReasonStatus == null || intReasonStatus.size() < 1) {
            return 0;
        }

        try {
            String sql = "SELECT " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS3]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS4]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS5]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS6]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS7]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS8]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS9]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS10]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS11]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS12]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS13]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS14]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS15]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS16]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS17]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS18]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS19]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS20]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS21]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS22]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS23]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS24]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS25]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS26]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS27]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS28]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS29]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS30]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS31]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON1]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON3]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON4]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON5]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON6]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON7]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON8]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON9]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON10]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON11]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON12]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON13]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON14]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON15]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON16]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON17]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON18]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON19]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON20]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON21]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON22]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON23]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON24]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON25]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON26]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON27]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON28]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON29]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON30]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON31]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                    + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

            //System.out.println("sql getStatusPresence....................."+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                EmpSchedule empSchedule = new EmpSchedule();

                for (int si = 0; si < intSchStatus.size(); si++) {
                    for (int ri = 0; ri < intReasonStatus.size(); ri++) {

                        int schStatus = ((Integer) intSchStatus.get(si)).intValue();
                        int abt = ((Integer) intReasonStatus.get(ri)).intValue();


                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON1]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS3]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON3]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS4]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON4]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS5]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON5]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS6]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON6]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS7]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON7]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS8]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON8]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS9]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON9]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS10]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON10]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS11]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON11]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS12]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON12]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS13]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON13]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS14]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON14]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS15]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON15]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS16]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON16]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS17]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON17]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS18]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON18]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS19]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON19]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS20]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON20]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS21]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON21]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS22]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON22]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS23]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON23]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS24]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON24]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS25]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON25]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS26]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON26]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS27]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON27]) == abt)) {
                            count++;
                        }
                        if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS28]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON28]) == abt)) {
                            count++;
                        }
                        if (dayOfMonth > 28) {
                            if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS29]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON29]) == abt)) {
                                count++;
                            }
                            if (dayOfMonth > 29) {
                                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS30]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON30]) == abt)) {
                                    count++;
                                }
                                if (dayOfMonth > 30) {
                                    if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS31]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON31]) == abt)) {
                                        count++;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /* method ini digunakan untuk menSum reason karyawan yang abt,abrsk dan tgs ( dianggal dispensasi )
     */
    public static int getStatusDisp(long employeeId, long periodId, int dayOfMonth, int schStatus) {
        DBResultSet dbrs = null;
        int abt = 9; //absen tulis
        int abrsk = 14; //absen rusak
        int tgs = 6; // tugas
        //angka-angka ini diambil dari no PstReason
        try {
            String sql = "SELECT " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS3]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS4]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS5]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS6]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS7]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS8]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS9]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS10]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS11]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS12]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS13]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS14]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS15]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS16]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS17]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS18]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS19]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS20]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS21]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS22]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS23]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS24]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS25]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS26]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS27]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS28]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS29]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS30]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS31]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON1]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON3]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON4]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON5]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON6]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON7]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON8]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON9]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON10]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON11]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON12]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON13]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON14]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON15]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON16]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON17]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON18]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON19]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON20]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON21]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON22]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON23]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON24]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON25]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON26]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON27]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON28]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON29]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON30]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON31]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                    + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

            //System.out.println("sql getStatusPresence....................."+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                EmpSchedule empSchedule = new EmpSchedule();
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON1]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON1]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON1]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS3]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON3]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON3]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON3]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS4]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON4]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON4]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON4]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS5]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON5]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON5]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON5]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS6]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON6]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON6]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON6]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS7]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON7]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON7]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON7]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS8]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON8]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON8]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON8]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS9]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON9]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON9]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON9]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS10]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON10]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON10]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON10]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS11]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON11]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON11]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON11]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS12]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON12]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON12]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON12]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS13]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON13]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON13]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON13]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS14]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON14]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON14]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON14]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS15]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON15]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON15]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON15]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS16]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON16]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON16]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON16]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS17]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON17]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON17]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON17]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS18]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON18]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON18]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON18]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS19]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON19]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON19]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON19]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS20]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON20]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON20]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON20]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS21]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON21]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON21]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON21]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS22]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON22]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON22]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON22]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS23]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON23]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON23]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON23]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS24]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON24]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON24]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON24]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS25]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON25]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON25]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON25]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS26]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON26]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON26]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON26]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS27]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON27]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON27]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON27]) == tgs)) {
                    count++;
                }
                if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS28]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON28]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON28]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON28]) == tgs)) {
                    count++;
                }
                if (dayOfMonth > 28) {
                    if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS29]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON29]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON29]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON29]) == tgs)) {
                        count++;
                    }
                    if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS30]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON30]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON30]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON30]) == tgs)) {
                        count++;
                    }
                }

                if (dayOfMonth > 30) {
                    if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS31]) == schStatus) && (rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON31]) == abt || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON31]) == abrsk || rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON31]) == tgs)) {
                        count++;
                    }
                }
            }

            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * check if itc macths with on e of th e integer on vector of Integer vi
     *
     * @param vi
     * @param itc
     * @return
     */
    public static boolean checkMatchOne(Vector vi, int itc) {
        if (vi != null) {
            int max = vi.size();
            try {
                for (int i = 0; i < max; i++) {
                    if (itc == ((Integer) vi.get(i)).intValue()) {
                        return true;
                    }
                }
            } catch (Exception exc) {
                System.out.println(" checkMatchOne " + exc);
                return false;
            }
        }
        return false;
    }

    public static int getStatusDisp(long employeeId, long periodId, int dayOfMonth, int schStatus, Vector viReasonDisp, Date dtPeriod) {

        // public static int getStatusDisp(long employeeId, long periodId, int dayOfMonth, Vector vSchStatus){
        //
        DBResultSet dbrs = null;
        int count = 0;
        int idxFieldName = getIdxNameOfTableBySelectedDate(dtPeriod);
        int x = 0;
        //int idxFieldNameEnd = getIdxNameOfTableBySelectedDate(EndPeriod);//jika loop sudah sama dengan end period, maka akan di set end periodnya
        //int idxFieldNameStart = getIdxNameOfTableBySelectedDate(StartPeriod);//jika loop sudah sama dengan end period, maka akan di set end periodnya
        try {
            if (dtPeriod != null) {
                String sql = "SELECT ";
                /*for (int i = 0; i < dayOfMonth; i++) {
                 sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1 + i]
                 + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON1 + i]
                 + ", ";
                 }*/
                for (int i = 0; i <= dayOfMonth; i++) {
                    int idxFieldNameX = idxFieldName + i;
                    if (idxFieldNameX >= 32) {
                        idxFieldNameX = x + 1;
                        x = x + 1;
                    }
                    /*  if(idxFieldNameX==idxFieldNameEnd){
                     sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldNameEnd - 1] + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON +  idxFieldNameEnd - 1] + ", " ;
                     }else if(idxFieldNameX== idxFieldNameStart){
                     sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldNameStart - 1] + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON +  idxFieldNameStart - 1] + ", " ;
                     }else{*/
                    sql = sql + PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldNameX - 1] + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.OFFSET_INDEX_REASON + idxFieldNameX - 1] + ", ";
                    //}
                }

                sql = sql + "\" \"  FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                        + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                        + " = " + periodId
                        + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + " = " + employeeId;

                //System.out.println("sql getStatusPresence....................."+sql);
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();


                while (rs.next()) {
                    //update by satrya 2013-02-18
                /*for (int i = 0; i < dayOfMonth; i++) {
                     if ((rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1 + i]) == schStatus) && checkMatchOne(viReasonDisp, rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON1 + i]))) {
                     count++;
                     }*/
                    int status = 0;
                    int reason = 0;
                    x = 0;
                    for (int i = 0; i <= dayOfMonth; i++) {
                        int idxFieldNameX = idxFieldName + i;
                        if (idxFieldNameX >= 32) {
                            idxFieldNameX = x + 1;
                            x = x + 1;
                        }
                        /* if(idxFieldNameX==idxFieldNameEnd){
                         status = rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldNameEnd - 1]);
                         reason = rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldNameEnd - 1]);
                        
                         }else if(idxFieldNameX== idxFieldNameStart){
                        
                         status = rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldNameStart - 1]);
                         reason = rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldNameStart - 1]);
                         }else{*/
                        status = rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_STATUS + idxFieldNameX - 1]);
                        reason = rs.getInt(PstEmpSchedule.fieldNames[OFFSET_INDEX_REASON + idxFieldNameX - 1]);
                        //}

                        if ((status == schStatus)
                                && checkMatchOne(viReasonDisp, reason)) {
                            count++;
                        }


                        //hidde by satrya 2013-02-18
                    /*sql = sql + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1 + i]
                         + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON1 + i]
                         + ", ";*/
                    }

                }

                rs.close();
            }
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /**
     * Summe of int value same as a vector of Integer
     *
     * @param iVal
     * @param vInt
     * @return
     */
    public static int sumSameInt(int iVal, Vector vInt) {
        int sum = 0;
        try {
            if (vInt != null) {
                for (int i = 0; i < vInt.size(); i++) {
                    Integer I = (Integer) vInt.get(i);
                    if (I.intValue() == iVal) {
                        sum++;
                    }
                }
            }
        } catch (Exception exc) {
            System.out.println("PstEmpSchedule.sumSameInt");
        }
        return sum;
    }

    /**
     * method ini digunakan untuk menSum reason karyawan yang sesuai dengan
     * vSchStatus
     *
     * @param employeeId
     * @param periodId
     * @param dayOfMonth
     * @param vSchStatus : vector of Integer of schedule status to be check
     * @return
     */
    public static int getStatusDisp(long employeeId, long periodId, int dayOfMonth, Vector vSchStatus) {
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS2]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS3]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS4]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS5]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS6]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS7]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS8]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS9]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS10]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS11]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS12]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS13]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS14]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS15]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS16]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS17]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS18]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS19]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS20]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS21]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS22]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS23]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS24]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS25]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS26]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS27]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS28]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS29]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS30]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS31]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON1]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON2]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON3]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON4]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON5]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON6]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON7]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON8]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON9]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON10]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON11]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON12]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON13]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON14]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON15]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON16]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON17]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON18]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON19]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON20]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON21]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON22]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON23]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON24]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON25]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON26]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON27]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON28]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON29]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON30]
                    + ", " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_REASON31]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE
                    + " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;

            //System.out.println("sql getStatusPresence....................."+sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            int count = 0;
            while (rs.next()) {
                EmpSchedule empSchedule = new EmpSchedule();

                for (int ss = PstEmpSchedule.FLD_STATUS1; ss <= PstEmpSchedule.FLD_STATUS28; ss++) {

                    if (sumSameInt(rs.getInt(PstEmpSchedule.fieldNames[ss]), vSchStatus) > 0) {
                        count++;
                    }
                }

                if (dayOfMonth > 28) {
                    if (sumSameInt(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS29]), vSchStatus) > 0) {
                        count++;
                    }
                }

                if (dayOfMonth > 29) {
                    if (sumSameInt(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS30]), vSchStatus) > 0) {
                        count++;
                    }
                }

                if (dayOfMonth > 30) {
                    if (sumSameInt(rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS31]), vSchStatus) > 0) {
                        count++;
                    }
                }

            }

            rs.close();
            return count;
        } catch (Exception e) {
            return 0;
        } finally {
            DBResultSet.close(dbrs);
        }
    }

    /* This method used to get tunjangan ekspor
     * Created By Yunny
     */
    public static Vector getEmpEkspor(Vector levSelect, long oidPeriod, long oidDepartment, long oidSection) {
        DBResultSet dbrs = null;
        Vector result = new Vector(1, 1);
        if (levSelect.size() == 0) {
            return new Vector(1, 1);
        }
        try {
            String sql = " SELECT  EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]
                    + ", EMP." + PstEmployee.fieldNames[PstEmployee.FLD_FULL_NAME]
                    + ", EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMP_CATEGORY_ID]
                    + ", EMP." + PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID]
                    + ", EMP." + PstEmployee.fieldNames[PstEmployee.FLD_COMMENCING_DATE]
                    + ", REL." + PstReligion.fieldNames[PstReligion.FLD_RELIGION]
                    + ", LEV." + PstPayEmpLevel.fieldNames[PstPayEmpLevel.FLD_LEVEL_CODE]
                    + ", LEV." + PstPayEmpLevel.fieldNames[PstPayEmpLevel.FLD_BANK_ACC_NR]
                    + ", SLIP." + PstPaySlip.fieldNames[PstPaySlip.FLD_PAY_SLIP_ID]
                    + ", CAT." + PstEmpCategory.fieldNames[PstEmpCategory.FLD_EMP_CATEGORY]
                    + ", SLIP." + PstPaySlip.fieldNames[PstPaySlip.FLD_PROCENTASE_PRESENCE]
                    + " FROM " + PstEmployee.TBL_HR_EMPLOYEE + " AS EMP"
                    + " INNER JOIN " + PstReligion.TBL_HR_RELIGION + " AS REL"
                    + " ON EMP." + PstEmployee.fieldNames[PstEmployee.FLD_RELIGION_ID]
                    + " = REL." + PstReligion.fieldNames[PstReligion.FLD_RELIGION_ID]
                    + " INNER JOIN " + PstEmpCategory.TBL_HR_EMP_CATEGORY + " AS CAT"
                    + " ON EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMP_CATEGORY_ID]
                    + " = CAT." + PstEmpCategory.fieldNames[PstEmpCategory.FLD_EMP_CATEGORY_ID]
                    + " INNER JOIN " + PstPayEmpLevel.TBL_PAY_EMP_LEVEL + " AS LEV"
                    + " ON EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]
                    + " = LEV." + PstPayEmpLevel.fieldNames[PstPayEmpLevel.FLD_EMPLOYEE_ID]
                    + " INNER JOIN " + PstPaySlip.TBL_PAY_SLIP + " AS SLIP"
                    + " ON EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]
                    + " = SLIP." + PstPaySlip.fieldNames[PstPaySlip.FLD_EMPLOYEE_ID]
                    + " WHERE  EMP." + PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED] + "=0"
                    + " AND LEV." + PstPayEmpLevel.fieldNames[PstPayEmpLevel.FLD_STATUS_DATA] + "=0"
                    + " AND SLIP." + PstPaySlip.fieldNames[PstPaySlip.FLD_PERIOD_ID] + "=" + oidPeriod;

            String whereClause = "";

            if (oidDepartment != 0) {
                whereClause = whereClause + " EMP." + PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]
                        + " = " + oidDepartment + " AND ";
            }

            if (oidSection != 0) {
                whereClause = whereClause + " EMP." + PstEmployee.fieldNames[PstEmployee.FLD_SECTION_ID]
                        + " = " + oidSection + " AND ";
            }

            if (levSelect != null && levSelect.size() > 0) {
                sql = sql + " AND (";
                for (int x = 0; x < levSelect.size(); x++) {
                    SalaryLevel s = (SalaryLevel) levSelect.get(x);
                    sql = sql + " LEV." + PstPayEmpLevel.fieldNames[PstPayEmpLevel.FLD_LEVEL_CODE] + "='" + s.getLevelCode() + "' OR";
                }
                sql = sql.substring(0, sql.length() - 2);
                sql = sql + ")";
            }

            if (whereClause != null && whereClause.length() > 0) {
                whereClause = " AND " + whereClause.substring(0, whereClause.length() - 4);
                sql = sql + whereClause;
                //sql = sql + " WHERE " + whereClause;
            }

            sql = sql + " GROUP BY EMP." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID];
            System.out.println("\t SQL PstEmpSchedule.getEmpEkspor : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector vect = new Vector(1, 1);
                Employee employee = new Employee();
                PayEmpLevel payEmpLevel = new PayEmpLevel();
                Religion religion = new Religion();
                EmpCategory empCategory = new EmpCategory();
                PaySlip paySlip = new PaySlip();

                employee.setOID(rs.getLong(PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]));
                employee.setFullName(rs.getString(PstEmployee.fieldNames[PstEmployee.FLD_FULL_NAME]));
                employee.setCommencingDate(rs.getDate(PstEmployee.fieldNames[PstEmployee.FLD_COMMENCING_DATE]));
                vect.add(employee);
                //employee.setEmpPin(rs.getString(PstEmployee.fieldNames[PstEmployee.FLD_EMP_PIN]));

                payEmpLevel.setLevelCode(rs.getString(PstPayEmpLevel.fieldNames[PstPayEmpLevel.FLD_LEVEL_CODE]));
                payEmpLevel.setBankAccNr(rs.getString(PstPayEmpLevel.fieldNames[PstPayEmpLevel.FLD_BANK_ACC_NR]));
                vect.add(payEmpLevel);

                religion.setReligion(rs.getString(PstReligion.fieldNames[PstReligion.FLD_RELIGION]));
                vect.add(religion);

                empCategory.setEmpCategory(rs.getString(PstEmpCategory.fieldNames[PstEmpCategory.FLD_EMP_CATEGORY]));
                vect.add(empCategory);

                paySlip.setOID(rs.getLong(PstPaySlip.fieldNames[PstPaySlip.FLD_PAY_SLIP_ID]));
                paySlip.setProcentasePresence(rs.getDouble(PstPaySlip.fieldNames[PstPaySlip.FLD_PROCENTASE_PRESENCE]));
                vect.add(paySlip);

                result.add(vect);
            }

            return result;
        } catch (Exception e) {
            System.out.println("\t Exception on  searchEmployee : " + e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector(1, 1);

    }

    public static Vector listEmpSchedule(int limitStart, int recordToGet, String whereClause, String order) {

        DBResultSet dbrs = null;

        try {
            String sql = "SELECT " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D1] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D3] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D4] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D5] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D6] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D7] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D8] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D9] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D10] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D11] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D12] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D13] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D14] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D15] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D16] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D17] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D18] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D19] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D20] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D21] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D22] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D23] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D24] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D25] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D26] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D27] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D28] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D29] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D30] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D31] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND1] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND2] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND3] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND4] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND5] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND6] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND7] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND8] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND9] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND10] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND11] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND12] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND13] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND14] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND15] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND16] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND17] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND18] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND19] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND20] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND21] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND22] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND23] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND24] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND25] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND26] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND27] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND28] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND29] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND30] + ","
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND31]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE;

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }
            if (limitStart == 0 && recordToGet == 0) {
                sql = sql + "";
            } else {
                sql = sql + " LIMIT " + limitStart + "," + recordToGet;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            Vector result = new Vector();

            while (rs.next()) {

                EmpSchedule empschedule = new EmpSchedule();
                empschedule.setOID(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID]));
                empschedule.setPeriodId(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]));
                empschedule.setEmployeeId(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]));

                empschedule.setD1(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D1]));
                empschedule.setD2(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2]));
                empschedule.setD3(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D3]));
                empschedule.setD4(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D4]));
                empschedule.setD5(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D5]));
                empschedule.setD6(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D6]));
                empschedule.setD7(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D7]));
                empschedule.setD8(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D8]));
                empschedule.setD9(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D9]));
                empschedule.setD10(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D10]));
                empschedule.setD11(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D11]));
                empschedule.setD12(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D12]));
                empschedule.setD13(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D13]));
                empschedule.setD14(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D14]));
                empschedule.setD15(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D15]));
                empschedule.setD16(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D16]));
                empschedule.setD17(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D17]));
                empschedule.setD18(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D18]));
                empschedule.setD19(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D19]));
                empschedule.setD20(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D20]));
                empschedule.setD21(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D21]));
                empschedule.setD22(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D22]));
                empschedule.setD23(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D23]));
                empschedule.setD24(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D24]));
                empschedule.setD25(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D25]));
                empschedule.setD26(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D26]));
                empschedule.setD27(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D27]));
                empschedule.setD28(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D28]));
                empschedule.setD29(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D29]));
                empschedule.setD30(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D30]));
                empschedule.setD31(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D31]));
                empschedule.setD2nd1(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND1]));
                empschedule.setD2nd2(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND2]));
                empschedule.setD2nd3(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND3]));
                empschedule.setD2nd4(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND4]));
                empschedule.setD2nd5(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND5]));
                empschedule.setD2nd6(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND6]));
                empschedule.setD2nd7(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND7]));
                empschedule.setD2nd8(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND8]));
                empschedule.setD2nd9(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND9]));
                empschedule.setD2nd10(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND10]));
                empschedule.setD2nd11(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND11]));
                empschedule.setD2nd12(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND12]));
                empschedule.setD2nd13(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND13]));
                empschedule.setD2nd14(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND14]));
                empschedule.setD2nd15(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND15]));
                empschedule.setD2nd16(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND16]));
                empschedule.setD2nd17(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND17]));
                empschedule.setD2nd18(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND18]));
                empschedule.setD2nd19(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND19]));
                empschedule.setD2nd20(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND20]));
                empschedule.setD2nd21(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND21]));
                empschedule.setD2nd22(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND22]));
                empschedule.setD2nd23(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND23]));
                empschedule.setD2nd24(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND24]));
                empschedule.setD2nd25(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND25]));
                empschedule.setD2nd26(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND26]));
                empschedule.setD2nd27(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND27]));
                empschedule.setD2nd28(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND28]));
                empschedule.setD2nd29(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND29]));
                empschedule.setD2nd30(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND30]));
                empschedule.setD2nd31(rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2ND31]));

                result.add(empschedule);
                return result;
            }

        } catch (Exception E) {
            System.out.println("Exception " + E.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return null;
    }

    public static float breakTimeIntersection(long employee_id, Date startDateTime, Date endDateTime) {
        if (employee_id == 0 || startDateTime == null || endDateTime == null) {
            return 0f;
        }

        float dif1 = 0f;
        float dif2 = 0f;
        Calendar cals = Calendar.getInstance();
        cals.setTime(startDateTime);
        // handle first schedule
        ScheduleSymbol schedule1 = getDailyFirstSchedule(startDateTime, employee_id);
        if (schedule1 == null || schedule1.getOID() == 0) { // if no real schedule then open default schedule
            DefaultSchedule dfSchedule = PstDefaultSchedule.getDefaultSchedule(cals.get(Calendar.DAY_OF_WEEK), employee_id);
            if (dfSchedule != null && dfSchedule.getSchedule1() != 0) {
                try {
                    schedule1 = PstScheduleSymbol.fetchExc(dfSchedule.getSchedule1());
                } catch (Exception exc) {
                    System.out.println(exc);
                }
            }
        }
        if (schedule1 != null && schedule1.getOID() != 0) {
            dif1 = DateCalc.timeIntersection(startDateTime, endDateTime, schedule1.getBreakOut(), schedule1.getBreakIn());
        }

        // handle second scehdule
        ScheduleSymbol schedule2 = getDailySecondSchedule(startDateTime, employee_id);
        if (schedule2 == null || schedule2.getOID() == 0) { // if no real schedule then open default schedule
            DefaultSchedule dfSchedule = PstDefaultSchedule.getDefaultSchedule(cals.get(Calendar.DAY_OF_WEEK), employee_id);
            if (dfSchedule != null && dfSchedule.getSchedule2() != 0) {
                try {
                    schedule2 = PstScheduleSymbol.fetchExc(dfSchedule.getSchedule2());
                } catch (Exception exc) {
                    System.out.println(exc);
                }
            }
        }
        if (schedule2 != null && schedule2.getOID() != 0) {
            dif2 = DateCalc.timeIntersection(startDateTime, endDateTime, schedule2.getBreakOut(), schedule2.getBreakIn());
        }

        return dif1 + dif2;

    }

    /**
     *
     * @param employee_id
     * @param startDateTime
     * @param endDateTime
     * @return
     */
    public static long breakTimeIntersectionVer2(long employee_id, Date startDateTime, Date endDateTime) {
        if (employee_id == 0 || startDateTime == null || endDateTime == null) {
            return 0;
        }
        // long total=0;
        long dif1 = 0;
        long dif2 = 0;
        Calendar cals = Calendar.getInstance();
        cals.setTime(startDateTime);
        // handle first schedule
        ScheduleSymbol schedule1 = getDailyFirstSchedule(startDateTime, employee_id);
        if (schedule1 == null || schedule1.getOID() == 0) { // if no real schedule then open default schedule
            DefaultSchedule dfSchedule = PstDefaultSchedule.getDefaultSchedule(cals.get(Calendar.DAY_OF_WEEK), employee_id);
            if (dfSchedule != null && dfSchedule.getSchedule1() != 0) {
                try {
                    if (dfSchedule.getSchedule1() != 0) {
                        schedule1 = PstScheduleSymbol.fetchExc(dfSchedule.getSchedule1());
                    }
                } catch (Exception exc) {
                    System.out.println(exc);
                }
            }
        }
        if (schedule1 != null && schedule1.getOID() != 0) {
            dif1 = DateCalc.timeIntersection(startDateTime, endDateTime, schedule1.getBreakOut(), schedule1.getBreakIn());
        }

        // handle second scehdule
        ScheduleSymbol schedule2 = getDailySecondSchedule(startDateTime, employee_id);
        if (schedule2 == null || schedule2.getOID() == 0) { // if no real schedule then open default schedule
            DefaultSchedule dfSchedule = PstDefaultSchedule.getDefaultSchedule(cals.get(Calendar.DAY_OF_WEEK), employee_id);//bisa di pakai hashtable
            if (dfSchedule != null && dfSchedule.getSchedule2() != 0) {
                try {
                    schedule2 = PstScheduleSymbol.fetchExc(dfSchedule.getSchedule2());
                } catch (Exception exc) {
                    System.out.println(exc);
                }
            }
        }
        if (schedule2 != null && schedule2.getOID() != 0) {
            dif2 = DateCalc.timeIntersection(startDateTime, endDateTime, schedule2.getBreakOut(), schedule2.getBreakIn());
        }

        return dif1 + dif2;

    }

    /**
     * Keterangan: mencari Break
     *
     * @param employee_id
     * @param hasDfltSchedule
     * @param hashDfltSchSymbol
     * @param hasSchedule1st
     * @param hasSchedule2st
     * @param oidScheduleId
     * @param oidScheduleId2st
     * @param startDateTime
     * @param endDateTime
     * @return
     */
    public static long breakTimeIntersectionVer3(long employee_id, Hashtable hasDfltSchedule, Hashtable hashSchedule, long oidScheduleId,
            long oidScheduleId2st, Date startDateTime, Date endDateTime) {
        if (employee_id == 0 || hashSchedule == null || hashSchedule.size() == 0 || oidScheduleId == 0 || startDateTime == null || endDateTime == null) {
            return 0;
        }
        // long total=0;
        long dif1 = 0;
        long dif2 = 0;
        Calendar cals = Calendar.getInstance();
        cals.setTime(startDateTime);
        // handle first schedule
        ScheduleSymbol schedule1 = (ScheduleSymbol) hashSchedule.get(oidScheduleId);
        Hashtable hashTblDfltSchedule = (Hashtable) hasDfltSchedule.get(cals.get(Calendar.DAY_OF_WEEK));//hasDfltSchedule berisi HashTblaeSchedule(dfltSchedule,employeeId) dan cals.get(Calendar.DAY_OF_WEEK)
        if ((schedule1 == null || schedule1.getOID() == 0) && hashTblDfltSchedule != null) { // if no real schedule then open default schedule
            DefaultSchedule dfSchedule = (DefaultSchedule) hashTblDfltSchedule.get(employee_id);//PstDefaultSchedule.getDefaultSchedule(cals.get(Calendar.DAY_OF_WEEK), employee_id);
            if (dfSchedule != null && dfSchedule.getSchedule1() != 0) {
                try {
                    if (dfSchedule.getSchedule1() != 0) {
                        schedule1 = (ScheduleSymbol) hashTblDfltSchedule.get(dfSchedule.getSchedule1());//PstScheduleSymbol.fetchExc(dfSchedule.getSchedule1());
                    }
                } catch (Exception exc) {
                    System.out.println(exc);
                }
            }
        }
        if (schedule1 != null && schedule1.getOID() != 0) {
            dif1 = DateCalc.timeIntersection(startDateTime, endDateTime, schedule1.getBreakOut(), schedule1.getBreakIn());
        }

        // handle second scehdule
        ScheduleSymbol schedule2 = (ScheduleSymbol) hashSchedule.get(oidScheduleId2st);
        if (schedule2 == null || schedule2.getOID() == 0) { // if no real schedule then open default schedule
            DefaultSchedule dfSchedule = (DefaultSchedule) hashTblDfltSchedule.get(employee_id);//bisa di pakai hashtable
            if (dfSchedule != null && dfSchedule.getSchedule2() != 0) {
                try {
                    schedule2 = (ScheduleSymbol) hashTblDfltSchedule.get(dfSchedule.getSchedule2());
                } catch (Exception exc) {
                    System.out.println(exc);
                }
            }
        }
        if (schedule2 != null && schedule2.getOID() != 0) {
            dif2 = DateCalc.timeIntersection(startDateTime, endDateTime, schedule2.getBreakOut(), schedule2.getBreakIn());
        }

        return dif1 + dif2;

    }
//update by satrya 2012-12-07

    public static void main(String args[]) {
        //resetScheduleData(504404358112125020L);   
        //resetScheduleData(504404358112674552L);   
        //resetScheduleData(504404359501228223L);   

        /*
         System.out.println(".:: importDataFromPresence start");  
         importDataFromPresence();
         System.out.println(".:: importDataFromPresence finish");    
         */
        /*        
         long periodId = 504404240112750884L; 
         long employeeId = 504404240100958350L;
         int presenceStatus = 0;   
         int idxFieldName = 2;   
         Date newDate = new Date();
         //boolean result = existDataOnSelectedField(periodId, employeeId, presenceStatus, idxFieldName);
         int result = getFieldIndexWillUpdated(periodId, employeeId, presenceStatus, newDate);
         System.out.println("result : "+result);
         */
        /*
         Date selectedDate = new Date(104, 8, 10);
         long employeeId = 504404240100958350L;
         ScheduleSymbol objScheduleSymbol = getDailySchedule(selectedDate, employeeId);        
         System.out.println("objScheduleSymbol.getOID() : " + objScheduleSymbol.getOID());
         System.out.println("objScheduleSymbol.getScheduleCategoryId() : " + objScheduleSymbol.getScheduleCategoryId());
         System.out.println("objScheduleSymbol.getSymbol() : " + objScheduleSymbol.getSymbol());
         System.out.println("objScheduleSymbol.getSchedule() : " + objScheduleSymbol.getSchedule());
         System.out.println("objScheduleSymbol.getTimeIn() : " + objScheduleSymbol.getTimeIn());
         System.out.println("objScheduleSymbol.getTimeOut() : " + objScheduleSymbol.getTimeOut());        
         */
        //long employeeId = 504404240100958350L; // NURADITA
        //long employeeId = 504404240100959111L; // KARIANA
       /* long employeeId = 504404240100950237L; // KUNA
         //int presenceStatus = Presence.STATUS_IN;
         int presenceStatus = Presence.STATUS_OUT;  
         Date presenceDate = new Date(104,11,1,11,0,0); 
         long periodId = PstPeriod.getPeriodIdBySelectedDate(presenceDate);        
         Vector vectResult1 = getFieldIndexWillUpdated(periodId, employeeId, presenceStatus, presenceDate);        
         //Vector vectResult1 = getIndexEmpScheduleTableWillUpdated(periodId, employeeId, presenceStatus, presenceDate);
         if(vectResult1!=null && vectResult1.size()>0)
         {
         System.out.println("- vectResult   : " + vectResult1);
         System.out.println("- Update field : " + PstEmpSchedule.fieldNames[Integer.parseInt(String.valueOf(vectResult1.get(1)))] + " on period " + String.valueOf(vectResult1.get(0)));            
         } 
         else
         {
         System.out.println("Result null ...");
         }                
         */

        System.out.println("Result =" + getStatusPresenceWithTimeInOrOut(40, 504404374522999067L, 31, PstEmpSchedule.STATUS_PRESENCE_OK));

    }
    //-----------------------------------

    
          //update by priska 2015-03-05
     public static int sumScheduleSymbolPerEmployee(long periodId, long employeeId, Date startdate, Date enddate, long symbolId, long perI, long jumlahperiod) {
        int dayStart = startdate.getDay();
        int dayEnd = enddate.getDay();
        
        int sum = 0;
        String sql = "SELECT * FROM "+ PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " WHERE " +PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]+ " = " + periodId + " AND " 
                    + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + " = " + employeeId ;

        DBResultSet dbrs = null;

        try {
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            Vector result = new Vector();
            while (rs.next()) {
              if (jumlahperiod == 1){
                  for (int i = 1; i <= 31 ; i++){
                        long oidSch = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D1 - 1 + i]); 
                        int statusok = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1 - 1 + i]); 
                          if (oidSch == symbolId && statusok == PstEmpSchedule.STATUS_PRESENCE_OK) {
                              sum++;
                          }
                        }
              } else {
                    if (perI == 0 ){
                        for (int i = dayStart; i <= 31 ; i++){
                        long oidSch = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D1 - 1 + i]); 
                        int statusok = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1 - 1 + i]); 
                         if (oidSch == symbolId && statusok == STATUS_PRESENCE_OK) {
                              sum++;
                          }
                        }
                    }else {
                        for (int i = 1; i <= dayEnd ; i++){
                        long oidSch = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D1 - 1 + i]); 
                        int statusok = rs.getInt(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_STATUS1 - 1 + i]); 
                           if (oidSch == symbolId && statusok == STATUS_PRESENCE_OK) {
                              sum++;
                          }
                        }
                    }
              }
              
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }

        return sum;
    }
    
    
    /**
     * Calculate sum or count of scheduleSymbolIds matching the schedule for an
     * employee in a period
     *
     * @param periodId
     * @param employeeId
     * @param scheduleSymbolIds
     * @return
     */
    public static int sumScheduleSymbolId(long periodId, long employeeId, long scheduleSymbolIds[]) {
        int sum = 0;
        String sql = "SELECT ";
        for (int i = OFFSET_INDEX_CALENDAR; i < (OFFSET_INDEX_CALENDAR + 31); i++) {
            sql = sql + fieldNames[i] + ",";
        }
        sql = sql.substring(0, sql.length() - 1);
        sql = sql + " FROM " + TBL_HR_EMP_SCHEDULE;

        DBResultSet dbrs = null;

        try {
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            Vector result = new Vector();
            while (rs.next()) {
                for (int i = OFFSET_INDEX_CALENDAR; i < (OFFSET_INDEX_CALENDAR + 31); i++) {
                    long sId = rs.getLong(fieldNames[i]);
                    for (int il = 0; il < scheduleSymbolIds.length; il++) {
                        if (sId == scheduleSymbolIds[il]) {
                            sum++;
                            break;
                        }
                    }
                }
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }

        return sum;
    }
    //update by satrya 2012-09-14

    /**
     * Description: untuk mencari schedule hari ini yang akan di set itu adalah
     * schedule IN, OUT,BO,BI
     *
     * @param periodId
     * @param employeeId
     * @param presence
     * @param presenceDate
     * @param departementId
     * @create satrya
     * @return scheduleSymbol
     */
    public static ScheduleSymbol getEmpScheduleDateTime(long periodId, long employeeId, Date presenceDate, long departementId) {
        //Vector result = new Vector();
        DBResultSet dbrs = null;
        if (periodId == 0) {
            return new ScheduleSymbol();
        }
        ScheduleSymbol scheduleSymbol = new ScheduleSymbol();
        int idxFieldName = getIdxNameOfTableBySelectedDate(presenceDate);

        try {

            String sql = "SELECT DISTINCT SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    //update by satrya 2012-08-10
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]
                    //update by satrya 2012-09-25
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    //end
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " LEFT JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM2"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]
                    + " = SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID];
            if (departementId != 0) {
                sql = sql + " INNER JOIN " + PstEmployee.TBL_HR_EMPLOYEE + " AS EMP ";
            }
            sql = sql + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + periodId
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;
            if (departementId != 0) {
                sql = sql + " AND EMP. " + PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID] + " = " + departementId;
            }

            //System.out.println("getFieldIndexWillUpdated : " + sql);
            dbrs = DBHandler.execQueryResult(sql);
            //System.out.println("getFieldIndexWillUpdated : " + sql);
            ResultSet rs = dbrs.getResultSet();

            int intYear = presenceDate.getYear();
            int intMonth = presenceDate.getMonth();
            int intDate = presenceDate.getDate();

            long longSchld1stIn = 0;
            long longSchld1stOut = 0;
            long longSchld2ndIn = 0;
            long longSchld2ndOut = 0;
            long longSchldBreakIn = 0;
            long longSchldBreakOut = 0;
            //long lEmpScheduleId = 0;
            boolean rsNull = true;

            //System.out.println("");                

            // --- start of iterasi ---
            while (rs.next()) {
                rsNull = false;
                long lScheduleSymbolId = rs.getLong(7);
                scheduleSymbol.setScheduleSymbolId(lScheduleSymbolId);
                // first schedule IN
                if (rs.getTime(1) != null) {
                    longSchld1stIn = (new Date(intYear, intMonth, intDate, rs.getTime(1).getHours(), rs.getTime(1).getMinutes(), rs.getTime(1).getSeconds())).getTime();
                    scheduleSymbol.setTimeIn(new Date(longSchld1stIn));
                }

                // first schedule OUT
                if (rs.getTime(2) != null) {
                    //update by ramayu 2012-07-11
                    if (rs.getTime(1).getHours() < rs.getTime(2).getHours()) {
                        longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime();
                        scheduleSymbol.setTimeOut(new Date(longSchld1stOut));
                    } else {
                        longSchld1stOut = (new Date(intYear, intMonth, intDate, rs.getTime(2).getHours(), rs.getTime(2).getMinutes(), rs.getTime(2).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                        scheduleSymbol.setTimeOut(new Date(longSchld1stOut));
                    }

                }

                // second schedule IN
                if (rs.getTime(3) != null) {
                    longSchld2ndIn = (new Date(intYear, intMonth, intDate, rs.getTime(3).getHours(), rs.getTime(3).getMinutes(), rs.getTime(3).getSeconds())).getTime();
                    scheduleSymbol.setTimeIn2nd(new Date(longSchld2ndIn));
                }

                // second schedule OUT
                if (rs.getTime(4) != null) {
                    //update by ramayu 2012-07-11
                    if (rs.getTime(3).getHours() < rs.getTime(4).getHours()) {
                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime();
                        scheduleSymbol.setTimeOut2nd(new Date(longSchld2ndOut));
                    } else {
                        longSchld2ndOut = (new Date(intYear, intMonth, intDate, rs.getTime(4).getHours(), rs.getTime(4).getMinutes(), rs.getTime(4).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                        scheduleSymbol.setTimeOut2nd(new Date(longSchld2ndOut));
                    }

                }
                //update by satrya 2012-09-10
                //menentukan break Out
                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]) != null) {
                    longSchldBreakOut = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getSeconds())).getTime();
                    scheduleSymbol.setBreakOut(new Date(longSchldBreakOut));
                }
                if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]) != null) {
                    if (rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_OUT]).getHours() <= rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours()) {
                        longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime();
                        scheduleSymbol.setBreakIn(new Date(longSchldBreakIn));
                    } else {
                        longSchldBreakIn = (new Date(intYear, intMonth, intDate, rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getHours(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getMinutes(), rs.getTime(PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_BREAK_IN]).getSeconds())).getTime() + (1000 * 60 * 60 * 24);
                        scheduleSymbol.setBreakIn(new Date(longSchldBreakIn));
                    }
                }

            }

            //return scheduleSymbol;
        } catch (Exception e) {
            System.out.println("Exception getEmpScheduleDateTime : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return scheduleSymbol;
    }

    /**
     * create by satrya 2013-12-04 keterangan: untuk mengecek apakah schedule
     * crooss
     *
     * @param currentPeriod
     * @param employeeId
     * @param presence
     * @return
     */
    public static boolean getScheduleDayCrossDay(Period currentPeriod, long employeeId, Presence presence) {
        //boolean isScheduleDayCross=false;
        boolean result = false;
        if (currentPeriod == null || presence == null || presence.getPresenceDatetime() == null) {
            return false;
        }
        DBResultSet dbrs = null;
        Date dtYesterday = new Date(presence.getPresenceDatetime().getYear(), presence.getPresenceDatetime().getMonth(), presence.getPresenceDatetime().getDate() - 1);
        int idxFieldName = presence == null ? 0 : getIdxNameOfTableBySelectedDate(dtYesterday);


        try {

            String sql = "SELECT SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                    + ", SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL]
                    + ", SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    //end
                    + ", SCHCAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_CATEGORY_TYPE]
                    + " FROM " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE + " AS SCH"
                    + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1]
                    + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID]
                    + " INNER JOIN " + PstScheduleCategory.TBL_HR_SCHEDULE_CATEGORY + " AS SCHCAT ON SCHCAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_SCHEDULE_CATEGORY_ID] + " = SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_CATEGORY_ID]
                    + " LEFT JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS SYM2"
                    + " ON SCH." + PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]
                    + " = SYM2." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID];

            sql = sql + " WHERE SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID]
                    + " = " + currentPeriod.getOID()
                    + " AND SCH." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                    + " = " + employeeId;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                java.sql.Time schIn = rs.getTime("SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]);
                java.sql.Time schOut = rs.getTime("SYM." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]);

                if (rs.getInt("SCHCAT." + PstScheduleCategory.fieldNames[PstScheduleCategory.FLD_CATEGORY_TYPE]) == PstScheduleCategory.CATEGORY_ACCROSS_DAY) {
                    result = true;
                } else if (schIn != null && schOut != null && schIn.getHours() > schOut.getHours()) {
                    result = true;
                }
            }

        } catch (Exception e) {
            System.out.println("get check schedule cross Exception : " + e.toString());

        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }

    /**
     * untuk mencari IN dan Out create by satrya 2014-02-18
     *
     * @param periodId
     * @param empId
     * @param scheduleId1st
     * @param scheduleId2nd
     */
    public static Vector getINandOUT(long periodId, String scheduleId1st, String scheduleId2nd) {

        DBResultSet dbrs = null;
        Vector result = new Vector();
        try {
            if (scheduleId1st != null && scheduleId1st.length() > 0) {
                int idxFieldName = getIdxNameOfTableBySelectedDate(new Date());
                String fieldIn = PstEmpSchedule.fieldNames[OFFSET_INDEX_IN + idxFieldName - 1];
                String fieldIn2nd = PstEmpSchedule.fieldNames[OFFSET_INDEX_IN + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1];//"IN" + date.getDate();

                String fieldOut = PstEmpSchedule.fieldNames[OFFSET_INDEX_OUT + idxFieldName - 1];
                String fieldOut2nd = PstEmpSchedule.fieldNames[OFFSET_INDEX_OUT + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1];//"IN" + date.getDate();

                String empSchedules = PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1];
                String empSchedules2nd = PstEmpSchedule.fieldNames[OFFSET_INDEX_CALENDAR + idxFieldName - 1];
                String sql = "SELECT emp." + PstEmployee.fieldNames[PstEmployee.FLD_FULL_NAME]
                        + ",empsch." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] + ",empsch." + fieldIn
                        + ",empsch." + fieldOut + ",empsch." + fieldIn2nd
                        + ",empsch." + fieldOut2nd
                        + ",empsch." + empSchedules + ",empsch." + empSchedules2nd
                        + ",empsch." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]
                        + ",sym." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]
                        + ",sym." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]
                        + ",sym." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL]
                        + ",emp." + PstEmployee.fieldNames[PstEmployee.FLD_BARCODE_NUMBER]
                        + " FROM " + TBL_HR_EMP_SCHEDULE + " AS empsch "
                        + " INNER JOIN " + PstEmployee.TBL_HR_EMPLOYEE + " AS emp ON empsch." + fieldNames[FLD_EMPLOYEE_ID] + "=emp." + PstEmployee.fieldNames[PstEmployee.FLD_EMPLOYEE_ID]
                        + " INNER JOIN " + PstScheduleSymbol.TBL_HR_SCHEDULE_SYMBOL + " AS sym ON sym." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SCHEDULE_ID] + "=empsch." + empSchedules
                        + " WHERE empsch." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] + "=" + periodId
                        + " AND (empsch." + fieldIn + " IS NULL OR empsch." + fieldOut
                        + " IS NULL OR empsch." + fieldIn2nd + " IS NULL OR empsch." + fieldOut2nd + " IS NULL)"
                        + " AND (empsch." + empSchedules + " IN(" + scheduleId1st + ") "
                        + (scheduleId2nd == null || scheduleId2nd.length() == 0 ? " OR empsch." + empSchedules2nd + " IN(" + scheduleId2nd + ")" : "") + ")";
                dbrs = DBHandler.execQueryResult(sql);
                ResultSet rs = dbrs.getResultSet();
                while (rs.next()) {
                    Date In = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[OFFSET_INDEX_IN + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[OFFSET_INDEX_IN + idxFieldName - 1]));
                    Date Out = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[OFFSET_INDEX_OUT + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[OFFSET_INDEX_OUT + idxFieldName - 1]));
                    Date In2nd = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[OFFSET_INDEX_IN + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[OFFSET_INDEX_IN + idxFieldName - 1]));
                    Date Out2nd = DBHandler.convertDate(rs.getDate(PstEmpSchedule.fieldNames[OFFSET_INDEX_OUT + INTERVAL_INDEX_HALF_CALENDAR + idxFieldName - 1]), rs.getTime(PstEmpSchedule.fieldNames[OFFSET_INDEX_IN + idxFieldName - 1]));
                    SessEmpScheduleAttendance sessEmpSchedule = new SessEmpScheduleAttendance();
                    //int idxTgl=Integer.parseInt(empSchedules.replace("D", ""));

                    sessEmpSchedule.setTimeIn(In);
                    sessEmpSchedule.setTimeIn2Nd(In2nd);
                    sessEmpSchedule.setTimeOut(Out);
                    sessEmpSchedule.setTimeOut2Nd(Out2nd);
                    sessEmpSchedule.setEmployeeId(rs.getLong("empsch." + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]));
                    sessEmpSchedule.setFullName(rs.getString("emp." + PstEmployee.fieldNames[PstEmployee.FLD_FULL_NAME]));
                    sessEmpSchedule.setSymbol(rs.getString("sym." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_SYMBOL]));
                    sessEmpSchedule.setSchTimeIn(rs.getTime("sym." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_IN]));
                    sessEmpSchedule.setSchTimeOut(rs.getTime("sym." + PstScheduleSymbol.fieldNames[PstScheduleSymbol.FLD_TIME_OUT]));
                    sessEmpSchedule.setBarcodeNumber(rs.getString("emp." + PstEmployee.fieldNames[PstEmployee.FLD_BARCODE_NUMBER]));
                    result.add(sessEmpSchedule);
                }
            }

        } catch (Exception e) {
            System.out.println("get check schedule cross Exception : " + e.toString());

        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }
    /**
     * mencari work duration
     * @param leaveConfig
     * @param tmpEndDate
     * @param tmpDate
     * @param oidSch1St
     * @param actualIn
     * @param actualOut
     * @param empId
     * @param listPresencePersonalInOut
     * @param hasTblSchedule
     * @param breakTimeDuration
     * @return 
     */
    public static long timeWorkDurationHours(I_Leave leaveConfig, Date tmpEndDate, Date tmpDate, long oidSch1St, Date actualIn, Date actualOut, long empId, Vector listPresencePersonalInOut, Hashtable hasTblSchedule, Hashtable breakTimeDuration) {
        long empIdxx = 0;//gunanya hanya untuk testy
        // String workDuration;
        long totalWOrkDur = 0;
        //hanya untuk test
        if(tmpDate==null && tmpEndDate==null){
            return 0;
        }
        //Hashtable hashDtCutiAndOT=new Hashtable();
        try {
            ScheduleSymbol scheduleSymbol = new ScheduleSymbol();
            // Hashtable hashDtCuti=new Hashtable();
            int kk = 0;
            while (tmpDate.before(tmpEndDate) || tmpDate.equals(tmpEndDate)) {
                //Date dtSchEmpScheduleBIn = null;
                //Date dtSchEmpScheduleBOut = null;
                //int kk = tmpDate.getDate()-1;
                long breakPresence = 0;
                long oidSch2st = 0;///belum di pakai
               long diffStartToFinish = tmpDate.getTime() - tmpEndDate.getTime();
                int itDate = Integer.parseInt(String.valueOf(diffStartToFinish / 86400000));
                Date dtIdx = null;//mengetahui idx date
                for (int i = 0; i <= itDate; i++) {
                    dtIdx = new Date(tmpDate.getYear(), tmpDate.getMonth(), (tmpDate.getDate() + i));
                }


                if (scheduleSymbol != null && scheduleSymbol.getOID() != oidSch1St) {

                    if (oidSch1St != 0) {
                        try {
                            scheduleSymbol = (ScheduleSymbol) hasTblSchedule.get(oidSch1St);//PstScheduleSymbol.fetchExc(oidSch1St);
                        } catch (Exception exc) {
                        }

                    }

                } else {
                    if (scheduleSymbol == null) {

                        if (oidSch1St != 0) {
                            try {
                                scheduleSymbol = (ScheduleSymbol) hasTblSchedule.get(oidSch1St);//scheduleSymbol  = PstScheduleSymbol.fetchExc(oidSch1St);
                            } catch (Exception exc) {
                            }
                        }
                    }
                }




                long preBreakOut = 0;
                long preBreakIn = 0;
                long breakDuration = 0L;
                if (scheduleSymbol != null && scheduleSymbol.getBreakOut() != null && scheduleSymbol.getBreakIn() != null && dtIdx != null && listPresencePersonalInOut != null && listPresencePersonalInOut.size() > 0) {
                    Date dtSchDateTime = null;
                    Date dtpresenceDateTime = null;
                    Date dtSchEmpScheduleBIn = (Date) dtIdx.clone();
                    Date dtSchEmpScheduleBOut = (Date) dtIdx.clone();
                    long preBreakOutX = 0;
                    long preBreakInX = 0;
                    Date dtBreakOut = null;
                    Date dtBreakIn = null;
                    boolean ispreBreakOutsdhdiambil = false;
                    Presence presenceBreak = new Presence();
                    for (int bIdx = 0; bIdx < listPresencePersonalInOut.size(); bIdx++) {
                        presenceBreak = (Presence) listPresencePersonalInOut.get(bIdx);//yang di cari harus ada leavenya 
                        //update by satrya 2012-10-17
                        if (dtSchEmpScheduleBOut != null) {
                            dtSchEmpScheduleBOut.setHours(scheduleSymbol.getBreakOut().getHours());
                            dtSchEmpScheduleBOut.setMinutes(scheduleSymbol.getBreakOut().getMinutes());
                            dtSchEmpScheduleBOut.setSeconds(0);
                        }
                        if (dtSchEmpScheduleBOut != null) {
                            dtSchEmpScheduleBIn.setHours(scheduleSymbol.getBreakIn().getHours());
                            dtSchEmpScheduleBIn.setMinutes(scheduleSymbol.getBreakIn().getMinutes());
                            dtSchEmpScheduleBIn.setSeconds(0);
                        }
                        if (presenceBreak.getScheduleDatetime() != null) {
                            dtSchDateTime = (Date) presenceBreak.getScheduleDatetime().clone();
                            dtSchDateTime.setHours(dtSchDateTime.getHours());
                            dtSchDateTime.setMinutes(dtSchDateTime.getMinutes());
                            dtSchDateTime.setSeconds(0);
                        }
                        if (presenceBreak.getPresenceDatetime() != null) {
                            //update by satrya 2012-10-17
                            dtpresenceDateTime = (Date) presenceBreak.getPresenceDatetime().clone();
                            dtpresenceDateTime.setHours(dtpresenceDateTime.getHours());
                            dtpresenceDateTime.setMinutes(dtpresenceDateTime.getMinutes());
                            dtpresenceDateTime.setSeconds(0);
                        }
                        if (presenceBreak.getEmployeeId() == empId
                                && (DateCalc.dayDifference(presenceBreak.getPresenceDatetime(), dtIdx) == 0)
                                && presenceBreak.getScheduleDatetime() == null) {
                            if (presenceBreak.getStatus() == Presence.STATUS_OUT_ON_DUTY) {
                                //bOut =bOut+ "D:" +Formater.formatDate(presenceBreak.getPresenceDatetime(),"d/M/yy")+"<br>"+Formater.formatDate(presenceBreak.getPresenceDatetime(),"HH:mm")+"<br><br>";                                  
                                // dBout = bOut+ "D:" +Formater.formatDate(presenceBreak.getPresenceDatetime(),"HH:mm");
                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;

                            } else if (presenceBreak.getStatus() == Presence.STATUS_CALL_BACK) {
                                //bIn =bIn+ "D:" +Formater.formatDate(presenceBreak.getPresenceDatetime(),"d/M/yy")+ "<br>"+Formater.formatDate(presenceBreak.getPresenceDatetime(),"HH:mm")+"<br><br>";                                  
                                // dBin = dBin+ "D:" +Formater.formatDate(presenceBreak.getPresenceDatetime(),"HH:mm"); 
                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;

                            }

                        } else if (dtpresenceDateTime != null/*presenceBreak.getScheduleDatetime() !=null*/
                                && presenceBreak.getEmployeeId() == empId
                                //update by satrya 2014-01-27 &&(DateCalc.dayDifference(presenceBreak.getScheduleDatetime(),dtIdx)==0 )){
                                && (DateCalc.dayDifference(dtpresenceDateTime, dtIdx) == 0)) {
                            //kenapa di buat presenceBreak.getScheduleDatetime()!=null ini berpengaruh pada DateCalc.dayDifference(presenceBreak.getScheduleDatetime() xxxx yg menyebabkan exception
                            if (presenceBreak.getStatus() == Presence.STATUS_OUT_PERSONAL) {
                                //update by satrya 2012-09-27
                                //if((presenceBreak.getScheduleDatetime()==null || presenceBreak.getPresenceDatetime().getTime() < presenceBreak.getScheduleDatetime().getTime())){
                                //update by satrya 2013-07-28

                                //jika sewaktu presence Out melewati schedule BI maka setlah presencenya
                                //misal sch BO & BI = 13 s/d 14 dan ada presence BO 15.00 maka yg di set 15.00 untk penguranganya
                                preBreakOutX = dtpresenceDateTime == null ? 0 : dtpresenceDateTime.getTime();///yang di pakai mengurangi itu adalah presence PO  
                                dtBreakOut = dtpresenceDateTime;
                                if (dtSchEmpScheduleBIn != null && presenceBreak.getPresenceDatetime().getTime() > dtSchEmpScheduleBIn.getTime()) {
                                    preBreakOut = presenceBreak.getPresenceDatetime().getTime();
                                } else if ((presenceBreak.getPresenceDatetime().getTime() < presenceBreak.getScheduleDatetime().getTime())) { ///jika karyawan mendahului istirahat
                                    preBreakOut = presenceBreak.getPresenceDatetime().getTime();///yang di pakai mengurangi itu adalah presence PO 

                                } else if (presenceBreak.getScheduleDatetime().getHours() == 0 && presenceBreak.getScheduleDatetime().getMinutes() == 0) {
                                    preBreakOut = presenceBreak.getPresenceDatetime().getTime();//jika schedulenya 00:00
                                } else {
                                    preBreakOut = presenceBreak.getScheduleDatetime().getTime(); //yang di pakai mengurangi adalah schedule PO
                                }

                                ispreBreakOutsdhdiambil = false;
                            } else if (presenceBreak.getStatus() == Presence.STATUS_IN_PERSONAL) {
                                //istirahat terlamabat 
                                preBreakInX = presenceBreak.getPresenceDatetime() == null ? 0 : presenceBreak.getPresenceDatetime().getTime();///yang di pakai mengurangi itu adalah presence PI
                                dtBreakIn = presenceBreak.getPresenceDatetime();
                                if (preBreakOut != 0L) {
                                    //update by satrya 2012-09-27
                                    //if(presenceBreak.getScheduleDatetime()==null || presenceBreak.getPresenceDatetime().getTime() > presenceBreak.getScheduleDatetime().getTime()){
                                    //update by satrya 2013-07-28\
                                    //misal sch BO & BI = 13 s/d 14 dan ada presence BO 15.00 maka yg di set 15.00 untk penguranganya
                                    if (dtSchEmpScheduleBIn != null && dtBreakOut != null && dtBreakIn != null
                                            && dtBreakOut.getTime() > dtSchEmpScheduleBIn.getTime() && dtBreakIn.getTime() > dtSchEmpScheduleBIn.getTime()) {
                                        //karena sudah pasti melewatijam istirahatnya
                                        long tmpBreakDuration = ((Long) breakTimeDuration.get("" + oidSch1St)).longValue();
                                        preBreakIn = presenceBreak.getPresenceDatetime().getTime() + tmpBreakDuration;
                                    } else if (presenceBreak.getPresenceDatetime().getTime() > presenceBreak.getScheduleDatetime().getTime()) { ///jika karyawan melewati jam istirahat
                                        preBreakIn = presenceBreak.getPresenceDatetime().getTime();///yang di pakai mengurangi itu adalah presence PI
                                    } else if (presenceBreak.getScheduleDatetime().getHours() == 0 && presenceBreak.getScheduleDatetime().getMinutes() == 0) {
                                        preBreakIn = presenceBreak.getPresenceDatetime().getTime(); //jika schedulenya 00:00 
                                    } else {
                                        preBreakIn = presenceBreak.getScheduleDatetime().getTime(); //yang di pakai mengurangi adalah schedule PI
                                    }

                                    breakDuration = breakDuration + (preBreakIn - preBreakOut);


                                    ispreBreakOutsdhdiambil = true;
                                    preBreakOut = 0L;

                                    //breakDuration = breakDuration + presenceBreak.getPresenceDatetime().getTime()-  preBOut.getPresenceDatetime().getTime(); 
                                    // preBOut=null;
                                }
                                // diffBi = diffBi+ (presenceBreak.getScheduleDatetime().getTime() - presenceBreak.getPresenceDatetime().getTime());

                            } else if (presenceBreak.getStatus() == Presence.STATUS_OUT_ON_DUTY) {
                                //bOut =bOut+ "D:" +Formater.formatDate(presenceBreak.getPresenceDatetime(),"d/M/yy")+"<br>"+Formater.formatDate(presenceBreak.getPresenceDatetime(),"HH:mm")+"<br><br>";                                  
                                // dBout = dBout+ "D:" +Formater.formatDate(presenceBreak.getPresenceDatetime(),"HH:mm"); 
                            } else if (presenceBreak.getStatus() == Presence.STATUS_CALL_BACK) {
                                //bIn =bIn+ "D:" +Formater.formatDate(presenceBreak.getPresenceDatetime(),"d/M/yy")+ "<br>"+Formater.formatDate(presenceBreak.getPresenceDatetime(),"HH:mm")+"<br><br>";                                  
                                //dBin = dBin+ "D:" +Formater.formatDate(presenceBreak.getPresenceDatetime(),"HH:mm");  
                                listPresencePersonalInOut.remove(bIdx);
                                bIdx = bIdx - 1;

                            }

                            if (ispreBreakOutsdhdiambil) {
                                preBreakOutX = 0L;
                                preBreakInX = 0L;
                            }
                            // }

                        }//end else if

                    }//end for break In
                    if (preBreakOutX == 0 || preBreakInX == 0) {
                        //jika hanya satu saja yg muncul atau ada misalnya hanya break IN saja atau break Out saja
                        //update by satrya 2013-06-17
                        if (preBreakOutX != 0) {
                            if (preBreakOutX < dtSchEmpScheduleBOut.getTime() || preBreakOutX > dtSchEmpScheduleBIn.getTime()) {
                                //bOut =bOut+ "P:" +Formater.formatDate(dtBreakOut,"d/M/yy")+"<br> <font color=\"#FF0000\">"+ Formater.formatDate(dtBreakOut,"HH:mm")+"<br><br></font>";      
                            } else {
                                // bOut =bOut+ "P:" +Formater.formatDate(dtBreakOut,"d/M/yy")+"<br>"+Formater.formatDate(dtBreakOut,"HH:mm")+"<br><br>";
                            }
                        }
                        if (preBreakInX != 0) {
                            if (preBreakInX > dtSchEmpScheduleBIn.getTime()) {
                                //bIn =bIn+ "P:" +Formater.formatDate(dtBreakIn,"d/M/yy")+"<br> <font color=\"#FF0000\">"+ Formater.formatDate(dtBreakIn,"HH:mm")+"<br><br></font>";
                            } else {
                                //bIn =bIn+ "P:" +Formater.formatDate(dtBreakIn,"d/M/yy")+"<br>"+Formater.formatDate(dtBreakIn,"HH:mm")+"<br><br>";
                            }
                        }
                    }
                    //update by satrya 2012-10-18
                    //jika di loop tersebut tidak cocok maka di kurangi schedulenya
                    if (breakDuration == 0 && oidSch1St != 0 && breakTimeDuration.get("" + oidSch1St) != null) {  //&& sPresenceDateTime.equals(pSelectedDate)){
                        try {
                            breakDuration = ((Long) breakTimeDuration.get("" + oidSch1St)).longValue(); //scheduleSymbol.getBreakIn().getTime()  - scheduleSymbol.getBreakOut().getTime(); 
                        } catch (Exception ex) {
                            System.out.println("Exception scheduleSymbol" + ex.toString());
                            //System.out.println("date"+presenceReportDaily.getSelectedDate()+ presenceReportDaily.getEmpFullName());
                        }
                    }
                } //jika employee tidak ada yang keluar maka akan di potong jam istirahat default
                else {
                    if (breakDuration == 0 && oidSch1St != 0 && breakTimeDuration.get("" + oidSch1St) != null) {  //&& sPresenceDateTime.equals(pSelectedDate)){
                        try {
                            breakDuration = ((Long) breakTimeDuration.get("" + oidSch1St)).longValue(); //scheduleSymbol.getBreakIn().getTime()  - scheduleSymbol.getBreakOut().getTime(); 
                        } catch (Exception ex) {
                            System.out.println("Exception scheduleSymbol" + ex.toString());
                            //System.out.println("date"+presenceReportDaily.getSelectedDate()+ presenceReportDaily.getEmpFullName());
                        }
                    }
                }
                //update by satrya 2014-01-24
                long breakOvertime = 0;
                /*if (vOvertimeDetail != null && vOvertimeDetail.size() > 0) {
                    for (int idxOt = 0; idxOt < vOvertimeDetail.size(); idxOt++) {
                        OvertimeDetail ovdDetail = (OvertimeDetail) vOvertimeDetail.get(idxOt);
                        if (ovdDetail.getEmployeeId() == empId && ovdDetail.getRestTimeinHr() != 0 && dtIdx != null && ovdDetail.getDateFrom() != null
                                && DateCalc.dayDifference(ovdDetail.getDateFrom(), dtIdx) == 0) {
                            breakOvertime = breakOvertime + (long) (ovdDetail.getRestTimeinHr() * 60 * 60 * 1000);
                        }

                    }
                }*/
                if (actualIn != null && actualOut != null && dtIdx != null) {
                    float total = ((actualOut.getTime() - (breakDuration + breakOvertime)) - actualIn.getTime()) / (leaveConfig.getHourOneWorkday() / leaveConfig.getHourOneWorkday() * 60f * 60f * 1000f);
                    if (total > leaveConfig.getHourOneWorkday()) {
                        totalWOrkDur = totalWOrkDur + (long) (leaveConfig.getHourOneWorkday() * 60L * 60L * 1000L);
                    } else {
                        totalWOrkDur = totalWOrkDur + (actualOut.getTime() - (breakDuration + breakOvertime)) - actualIn.getTime();
                    }
                    //totalWOrkDur = totalWOrkDur + (actualOut.getTime()-(breakDuration + breakOvertime))-actualIn.getTime();
                } else {
                    //jika actual In dan Out tidak ada maka dianggap tidak dihitung
                    //jika dia harinya OFF dan ada tgs kantor
        /*if(scheduleSymbol!=null && scheduleSymbol.getOID()==oidScheduleOff){
                     totalWOrkDur = totalWOrkDur + Math.abs(breakPresence);
                     }else{*/
                    totalWOrkDur = totalWOrkDur + 0;
                    //}
                }

                tmpDate = new Date(tmpDate.getTime() + 24 * 60 * 60 * 1000);
                kk = kk + 1;
                // empIdxx=empId;
            }
        } catch (Exception exc) {
            System.out.println("Exception exc timeWorkDuration" + exc + empIdxx);
            totalWOrkDur = 0;
        }
        //System.out.println("No emp: " +empIdxx);
        //String workDuration = Formater.formatWorkHoursMinutes(totalWOrkDur);
        long workDuration = (totalWOrkDur);
        return workDuration;
    }
    
    
      public static Vector caricount(String sqlplus) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
          
        try {
            String sql = "SELECT EMP_ID, COUNT(EMP_ID) FROM ( " +sqlplus+ " ) AS TB GROUP BY EMP_ID ;" ;
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                SpecialEmpScheduleCount specialEmpScheduleCount = new SpecialEmpScheduleCount();
                specialEmpScheduleCount.setEmployeeId(rs.getLong("EMP_ID"));
                specialEmpScheduleCount.setCount(rs.getLong("COUNT(EMP_ID)"));
                lists.add(specialEmpScheduleCount);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }
      
        /**
     * Priska 2014-12-24
     * @param selectedDate --> specify selectedDate
     */
    public static long getStatusValue(long scheduleOid, int datenya) {
        DBResultSet dbrs = null;
        long result = 0;
        String dayke = "";
      if (datenya == 1){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D1];
      }else if (datenya == 2){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D2];
      }else if (datenya == 3){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D3];
      }else if (datenya == 4){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D4];
      }else if (datenya == 5){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D5];
      }else if (datenya == 6){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D6];
      }else if (datenya == 7){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D7];
      }else if (datenya == 8){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D8];
      }else if (datenya == 9){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D9];
      }else if (datenya == 10){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D10];
      }else if (datenya == 11){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D11];
      }else if (datenya == 12){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D12];
      }else if (datenya == 13){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D13];
      }else if (datenya == 14){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D14];
      }else if (datenya == 15){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D15];
      }else if (datenya == 16){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D16];
      }else if (datenya == 17){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D17];
      }else if (datenya == 18){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D18];
      }else if (datenya == 19){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D19];
      }else if (datenya == 20){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D20];
      }else if (datenya == 21){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D21];
      }else if (datenya == 22){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D22];
      }else if (datenya == 23){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D23];
      }else if (datenya == 24){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D24];
      }else if (datenya == 25){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D25];
      }else if (datenya == 26){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D26];
      }else if (datenya == 27){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D27];
      }else if (datenya == 28){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D28];
      }else if (datenya == 29){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D29];
      }else if (datenya == 30){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D30];
      }else if (datenya == 31){
          dayke = PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_D31];
      }
        try {
            String sql = "SELECT " +  dayke  +
                    " FROM  " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE +
                    " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID] +
                    " = " + scheduleOid  ;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = rs.getLong(dayke);
                break;
            }
        } catch (Exception e) {
            System.out.println("Err list period : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }    
      
     
     public static long getEmpOid(long scheduleOid) {
        DBResultSet dbrs = null;
        long result = 0;
    
        try {
            String sql = "SELECT " +  PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] +
                    " FROM  " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE +
                    " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMP_SCHEDULE_ID] +
                    " = " + scheduleOid  ;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = rs.getLong(PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID]);
                break;
            }
        } catch (Exception e) {
            System.out.println("Err list period : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }    
      
    
        /**
     * Priska 2014-12-24
     * @param selectedDate --> specify selectedDate
     */
    public static long getReasonValue(long periodId, long employeeId, int idxFieldNameFirstReason ) {
        DBResultSet dbrs = null;
        long result = 0;
        try {
            String sql = "SELECT " +  PstEmpSchedule.fieldNames[idxFieldNameFirstReason] +
                    " FROM  " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE +
                    " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] +
                    " = " + employeeId + 
                    " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] +
                    " = " + periodId ;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = rs.getLong(PstEmpSchedule.fieldNames[idxFieldNameFirstReason]);
                break;
            }
        } catch (Exception e) {
            System.out.println("Err list period : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }
    
        /**
     * Priska 2015-04-06
     * @param getNoteValue --> specify selectedDate
     */
    public static String getNoteValue(long periodId, long employeeId, int idxFieldNameFirstNote ) {
        DBResultSet dbrs = null;
        String result = "";
        try {
            String sql = "SELECT " +  PstEmpSchedule.fieldNames[idxFieldNameFirstNote] +
                    " FROM  " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE +
                    " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] +
                    " = " + employeeId + 
                    " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] +
                    " = " + periodId ;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = rs.getString(PstEmpSchedule.fieldNames[idxFieldNameFirstNote]);
                break;
            }
        } catch (Exception e) {
            System.out.println("Err list period : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
            return result;
        }
    }
    
    
      /**
      /**
     * Priska 2014-12-24
     * @param selectedDate --> specify selectedDate
     */
      public static int updatereasonnew(long periodId, long employeeId, String fieldreason ,int reasonfirst) {
        int success=0;
        
        
        
        try {
            
            String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE +
            " SET "+fieldreason+" = " + reasonfirst + 
            " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] +
            " = " + periodId +
            " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] +
            " = " + employeeId;
            
            //System.out.println("sql : " + sql);
            success = DBHandler.execUpdate(sql);
        } catch (Exception e) {
            System.out.println("\tExc updatePresenceStatus : " + e.toString());
        } finally {
            //System.out.println("\tFinal updatePresenceStatus");
            //DBResultSet.close(dbrs);
            return success;
        }
    }
      
      /**
      /**
     * Priska 2015-12-14
     * @param selectedDate --> specify selectedDate
     */
      public static int updatestatusnew(long periodId, long employeeId, String fieldstatus ,int status) {
        int success=0;
        
        
        
        try {
            
            String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE +
            " SET "+fieldstatus+" = " + status + 
            " WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] +
            " = " + periodId +
            " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] +
            " = " + employeeId;
            
            //System.out.println("sql : " + sql);
            success = DBHandler.execUpdate(sql);
        } catch (Exception e) {
            System.out.println("\tExc updatePresenceStatus : " + e.toString());
        } finally {
            //System.out.println("\tFinal updatePresenceStatus");
            //DBResultSet.close(dbrs);
            return success;
        }
    }
      
       /**
      /**
     * Priska 2015-12-14
     * @param selectedDate --> specify selectedDate
     */
      public static int updatenotenew(long periodId, long employeeId, String fieldNote ,String note) {
        int success=0;
        
        
        
        try {
            
            String sql = "UPDATE " + PstEmpSchedule.TBL_HR_EMP_SCHEDULE +
            " SET "+fieldNote+" = \"" + note + 
            "\" WHERE " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_PERIOD_ID] +
            " = " + periodId +
            " AND " + PstEmpSchedule.fieldNames[PstEmpSchedule.FLD_EMPLOYEE_ID] +
            " = " + employeeId;
            
            //System.out.println("sql : " + sql);
            success = DBHandler.execUpdate(sql);
        } catch (Exception e) {
            System.out.println("\tExc updatePresenceStatus : " + e.toString());
        } finally {
            //System.out.println("\tFinal updatePresenceStatus");
            //DBResultSet.close(dbrs);
            return success;
        }
    }
}
