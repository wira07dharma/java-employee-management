/* Generated by Together */
/*
 * EmpPresencePdf.java
 * @author gedhy
 * @version 1.0
 * Created on July 13, 2002, 09:10 PM
 */

package com.dimata.harisma.report.canteen;

/* package java */
import java.util.*;
import java.text.*;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.*;
/* package servlet */
import javax.servlet.*;
import javax.servlet.http.*;

/* package lowagie */
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;

/* package qdep */
import com.dimata.util.*;
import com.dimata.qdep.form.*;

/* package harisma */
import com.dimata.harisma.entity.canteen.*;

public class MenulistPdf extends HttpServlet {

    /* declaration constant */
    public static Color blackColor = new Color(0,0,0);
    public static Color whiteColor = new Color(255,255,255);
    public static Color titleColor = new Color(200,200,200);
    public static Color summaryColor = new Color(240,240,240);
    public static String formatDate  = "MMM dd, yyyy";
    public static String formatNumber = "#,###";

    /* setting some fonts in the color chosen by the user */
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 12, Font.BOLD, blackColor);
    public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 10, Font.NORMAL, blackColor);
    public static Font fontContent = new Font(Font.TIMES_NEW_ROMAN, 10, Font.NORMAL, blackColor);

    /** Initializes the servlet
    */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /** Handles the HTTP <code>GET</code> method.
    * @param request servlet request
    * @param response servlet response
    */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    } 

    /** Handles the HTTP <code>POST</code> method.
    * @param request servlet request
    * @param response servlet response
    */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    }

    /** Destroys the servlet
    */
    public void destroy() {
    }

    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
    * @param request servlet request
    * @param response servlet response
    */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {

        /* creating the document object */
        Document document = new Document(PageSize.A4, 30, 30, 30, 30);

	/* creating an OutputStream */
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try {
            /* creating an instance of the writer */
            PdfWriter writer = PdfWriter.getInstance(document, baos);

            /* get data from session */
            int yr = FRMQueryString.requestInt(request, "yr");
            int mn = FRMQueryString.requestInt(request, "mn");
            Date period = new Date(yr, mn, 1);
            /* adding a Header of page, i.e. : title, align and etc */
            HeaderFooter header = new HeaderFooter(new Phrase("MENU LIST MONTHLY\nFOR " + Formater.formatDate(period, "MMMM yyyy"), fontHeader), false);
            header.setAlignment(Element.ALIGN_CENTER);
            header.setBorder(Rectangle.BOTTOM);
            header.setBorderColor(blackColor);
            document.setHeader(header);

            /* opening the document, needed for add something into document */
            document.open();

            /* create header */
            Table tableEmpPresence = getTableHeader();

            /* generate employee attendance report's data */
            Cell cellEmpData = new Cell("");

            Calendar calMenu = new GregorianCalendar(period.getYear() + 1900, period.getMonth(), period.getDate());
            int maxDate = calMenu.getActualMaximum(Calendar.DAY_OF_MONTH);
            //out.print(maxDate);
            for (int i=1; i<=maxDate; i++) {
                String smenub = "";
                String smenul = "";
                /* list semua item per hari */
                String whereListBreakfast = "MENU_DATE = '" + Formater.formatDate(period,"yyyy-MM") + "-" + String.valueOf(i) + "'";
                whereListBreakfast += " AND MENU_TIME=" + 1;
                Vector vListBreakfast = PstMenuList.list(0,0,whereListBreakfast,"");
                String whereListLunch = "MENU_DATE = '" + Formater.formatDate(period,"yyyy-MM") + "-" + String.valueOf(i) + "'";
                whereListLunch += " AND MENU_TIME=" + 2;
                Vector vListLunch = PstMenuList.list(0,0,whereListLunch,"");

                cellEmpData = new Cell(new Chunk(String.valueOf(i) + Formater.formatDate(period,"MMMM yyyy"),fontContent));
                cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                cellEmpData.setBackgroundColor(whiteColor);
                cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    tableEmpPresence.addCell(cellEmpData);

                for (int j=0; j<vListBreakfast.size(); j++) {
                    MenuList ml = (MenuList) vListBreakfast.get(j);
                    try {
                        MenuItem mi = PstMenuItem.fetchExc(ml.getMenuItemId());
                        smenub += mi.getItemName() + "\n";
                    }
                    catch (Exception e) {
                    }
                }
                cellEmpData = new Cell(new Chunk(String.valueOf(smenub),fontContent));
                cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                cellEmpData.setBackgroundColor(whiteColor);
                cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    tableEmpPresence.addCell(cellEmpData);
                    
                for (int j=0; j<vListLunch.size(); j++) {
                    MenuList ml = (MenuList) vListLunch.get(j);
                    try {
                        MenuItem mi = PstMenuItem.fetchExc(ml.getMenuItemId());
                        smenul += mi.getItemName() + "\n";
                    }
                    catch (Exception e) {
                    }
                }
                cellEmpData = new Cell(new Chunk(String.valueOf(smenul),fontContent));
                cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                cellEmpData.setBackgroundColor(whiteColor);
                cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    tableEmpPresence.addCell(cellEmpData);
            }
            document.add(tableEmpPresence);
        }
        catch(DocumentException de) {
            System.err.println(de.getMessage());
            de.printStackTrace();
        }

        /* closing the document */
        document.close();

        /* we have written the pdfstream to a ByteArrayOutputStream, now going to write this outputStream to the ServletOutputStream
		 * after we have set the contentlength
         */
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }


    /**
    * this method used to create header table
    */
    public static Table getTableHeader() throws BadElementException, DocumentException {

           Table table = new Table(3);
           table.setCellpadding(1);
           table.setCellspacing(1);
           table.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
	       int widthHeader[] = {20, 40, 40};
    	   table.setWidths(widthHeader);
           table.setWidth(100);

           Cell cellEmpPresence = new Cell(new Chunk(" DATE",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
           cellEmpPresence.setRowspan(2);
           cellEmpPresence.setBackgroundColor(summaryColor);
         	table.addCell(cellEmpPresence);

           cellEmpPresence = new Cell(new Chunk(" MENU",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellEmpPresence.setColspan(2);
           cellEmpPresence.setRowspan(1);
           cellEmpPresence.setBackgroundColor(summaryColor);
          	table.addCell(cellEmpPresence);

           cellEmpPresence = new Cell(new Chunk(" BREAKFAST",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellEmpPresence.setRowspan(1);
           cellEmpPresence.setBackgroundColor(summaryColor);
         	table.addCell(cellEmpPresence);
                
           cellEmpPresence = new Cell(new Chunk(" LUNCH",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellEmpPresence.setRowspan(1);
           cellEmpPresence.setBackgroundColor(summaryColor);
         	table.addCell(cellEmpPresence);

           return table;
    }

}

