/* Generated by Together */
/*
 * EmpPresencePdf.java
 * @author gedhy
 * @version 1.0
 * Created on July 13, 2002, 09:10 PM
 */

package com.dimata.harisma.report.canteen;

/* package java */
import java.util.*;
import java.text.*;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.*;
/* package servlet */
import javax.servlet.*;
import javax.servlet.http.*;

/* package lowagie */
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;

/* package qdep */
import com.dimata.util.*;
import com.dimata.qdep.form.*;

/* package harisma */
import com.dimata.harisma.entity.canteen.*;

public class DailyPdf extends HttpServlet {

    /* declaration constant */
    public static Color blackColor = new Color(0,0,0);
    public static Color whiteColor = new Color(255,255,255);
    public static Color titleColor = new Color(200,200,200);
    public static Color summaryColor = new Color(240,240,240);
    public static String formatDate  = "MMM dd, yyyy";
    public static String formatNumber = "#,###";

    /* setting some fonts in the color chosen by the user */
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 11, Font.BOLD, blackColor);
    public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 9, Font.NORMAL, blackColor);
    public static Font fontContent = new Font(Font.TIMES_NEW_ROMAN, 9, Font.NORMAL, blackColor);

    /** Initializes the servlet
    */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /** Handles the HTTP <code>GET</code> method.
    * @param request servlet request
    * @param response servlet response
    */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    } 

    /** Handles the HTTP <code>POST</code> method.
    * @param request servlet request
    * @param response servlet response
    */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    }

    /** Destroys the servlet
    */
    public void destroy() {
    }

    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
    * @param request servlet request
    * @param response servlet response
    */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {

        /* creating the document object */
        Document document = new Document(PageSize.A4, 40, 40, 40, 40);

	/* creating an OutputStream */
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try {
            /* creating an instance of the writer */
            PdfWriter writer = PdfWriter.getInstance(document, baos);

            /* get data from session */
            long mealtimeId = FRMQueryString.requestLong(request, "mt");
            int yr = FRMQueryString.requestInt(request, "yr");
            int mn = FRMQueryString.requestInt(request, "mn");
            int dt = FRMQueryString.requestInt(request, "dt");
            Date checklistDate = new Date(yr, mn, dt);
            System.out.println("   checklistDate = " + checklistDate.toString());
            
            long oidCafeChecklist = 0;
            String whereClause = "CHECK_DATE = '" + Formater.formatDate(checklistDate,"yyyy-MM-dd") + "'";
            whereClause += " AND ";
            whereClause += " MEAL_TIME_ID = " + mealtimeId;
            Vector vCCl = PstCafeChecklist.list(0,0,whereClause,"");
            System.out.println(whereClause + "-" + vCCl.size());
            CafeChecklist ccl = new CafeChecklist();
            if (vCCl.size() > 0) {
                ccl = (CafeChecklist) vCCl.get(0);
                oidCafeChecklist = ccl.getOID();
            }
            else {
                oidCafeChecklist = 0;
            }

            MealTime mt3 = new MealTime();
            try {
                mt3 = PstMealTime.fetchExc(mealtimeId);
                //out.print(mt2.getMealTime());
            }
            catch (Exception e) {
            }
            /* adding a Header of page, i.e. : title, align and etc */
            /*
            HeaderFooter header = new HeaderFooter(new Phrase("COMMENT CARD", fontHeader), false);
            header.setAlignment(Element.ALIGN_CENTER);
            header.setBorder(Rectangle.BOTTOM);
            header.setBorderColor(blackColor);
            document.setHeader(header);
             */

            /* opening the document, needed for add something into document */
            document.open();

           Table tableTop = new Table(3);
           tableTop.setCellpadding(0);
           tableTop.setCellspacing(1);
           tableTop.setBorder(0);
           tableTop.setDefaultCellBorderColor(whiteColor);
           tableTop.setBorder(Rectangle.NO_BORDER);
           int widthHeader[] = {30, 30, 30};
    	   tableTop.setWidths(widthHeader);
           tableTop.setWidth(100);

           Cell cellTop = new Cell(new Chunk("MELIA CAFE" + "\n" + "Daily Checklist",fontContent));
           cellTop.setVerticalAlignment(Cell.ALIGN_MIDDLE);
           cellTop.setHorizontalAlignment(Cell.ALIGN_LEFT);
           cellTop.setBackgroundColor(whiteColor);
         	tableTop.addCell(cellTop);

            String dayname[] = new String[7];
            dayname[0] = "Sunday";dayname[1] = "Monday"; dayname[2] = "Tuesday"; dayname[3] = "Wednesday";
            dayname[4] = "Thursday";dayname[5] = "Friday"; dayname[6] = "Saturday";
                            
           cellTop = new Cell(new Chunk("Month/Year: " + (checklistDate.getMonth() + 1) + "/" +
                                        (checklistDate.getYear() + 1900) + "\n" + 
                                        "Day/Date: " + dayname[checklistDate.getDay()] + "/" +
                                        checklistDate.getDate(),fontContent));
           cellTop.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellTop.setVerticalAlignment(Cell.ALIGN_MIDDLE);
           cellTop.setBackgroundColor(whiteColor);
         	tableTop.addCell(cellTop);
                
           cellTop = new Cell(new Chunk("Meal Time: " + "\n" + mt3.getMealTime(),fontContent));
           cellTop.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellTop.setVerticalAlignment(Cell.ALIGN_MIDDLE);
           cellTop.setBackgroundColor(whiteColor);
         	tableTop.addCell(cellTop);
            document.add(tableTop);
            
            /* create header */
            Table table = getTableHeader();

            /* generate employee attendance report's data */
            Cell cell = new Cell("");

            //==================================================================
            Vector vChecklistItem = PstChecklistItem.list(0, 0, "", "CHECKLIST_GROUP_ID");
            long currGroupId = 0;
            long prevGroupId = 0;
            int cnt = 1;
            for (int i=0; i<vChecklistItem.size(); i++) {
                cnt++;
                ChecklistItem ci = (ChecklistItem) vChecklistItem.get(i);
                currGroupId = ci.getChecklistGroupId();
                if (currGroupId != prevGroupId) { 
                    cnt=1;
                    ChecklistGroup cg = new ChecklistGroup();
                    try {
                        cg = PstChecklistGroup.fetchExc(currGroupId);
                    }
                    catch(Exception e) {
                    }

                    cell = new Cell(new Chunk(" ",fontContent));
                    cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
                   cell.setVerticalAlignment(Cell.ALIGN_MIDDLE);
                    cell.setBackgroundColor(whiteColor);
                    cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                        table.addCell(cell);
                    cell = new Cell(new Chunk(" " + cg.getChecklistGroup(),fontContent));
                    cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
                   cell.setVerticalAlignment(Cell.ALIGN_MIDDLE);
                    cell.setBackgroundColor(whiteColor);
                    cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                        table.addCell(cell);
                    cell = new Cell(new Chunk(" ",fontContent));
                    cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
                   cell.setVerticalAlignment(Cell.ALIGN_MIDDLE);
                    cell.setBackgroundColor(whiteColor);
                    cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                        table.addCell(cell);
                    cell = new Cell(new Chunk(" ",fontContent));
                    cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
                   cell.setVerticalAlignment(Cell.ALIGN_MIDDLE);
                    cell.setBackgroundColor(whiteColor);
                    cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                        table.addCell(cell);
                }
                cell = new Cell(new Chunk(" " + cnt + " ",fontContent));
                cell.setHorizontalAlignment(Cell.ALIGN_RIGHT);
               cell.setVerticalAlignment(Cell.ALIGN_MIDDLE);
                cell.setBackgroundColor(whiteColor);
                cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    table.addCell(cell);
                    
                cell = new Cell(new Chunk(" " + ci.getChecklistItem(),fontContent));
                cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
               cell.setVerticalAlignment(Cell.ALIGN_MIDDLE);
                cell.setBackgroundColor(whiteColor);
                cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    table.addCell(cell);
                    
                String wherelist = "";
                String sOID = "";
                wherelist += PstCafeEvaluation.fieldNames[PstCafeEvaluation.FLD_CAFE_CHECKLIST_ID];
                wherelist += "=" + oidCafeChecklist;
                wherelist += " AND " + PstCafeEvaluation.fieldNames[PstCafeEvaluation.FLD_CHECKLIST_ITEM_ID];
                wherelist += "=" + ci.getOID();
                System.out.println("wherelist = " + wherelist);
                Vector vchecklist = PstCafeEvaluation.list(0, 0, wherelist, "");
                CafeEvaluation ce = new CafeEvaluation();
                if (vchecklist.size() > 0) {
                    ce = (CafeEvaluation) vchecklist.get(0);
                    sOID = String.valueOf(ce.getChecklistMarkId());
                    System.out.println("sOID = "+sOID);
                }
                
                ChecklistMark cm = new ChecklistMark();
                try {
                    cm = PstChecklistMark.fetchExc(ce.getChecklistMarkId());
                }
                catch (Exception e) {
                }

                cell = new Cell(new Chunk(" " + cm.getChecklistMark(),fontContent));
                cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
               cell.setVerticalAlignment(Cell.ALIGN_MIDDLE);
                cell.setBackgroundColor(whiteColor);
                cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    table.addCell(cell);
                    
                cell = new Cell(new Chunk(" " + ce.getRemark(),fontContent));
                cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
               cell.setVerticalAlignment(Cell.ALIGN_MIDDLE);
                cell.setBackgroundColor(whiteColor);
                cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    table.addCell(cell);
                  
                prevGroupId = currGroupId;
            } 
            document.add(table);
        }
        catch(DocumentException de) {
            System.err.println(de.getMessage());
            de.printStackTrace();
        }

        /* closing the document */
        document.close();

        /* we have written the pdfstream to a ByteArrayOutputStream, now going to write this outputStream to the ServletOutputStream
		 * after we have set the contentlength
         */
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }


    /**
    * this method used to create header table
    */
    public static Table getTableHeader() throws BadElementException, DocumentException {

           Table table = new Table(4);
           table.setCellpadding(2);
           //table.setCellspacing(1);
           //table.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
           int widthHeader[] = {5, 30, 15, 50};
    	   table.setWidths(widthHeader);
           table.setWidth(100);

           Cell cell = new Cell(new Chunk(" No.",fontContent));
           cell.setVerticalAlignment(Cell.ALIGN_MIDDLE);
           cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
           cell.setBackgroundColor(summaryColor);
         	table.addCell(cell);

           cell = new Cell(new Chunk(" Checklisted Items",fontContent));
           cell.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cell.setVerticalAlignment(Cell.ALIGN_MIDDLE);
           cell.setBackgroundColor(summaryColor);
         	table.addCell(cell);
                
           cell = new Cell(new Chunk(" Mark",fontContent));
           cell.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cell.setVerticalAlignment(Cell.ALIGN_MIDDLE);
           cell.setBackgroundColor(summaryColor);
         	table.addCell(cell);

           cell = new Cell(new Chunk(" Remark",fontContent));
           cell.setVerticalAlignment(Cell.ALIGN_MIDDLE);
           cell.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cell.setBackgroundColor(summaryColor);
         	table.addCell(cell);

           return table;
    }

}

