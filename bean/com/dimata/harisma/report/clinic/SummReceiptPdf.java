/* Generated by Together */
/*
 * SummReceiptPdf.java
 * @author gedhy
 * @version 1.0
 * Created on July 13, 2002, 09:10 PM
 */

package com.dimata.harisma.report.clinic;

/* package java */
import java.util.*;
import java.text.*;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;

/* package servlet */
import javax.servlet.*;
import javax.servlet.http.*;

/* package lowagie */
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;

/* package qdep */
import com.dimata.util.*;
import com.dimata.qdep.form.*;

/* package harisma */
import com.dimata.harisma.entity.masterdata.*;
import com.dimata.harisma.entity.employee.*;
import com.dimata.harisma.entity.clinic.*;
import com.dimata.harisma.entity.admin.*;

public class SummReceiptPdf extends HttpServlet {

    /** Attribute declaration
    */
    public static String[] textCurrency = {"IDR","USD"};

	/* declaration constant */
    public static Color border = new Color(0x00, 0x00, 0x00);
    public static Color blackColor = new Color(0,0,0);
    public static Color whiteColor = new Color(255,255,255);
    public static Color titleColor = new Color(240,240,240);
    public static Color summaryColor = new Color(255,255,255);
    public static String formatDate  = "MMM dd, yyyy";
    public static String formatNumber = "#,###";

    /* setting some fonts in the color chosen by the user */
  //  public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 12, Font.BOLD, blackColor);
    public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 10, Font.NORMAL, blackColor);
   // public static Font fontLsContent = new Font(Font.TIMES_NEW_ROMAN, 10, Font.NORMAL, blackColor);


    // setting some fonts in the color chosen by the user
    public static Font fontMainHeader = new Font(Font.TIMES_NEW_ROMAN, 12, Font.BOLD, border);
    public static Font fontMainHeader1 = new Font(Font.TIMES_NEW_ROMAN, 11, Font.BOLD, border);
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.BOLD, border);
    public static Font fontType = new Font(Font.TIMES_NEW_ROMAN, 9, Font.BOLD, border);
    public static Font fontLsContent = new Font(Font.TIMES_NEW_ROMAN, 9);
    public static Font fontLsContent1 = new Font(Font.TIMES_NEW_ROMAN, 9, Font.BOLDITALIC, border);
    public static Font fontLsHeader = new Font(Font.TIMES_NEW_ROMAN, 9);
    public static Font fontNotAvb = new Font(Font.TIMES_NEW_ROMAN, 12, Font.BOLDITALIC, border);


    /** Initializes the servlet
    */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /** Handles the HTTP <code>GET</code> method.
    * @param request servlet request
    * @param response servlet response
    */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    } 

    /** Handles the HTTP <code>POST</code> method.
    * @param request servlet request
    * @param response servlet response
    */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    }

    /** Destroys the servlet
    */
    public void destroy() {
    }

    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
    * @param request servlet request
    * @param response servlet response
    */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {

        /* setting some constant */
        String currText[] = {"(IRD)","(US$)"};

        /* creating the document object */
        Document document = new Document(PageSize.A4, 30, 30, 50, 50);

		/* creating an OutputStream */
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try {

            /* creating an instance of the writer */
            PdfWriter writer = PdfWriter.getInstance(document, baos);

            /* get data from session */
            HttpSession sessSumReceipt = request.getSession(true);
            Vector vectSummReceipt = null;
            try{
	            vectSummReceipt = (Vector)sessSumReceipt.getValue("SUMM_RECEIPT");
            }catch(Exception e){
                System.out.println("Exc : "+e.toString());
            }

            Vector listSummReceipt = (Vector)vectSummReceipt.get(0);
            String strPeriode = (String)vectSummReceipt.get(1);
            String strMedicalType = (String)vectSummReceipt.get(2);
            String strDepartment = (String)vectSummReceipt.get(3);

		    /* adding a Header of page, i.e. : title, align and etc */
          /*  HeaderFooter header = new HeaderFooter(new Phrase("SUMMARY RECEIPT REPORT (B)\n"+strMedicalType.toUpperCase() +
                                  "\nPERIODE : "+strPeriode.toUpperCase(), fontHeader), false);
            header.setAlignment(Element.ALIGN_LEFT);
            header.setBorder(Rectangle.BOTTOM);
            header.setBorderColor(blackColor);
            document.setHeader(header);     */

            /* opening the document, needed for add something into document */
            document.open();

            document.add(getHeader(strPeriode));

            /* create header */
	        Table tableSummData = getTableHeader();

            /* generate employee attendance report's data */
            Cell cellSummData = new Cell("");

	        double totalReceipt = 0;
            double totalSumReceipt = 0;
            long departmentId = 0;
            String departmentName = "";
            if(listSummReceipt!=null && listSummReceipt.size()>0){
				for (int i=0; i<listSummReceipt.size(); i++) {
				
					Vector tempResult = (Vector)listSummReceipt.get(i);
					Employee emp = (Employee)tempResult.get(0);
					Department dept = (Department)tempResult.get(1);
					MedicalRecord medRec = (MedicalRecord)tempResult.get(2);

                    totalReceipt = totalReceipt + medRec.getTotal();
                    totalSumReceipt = totalSumReceipt + medRec.getTotal();

					if(departmentId!=dept.getOID()){

                        if(departmentId!=0){
				            cellSummData = new Cell(new Chunk(" SUB TOTAL DEPARTMENT "+departmentName.toUpperCase(),fontLsContent));
				            cellSummData.setHorizontalAlignment(Cell.ALIGN_LEFT);
				            cellSummData.setColspan(3);
				            cellSummData.setBackgroundColor(summaryColor);
				            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
				          	tableSummData.addCell(cellSummData);
		
				            cellSummData = new Cell(new Chunk(Formater.formatNumber(totalReceipt,formatNumber),fontLsContent));
				            cellSummData.setHorizontalAlignment(Cell.ALIGN_RIGHT);
				            cellSummData.setBackgroundColor(summaryColor);
				            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
				          	tableSummData.addCell(cellSummData);

       						totalReceipt = 0;
                        }

			            cellSummData = new Cell(new Chunk(emp.getEmployeeNum(),fontLsContent));
			            cellSummData.setHorizontalAlignment(Cell.ALIGN_LEFT);
			            cellSummData.setBackgroundColor(whiteColor);
			            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableSummData.addCell(cellSummData);
	
			            cellSummData = new Cell(new Chunk(emp.getFullName(),fontLsContent));
			            cellSummData.setHorizontalAlignment(Cell.ALIGN_LEFT);
			            cellSummData.setBackgroundColor(whiteColor);
			            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableSummData.addCell(cellSummData);
	
			            cellSummData = new Cell(new Chunk(dept.getDepartment(),fontLsContent));
			            cellSummData.setHorizontalAlignment(Cell.ALIGN_LEFT);
			            cellSummData.setBackgroundColor(whiteColor);
			            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableSummData.addCell(cellSummData);
	
			            cellSummData = new Cell(new Chunk(Formater.formatNumber(medRec.getTotal(),formatNumber),fontLsContent));
			            cellSummData.setHorizontalAlignment(Cell.ALIGN_RIGHT);
			            cellSummData.setBackgroundColor(whiteColor);
			            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableSummData.addCell(cellSummData);

                        departmentId = dept.getOID();
                        departmentName = dept.getDepartment();

                    }else{

			            cellSummData = new Cell(new Chunk(emp.getEmployeeNum(),fontLsContent));
			            cellSummData.setHorizontalAlignment(Cell.ALIGN_LEFT);
			            cellSummData.setBackgroundColor(whiteColor);
			            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableSummData.addCell(cellSummData);
	
			            cellSummData = new Cell(new Chunk(emp.getFullName(),fontLsContent));
			            cellSummData.setHorizontalAlignment(Cell.ALIGN_LEFT);
			            cellSummData.setBackgroundColor(whiteColor);
			            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableSummData.addCell(cellSummData);
	
			            cellSummData = new Cell(new Chunk(dept.getDepartment(),fontLsContent));
			            cellSummData.setHorizontalAlignment(Cell.ALIGN_LEFT);
			            cellSummData.setBackgroundColor(whiteColor);
			            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableSummData.addCell(cellSummData);
	
			            cellSummData = new Cell(new Chunk(Formater.formatNumber(medRec.getTotal(),formatNumber),fontLsContent));
			            cellSummData.setHorizontalAlignment(Cell.ALIGN_RIGHT);
			            cellSummData.setBackgroundColor(whiteColor);
			            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableSummData.addCell(cellSummData);

                    }

                    if (!writer.fitsPage(tableSummData)) {
                        tableSummData.deleteLastRow();
                        i--;
                        document.add(tableSummData);
                        document.newPage();
				        tableSummData = getTableHeader();
                    }
	            }
            }

            cellSummData = new Cell(new Chunk(" SUB TOTAL DEPARTMENT "+departmentName.toUpperCase(),fontLsContent));
            cellSummData.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellSummData.setColspan(3);
            cellSummData.setBackgroundColor(summaryColor);
            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
          	tableSummData.addCell(cellSummData);

            cellSummData = new Cell(new Chunk(Formater.formatNumber(totalReceipt,formatNumber),fontLsContent));
            cellSummData.setHorizontalAlignment(Cell.ALIGN_RIGHT);
            cellSummData.setBackgroundColor(summaryColor);
            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
          	tableSummData.addCell(cellSummData);


            cellSummData = new Cell(new Chunk(" TOTAL " + strMedicalType.toUpperCase(),fontLsContent));
            cellSummData.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellSummData.setColspan(3);
            cellSummData.setBackgroundColor(titleColor);
            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
          	tableSummData.addCell(cellSummData);

            cellSummData = new Cell(new Chunk(Formater.formatNumber(totalSumReceipt,formatNumber),fontLsContent));
            cellSummData.setHorizontalAlignment(Cell.ALIGN_RIGHT);
            cellSummData.setBackgroundColor(titleColor);
            cellSummData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
          	tableSummData.addCell(cellSummData);

            document.add(tableSummData);
        }
        catch(DocumentException de) {
            System.err.println(de.getMessage());
            de.printStackTrace();
        }

        /* closing the document */
        document.close();

        /* we have written the pdfstream to a ByteArrayOutputStream, now going to write this outputStream to the ServletOutputStream
		 * after we have set the contentlength
         */
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }


    /* this method make table header */
    private static Table getHeader(String periode) throws BadElementException, DocumentException {

		int ctnInt[] = {80,20};
        Table list = new Table(2);
        list.setBorderColor(new Color(255,255,255));
        list.setWidth(90);
        list.setWidths(ctnInt);
        list.setBorderWidth(0);
        list.setPadding(1);
        list.setSpacing(0);
        //list.setAlignment(Element.ALIGN_LEFT);

        Cell hcell = new Cell(new Chunk("CLINIC - MELIA BALI - NUSA DUA", fontLsContent1));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hcell.setColspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("SUMMARY RECEIVE REPORT (C)", fontMainHeader));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hcell.setColspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("PERIODE   :  "+periode.toUpperCase(), fontMainHeader1));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Report Date : "+(Formater.formatDate(new Date(),"dd/MM/yyyy")).toUpperCase(), fontLsContent1));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("", fontLsContent1));
        hcell.setBorder(Rectangle.TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        hcell.setColspan(2);
        list.addCell(hcell);

        return list;
    }


    /**
    * this method used to create header table
    */
    public static Table getTableHeader() throws BadElementException, DocumentException {

           Table tableSummHeader = new Table(4);
           tableSummHeader.setCellpadding(1);
           tableSummHeader.setCellspacing(1);
           tableSummHeader.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
	       int widthHeader[] = {10, 45, 30, 15};
    	   tableSummHeader.setWidths(widthHeader);
           tableSummHeader.setWidth(90);

           Cell cellSummHeader = new Cell(new Chunk(" EMP_NO",fontLsContent));
           cellSummHeader.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellSummHeader.setBackgroundColor(titleColor);
           tableSummHeader.addCell(cellSummHeader);

           cellSummHeader = new Cell(new Chunk(" EMPLOYEE NAME",fontLsContent));
           cellSummHeader.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellSummHeader.setBackgroundColor(titleColor);
           tableSummHeader.addCell(cellSummHeader);

           cellSummHeader = new Cell(new Chunk(" DESCRIPTION",fontLsContent));
           cellSummHeader.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellSummHeader.setBackgroundColor(titleColor);
           tableSummHeader.addCell(cellSummHeader);

           cellSummHeader = new Cell(new Chunk(" TOTAL",fontLsContent));
           cellSummHeader.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellSummHeader.setBackgroundColor(titleColor);
           tableSummHeader.addCell(cellSummHeader);

           return tableSummHeader;
    }

}

