/* Generated by Together */


package com.dimata.harisma.report.clinic;

import java.sql.*;
import java.awt.Color;
import java.awt.Point;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;

import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import java.util.Date;

import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.html.HtmlWriter;
import com.lowagie.text.Font;
import com.dimata.util.*;
import com.dimata.harisma.entity.search.*;
import com.dimata.harisma.form.search.*;
import com.dimata.harisma.entity.clinic.*;
import com.dimata.harisma.entity.masterdata.*;
import com.dimata.harisma.entity.employee.*;
import com.dimata.harisma.session.clinic.*;

public class GuestHandlingPdf extends HttpServlet
{
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }
    
    /** Destroys the servlet.
     */
    public void destroy() {
        
    }

    // setting the color values
    public static Color border = new Color(0x00, 0x00, 0x00);
    
    // setting some fonts in the color chosen by the user
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 14, Font.BOLD, border);
    public static Font fontLamp = new Font(Font.TIMES_NEW_ROMAN, 12);
    public static Font fontLsHeader = new Font(Font.TIMES_NEW_ROMAN, 14, Font.BOLD, border);
    public static Font fontLsContent = new Font(Font.TIMES_NEW_ROMAN, 12);
    public static Font fontNotAvb = new Font(Font.TIMES_NEW_ROMAN, 12, Font.BOLDITALIC, border);

    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {

        Color bgColor = new Color(200,200,200);
        Rectangle rectangle = new  Rectangle( 20, 20, 20, 20);
        rectangle.rotate();
        //Document document = new Document(rectangle);
        Document document = new Document(PageSize.A4.rotate(), 30, 30, 50, 50);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try{

        //step2.2: creating an instance of the writer
        PdfWriter writer = PdfWriter.getInstance(document, baos);
         
        // step 3.1: adding some metadata to the document
        document.addSubject("This is a subject.");
        document.addSubject("This is a subject two.");

        document.open();

     	/* get data from session */
        Hashtable listAll = new Hashtable();
        HttpSession sess = request.getSession(true);
        try{
         	listAll = (Hashtable)sess.getValue("GUEST_HANDLING");
        }catch(Exception e){
            System.out.println("Exc : "+e.toString());
            listAll = new Hashtable();
        }

        Vector listGuestHandling = new Vector(1,1);
        int start = 0;
        if((listAll != null) && (listAll.size()>0)){

            Iterator iter = listAll.keySet().iterator();
            String key = (String)iter.next();
            listGuestHandling = (Vector)listAll.get(key);

            Table  list = getHeader(key);

	        for(int ls = 0;ls< listGuestHandling.size();ls++)
	          {
	            GuestHandling guestHandling = (GuestHandling)listGuestHandling.get(ls);

	            start = start + 1;

	            Cell lisContent = new Cell(new Chunk(String.valueOf(start), fontLsContent));
	            lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	       		lisContent.setVerticalAlignment(Element.ALIGN_TOP);
	            list.addCell(lisContent);  //col 1
	
	            lisContent = new Cell(new Chunk(Formater.formatDate(guestHandling.getDate(),"dd/MM/yy"), fontLsContent));
	            lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	            lisContent.setVerticalAlignment(Element.ALIGN_TOP);
	            list.addCell(lisContent);  //col 2
	
	            lisContent = new Cell(new Chunk(guestHandling.getGuestName(), fontLsContent));
	            lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
	            lisContent.setVerticalAlignment(Element.ALIGN_TOP);
	            list.addCell(lisContent);  //col 3
	
	            lisContent = new Cell(new Chunk(guestHandling.getRoom(), fontLsContent));
	            lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	         	lisContent.setVerticalAlignment(Element.ALIGN_TOP);
	            list.addCell(lisContent);  //col 4
	
	            lisContent = new Cell(new Chunk(guestHandling.getDiagnosis(), fontLsContent));
	            lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
	      		lisContent.setVerticalAlignment(Element.ALIGN_TOP);
	            list.addCell(lisContent);  //col 5
	
	            lisContent = new Cell(new Chunk(guestHandling.getTreatment(), fontLsContent));
	            lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
	        	lisContent.setVerticalAlignment(Element.ALIGN_TOP);
	            list.addCell(lisContent);  //col 6
	
	            lisContent = new Cell(new Chunk(guestHandling.getDescription(), fontLsContent));
	            lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
	       	    lisContent.setVerticalAlignment(Element.ALIGN_TOP);
	            list.addCell(lisContent);  //col 7

	           if (!writer.fitsPage(list)) {
                    list.deleteLastRow();
                    ls--;
                    document.add(list);
                    document.newPage();
                    list = getHeader(key);
                }

	          }

              document.add(list);

         }else{

              int headerInt[] = {100};
              Table tbl = new Table(1);
              tbl.setBorderColor(new Color(255,255,255));
              tbl.setWidth(100);
	          tbl.setWidths(headerInt);
	          tbl.setBorderWidth(1);
	          tbl.setCellpadding(1);
	          tbl.setCellspacing(1);
	
              Cell hcell = new Cell(new Chunk("No Employee Visit available", fontNotAvb));
              hcell.setBorderColor(new Color(255,255,255));
              tbl.addCell(hcell);

              document.add(tbl);
          }

         }catch(Exception e){
                System.out.println("Exception e : "+e.toString());
         }


        // step 5: closing the document
        document.close();
        
        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();

    }


    /* this method make table header */
    private static Table getHeader(String titleMonth) throws BadElementException, DocumentException {

        int ctnInt[] = {5,7,20,7,15,23,23};
        Table list = new Table(7);
        list.setBorderColor(new Color(255,255,255));
        list.setWidth(100);
        list.setWidths(ctnInt);
        list.setBorderWidth(1);
        list.setPadding(1);
        list.setSpacing(1);

		Cell hcell = new Cell(new Chunk("GUEST HANDLING", fontHeader));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(7);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("For the Month of "+titleMonth, fontHeader));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(7);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("", fontHeader));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(7);
        list.addCell(hcell);

        Cell lisHeader = new Cell(new Chunk("No", fontLsHeader));
        lisHeader.setHorizontalAlignment(Element.ALIGN_CENTER);
        lisHeader.setVerticalAlignment(Element.ALIGN_TOP);
        list.addCell(lisHeader);  //col 1

        lisHeader = new Cell(new Chunk("Date", fontLsHeader));
        lisHeader.setHorizontalAlignment(Element.ALIGN_CENTER);
        lisHeader.setVerticalAlignment(Element.ALIGN_TOP);
        list.addCell(lisHeader);  //col 2

  		lisHeader = new Cell(new Chunk("Name", fontLsHeader));
        lisHeader.setHorizontalAlignment(Element.ALIGN_CENTER);
        lisHeader.setVerticalAlignment(Element.ALIGN_TOP);
        list.addCell(lisHeader);  //col 3

        lisHeader = new Cell(new Chunk("Room", fontLsHeader));
        lisHeader.setHorizontalAlignment(Element.ALIGN_CENTER);
        lisHeader.setVerticalAlignment(Element.ALIGN_TOP);
        list.addCell(lisHeader);  //col 4

        lisHeader = new Cell(new Chunk("Diagnosis", fontLsHeader));
        lisHeader.setHorizontalAlignment(Element.ALIGN_CENTER);
        lisHeader.setVerticalAlignment(Element.ALIGN_TOP);
        list.addCell(lisHeader);  //col 5

        lisHeader = new Cell(new Chunk("Treatment", fontLsHeader));
        lisHeader.setHorizontalAlignment(Element.ALIGN_CENTER);
        lisHeader.setVerticalAlignment(Element.ALIGN_TOP);
        list.addCell(lisHeader);  //col 6

        lisHeader = new Cell(new Chunk("Remarks", fontLsHeader));
        lisHeader.setHorizontalAlignment(Element.ALIGN_CENTER);
     	lisHeader.setVerticalAlignment(Element.ALIGN_TOP);
        list.addCell(lisHeader);  //col 7

        return list;
    }

    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
       processRequest(request, response);
    }
    
    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}

