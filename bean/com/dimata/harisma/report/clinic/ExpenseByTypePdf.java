/* Generated by Together */
package com.dimata.harisma.report.clinic;


import java.sql.*;
import java.awt.Color;
import java.awt.Point;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;

import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import java.util.Date;

import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.html.HtmlWriter;
import com.lowagie.text.Font;
import com.dimata.util.*;
import com.dimata.harisma.entity.search.*;
import com.dimata.harisma.form.search.*;
import com.dimata.harisma.entity.clinic.*;
import com.dimata.harisma.entity.masterdata.*;
import com.dimata.harisma.entity.employee.*;
import com.dimata.harisma.session.clinic.*;


public class ExpenseByTypePdf extends HttpServlet
{

    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }
    
    /** Destroys the servlet.
     */
    public void destroy() {
        
    }


 	// setting the color values
     public static Color border = new Color(0x00, 0x00, 0x00);
     public static Color bgColor = new Color(240, 240, 240);
     
     // setting some fonts in the color chosen by the user
     public static Font fontMainHeader = new Font(Font.TIMES_NEW_ROMAN, 12, Font.BOLD, border);
     public static Font fontMainHeader1 = new Font(Font.TIMES_NEW_ROMAN, 11, Font.BOLD, border);
     public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.BOLD, border);
     public static Font fontType = new Font(Font.TIMES_NEW_ROMAN, 9, Font.BOLD, border);
     public static Font fontLsContent = new Font(Font.TIMES_NEW_ROMAN, 9);
     public static Font fontLsContent1 = new Font(Font.TIMES_NEW_ROMAN, 9, Font.BOLDITALIC, border);
     public static Font fontLsHeader = new Font(Font.TIMES_NEW_ROMAN, 9);
     public static Font fontNotAvb = new Font(Font.TIMES_NEW_ROMAN, 12, Font.BOLDITALIC, border);


    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {

        //Color bgColor = new Color(200,200,200);
        Rectangle rectangle = new  Rectangle( 20, 20, 20, 20);
        rectangle.rotate();
        //Document document = new Document(rectangle);
        Document document = new Document(PageSize.A4, 30, 30, 50, 50);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try{

        //step2.2: creating an instance of the writer
        PdfWriter writer = PdfWriter.getInstance(document, baos);
         
        // step 3.1: adding some metadata to the document
        document.addSubject("This is a subject.");
        document.addSubject("This is a subject two.");

        document.open();

     	/* get data from session */
        Vector listAll = new Vector();
        HttpSession sess = request.getSession(true);
        try{
         	listAll = (Vector)sess.getValue("EXPENSE_TYPE");
        }catch(Exception e){
            System.out.println("Exc : "+e.toString());
            listAll = new Vector();
        }

        if(listAll != null && listAll.size()>0){

            String periode = (String)listAll.get(0);
            Vector vctContent = (Vector)listAll.get(1);

            document.add(getHeader(periode));

          /*  Table list1 = new Table(1);
	        list1.setWidth(90);
	        list1.setBorderWidth(0);
	        list1.setCellpadding(1);
	        list1.setCellspacing(0);

            Cell hcell1 = null;
            hcell1 = new Cell(new Chunk("", fontLsContent));
            hcell1.setVerticalAlignment(0);
            hcell1.setHorizontalAlignment(Element.ALIGN_LEFT);
            hcell1.setBorder(Rectangle.TOP);
            list1.addCell(hcell1);

            document.add(list1);  */

        	for(int d=0;d<vctContent.size();d++){

            	Vector vct = (Vector)vctContent.get(d);
                MedicalType medType = (MedicalType)vct.get(0);
                Vector cnt = (Vector)vct.get(1);
                String st = (String)vct.get(2);

                Table tab = getContentOwner(medType);
                document.add(tab);
                document.add(getContent(cnt, bgColor, document, writer, tab, getHeader(periode)));
               	document.add(getAmount(st, medType));

                //------
                Table list2 = new Table(1);
		        list2.setWidth(90);
                list2.setBorderColor(new Color(255,255,255));
		        list2.setBorderWidth(0);
		        list2.setCellpadding(1);
		        list2.setCellspacing(0);
	
	            Cell hcell2 = null;
	            hcell2 = new Cell(new Chunk("", fontLsContent));
                hcell2.setBorderColor(new Color(255,255,255));
	            hcell2.setVerticalAlignment(0);
	            hcell2.setHorizontalAlignment(Element.ALIGN_LEFT);
	            list2.addCell(hcell2);
	
                if(writer.fitsPage(list2)){
                    document.add(list2);
                }


             }//end for



         }else{

              int headerInt[] = {100};
              Table tbl = new Table(1);
              tbl.setBorderColor(new Color(255,255,255));
              tbl.setWidth(100);
	          tbl.setWidths(headerInt);
	          tbl.setBorderWidth(1);
	          tbl.setCellpadding(1);
	          tbl.setCellspacing(1);
	
              Cell hcell = new Cell(new Chunk("No Medical Expense available", fontNotAvb));
              hcell.setBorderColor(new Color(255,255,255));
              tbl.addCell(hcell);

              document.add(tbl);
          }

         }catch(Exception e){
                System.out.println("Exception e : "+e.toString());
         }

        // step 5: closing the document
        document.close();
        
        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();

    }

    /* this method make table header */
    private static Table getHeader(String periode) throws BadElementException, DocumentException {

		int ctnInt[] = {80,20};
        Table list = new Table(2);
        list.setBorderColor(new Color(255,255,255));
        list.setWidth(90);
        list.setWidths(ctnInt);
        list.setBorderWidth(0);
        list.setPadding(1);
        list.setSpacing(0);
        //list.setAlignment(Element.ALIGN_LEFT);

        Cell hcell = new Cell(new Chunk("CLINIC - MELIA BALI - NUSA DUA", fontLsContent1));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hcell.setColspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("SUMMARY RECEIVE REPORT (C)", fontMainHeader));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
        hcell.setColspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("PERIODE : "+periode.toUpperCase(), fontMainHeader1));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Report Date : "+(Formater.formatDate(new Date(),"dd/MM/yyyy")).toUpperCase(), fontLsContent1));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("", fontLsContent1));
        hcell.setBorder(Rectangle.TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        hcell.setColspan(2);
        list.addCell(hcell);

        return list;
    }


    public static Table getContentOwner(MedicalType medType) throws BadElementException, DocumentException {
        Table list = new Table(1);
        list.setBorderColor(new Color(255,255,255));
        list.setWidth(90);
        list.setBorderWidth(0);
        list.setPadding(1);
        list.setSpacing(0);
        //list.setAlignment(Element.ALIGN_LEFT);

        Cell hcell = new Cell(new Chunk(medType.getTypeCode() + " "+(medType.getTypeName()).toUpperCase(), fontMainHeader1));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
        list.addCell(hcell);

        return list;

    }

    public static Table getContentHeader(Color bgColor)throws BadElementException, DocumentException {
        int ctnInt[] = {15,55,30};
        Table list = new Table(3);
        list.setWidth(90);
        list.setWidths(ctnInt);
        list.setBorderWidth(0);
        list.setPadding(1);
        list.setSpacing(0);
       //list.setAlignment(Element.ALIGN_LEFT);

        Cell hcell = new Cell(new Chunk("DEPT_CD", fontHeader));
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        hcell.setBackgroundColor(bgColor);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("DESCRIPTION", fontHeader));
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        hcell.setBackgroundColor(bgColor);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("TOTAL", fontHeader));
        hcell.setBackgroundColor(bgColor);
		hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        return list;
    }


    public static Table getContent(Vector vct, Color bgColor, Document document,
        PdfWriter writer, Table cntHead, Table header)throws BadElementException, DocumentException {

        Table list = getContentHeader(bgColor);
		if(vct!=null && vct.size()>0){
            for(int i=0; i<vct.size(); i++){

                Vector temp = (Vector)vct.get(i);

                Cell hcell = new Cell(new Chunk((String)temp.get(0), fontLsContent));
                hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
		        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		        list.addCell(hcell);
		
		        hcell = new Cell(new Chunk(((String)temp.get(1)).toUpperCase(), fontLsContent));
		        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
		        list.addCell(hcell);
		
		        hcell = new Cell(new Chunk((String)temp.get(2), fontLsContent));
				hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		        hcell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		        list.addCell(hcell);


                if(!writer.fitsPage(list)){
                    list.deleteLastRow();
                    i--;
					list.deleteLastRow();
                    i--;
                    document.add(list);
                    document.newPage();
                    document.add(header);
                    //document.add(line);
                    document.add(cntHead);

                    list =  getContentHeader(bgColor);
                }


            }
        }
        else{
	        Cell hcell = new Cell(new Chunk("", fontLsContent));
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk("", fontLsContent));
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk("", fontLsContent));
			hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        list.addCell(hcell);
        }

        return list;
    }

    public static Table getAmount(String str, MedicalType medType)throws BadElementException, DocumentException {
        int ctnInt[] = {15,55,30};
        Table list = new Table(3);
        list.setWidth(90);
        list.setWidths(ctnInt);
        list.setBorderWidth(0);
        list.setPadding(1);
        list.setSpacing(0);
       //list.setAlignment(Element.ALIGN_LEFT);

        Cell hcell = new Cell(new Chunk("", fontHeader));
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
       // hcell.setBackgroundColor(bgColor);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("TOTAL "+(medType.getTypeName()).toUpperCase(), fontHeader));
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
       // hcell.setBackgroundColor(bgColor);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk(str, fontHeader));
      //  hcell.setBackgroundColor(bgColor);
		hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        hcell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        list.addCell(hcell);

        return list;
    }



    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
       processRequest(request, response);
    }
    
    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }

}
