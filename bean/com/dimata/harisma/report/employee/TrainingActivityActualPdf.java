/* Generated by Together */

package com.dimata.harisma.report.employee;

import java.sql.*;
import java.awt.Color;
import java.awt.Point;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;

import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import java.util.Date;

import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.html.HtmlWriter;
import com.lowagie.text.Font;
import com.dimata.util.*;
import com.dimata.harisma.entity.masterdata.*;
import com.dimata.harisma.entity.employee.*;

public class TrainingActivityActualPdf extends HttpServlet
{
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }
    
    /** Destroys the servlet.
     */
    public void destroy() {
        
    }


 	// setting the color values
     public static Color border = new Color(0x00, 0x00, 0x00);
     
     // setting some fonts in the color chosen by the user
     public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 14, Font.BOLD, border);
     public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 14, Font.ITALIC, border);
     public static Font fontListHeader = new Font(Font.TIMES_NEW_ROMAN, 12, Font.BOLD, border);
     public static Font fontLsContent = new Font(Font.TIMES_NEW_ROMAN, 12);



    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {

        Color bgColor = new Color(200,200,200);
        Rectangle rectangle = new  Rectangle( 20, 20, 20, 20);
        rectangle.rotate();
        //Document document = new Document(rectangle);
        Document document = new Document(PageSize.A4.rotate(), 30, 30, 50, 50);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try{

        //step2.2: creating an instance of the writer
        PdfWriter writer = PdfWriter.getInstance(document, baos);
         
        // step 3.1: adding some metadata to the document
        document.addSubject("This is a subject.");
        document.addSubject("This is a subject two.");

        document.open();

     	/* get data from session */
        Vector listTraining = new Vector();
        Date dt = new Date();
        HttpSession sess = request.getSession(true);
        try{
         	Hashtable hash = (Hashtable)sess.getValue("TRAINING_ACTIVITY");
            if((hash != null)&& (hash.size()>0)){
              Iterator iter = hash.keySet().iterator();
              if(iter.hasNext())
                 dt = (Date)iter.next();
              listTraining = (Vector)hash.get(dt);
            }
        }catch(Exception e){
            System.out.println("Exc : "+e.toString());
            listTraining = new Vector();
        }



        if((listTraining != null) && (listTraining.size()>0))
        {
              Table list = getHeader(dt);
              long employeeId = 0;
              int  num = 0;
	          for(int ls = 0;ls< listTraining.size();ls++)
	          {
                Vector temp =(Vector)listTraining.get(ls);
				TrainingActivityActual trnActivityActual = (TrainingActivityActual)temp.get(0);
				TrainingActivityPlan trnActivityPlan = (TrainingActivityPlan)temp.get(1);
				Department department = (Department)temp.get(2);

	            Cell lisContent = new Cell(new Chunk(String.valueOf(ls+1)+".", fontLsContent));
	       		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	            list.addCell(lisContent);  //col 1
	
	            lisContent = new Cell(new Chunk(Formater.formatDate(trnActivityActual.getDate(),"dd-MMM-yy"), fontLsContent));
	            lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	            list.addCell(lisContent);  //col 2
	
	            lisContent = new Cell(new Chunk(Formater.formatDate(trnActivityActual.getStartTime(),"HH.mm")+" - "+Formater.formatDate(trnActivityActual.getEndTime(),"HH.mm"), fontLsContent));
	            lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	            list.addCell(lisContent);  //col 3

                Training trn = new Training();
				try{
                    trnActivityPlan = PstTrainingActivityPlan.fetchExc(trnActivityActual.getTrainingActivityPlanId());
					trn = PstTraining.fetchExc(trnActivityPlan.getTrainingId());
				}
				catch(Exception e){
					trn = new Training();
				}
	            //lisContent = new Cell(new Chunk(trnActivityPlan.getProgram(), fontLsContent));
                lisContent = new Cell(new Chunk(trn.getName(), fontLsContent));
	            lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
	            list.addCell(lisContent);  //col 4
	
	            lisContent = new Cell(new Chunk(department.getDepartment(), fontLsContent));
	      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
	            list.addCell(lisContent);  //col 5

                lisContent = new Cell(new Chunk(trnActivityPlan.getTrainer(), fontLsContent));
	      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
	            list.addCell(lisContent);  //col 6

                lisContent = new Cell(new Chunk(String.valueOf(trnActivityActual.getAtendees()), fontLsContent));
	      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	            list.addCell(lisContent);  //col 7

                lisContent = new Cell(new Chunk(trnActivityActual.getVenue(), fontLsContent));
	      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
	            list.addCell(lisContent);  //col 8

                lisContent = new Cell(new Chunk(trnActivityActual.getRemark(), fontLsContent));
	      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
	            list.addCell(lisContent);  //col 9


                if (!writer.fitsPage(list)) {
                    list.deleteLastRow();
                    ls--;
                    document.add(list);
                    document.newPage();
                    list = getHeader(dt);
                    document.add(list);
                }

	          }

              document.add(list);

         }

         }catch(Exception e){
                System.out.println("Exception e : "+e.toString());
         }

        // step 5: closing the document
        document.close();
        
        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();

    }

    /* this method make table header */
    private static Table getHeader(Date date) throws BadElementException, DocumentException {

		int ctnInt[] = {3,8,10,20,14,10,5,10,20};
        Table list = new Table(9);
        list.setBorderColor(new Color(255,255,255));
        list.setWidth(100);
        list.setWidths(ctnInt);
        list.setBorderWidth(1);
        list.setCellpadding(1);
        list.setCellspacing(1);

        Cell hcell = new Cell(new Chunk("TRAINING ACTIVITIES REPORT", fontTitle));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setColspan(9);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Month : "+Formater.formatDate(date,"MMMM yyyy"), fontTitle));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setColspan(9);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("", fontTitle));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setColspan(9);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);


        hcell = new Cell(new Chunk("No.", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Date", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Time", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Topic", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Department \nTeam", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Trainer", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Attd \n(pax)", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Veneu", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Remark", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        return list;
    }



    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
       processRequest(request, response);
    }
    
    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}

