/* Generated by Together */

package com.dimata.harisma.report.employee;

import java.sql.*;
import java.awt.Color;
import java.awt.Point;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;

import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import java.util.Date;

import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.html.HtmlWriter;
import com.lowagie.text.Font;
import com.dimata.util.*;
import com.dimata.harisma.entity.masterdata.*;
import com.dimata.harisma.entity.employee.*;


public class TrainingActivityPlanPdf  extends HttpServlet
{
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }
    
    /** Destroys the servlet.
     */
    public void destroy() {
        
    }


 	// setting the color values
     public static Color border = new Color(0x00, 0x00, 0x00);
     
     // setting some fonts in the color chosen by the user
     public static Font fontTitle = new Font(Font.HELVETICA, 13, Font.BOLD, border);
     public static Font fontHeader = new Font(Font.HELVETICA, 9, Font.BOLD, border);
     public static Font fontListHeader = new Font(Font.HELVETICA, 9, Font.BOLD, border);
     public static Font fontLsContent = new Font(Font.HELVETICA, 9);



    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {

        Color bgColor = new Color(200,200,200);
        Rectangle rectangle = new  Rectangle( 20, 20, 20, 20);
        rectangle.rotate();
        //Document document = new Document(rectangle);
        Document document = new Document(PageSize.A4.rotate(), 30, 30, 50, 50);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try{

        //step2.2: creating an instance of the writer
        PdfWriter writer = PdfWriter.getInstance(document, baos);
         
        // step 3.1: adding some metadata to the document
        document.addSubject("This is a subject.");
        document.addSubject("This is a subject two.");

        document.open();

     	/* get data from session */
        Vector listActivity = new Vector();
        Date trnDate = new Date();
        HttpSession sess = request.getSession(true);
        try{
         	Hashtable hash = (Hashtable)sess.getValue("TRAINING_ACTIVITY");
            if((hash != null)&& (hash.size()>0)){
              Iterator iter = hash.keySet().iterator();
              if(iter.hasNext())
                 trnDate = (Date)iter.next();
              listActivity = (Vector)hash.get(trnDate);
            }
        }catch(Exception e){
            System.out.println("Exc : "+e.toString());
            trnDate = new Date();
            listActivity = new Vector();
        }


        Vector vctTotal = new Vector(1,1);
        try{
             vctTotal = (Vector)sess.getValue("SESS_TOTAL_ALL_TRAINING");
        }
        catch(Exception e){
            System.out.println("Exception e : "+e.toString());
            vctTotal = new Vector(1,1);
        }


        if((listActivity != null) && (listActivity.size()>0))
        {
            Table list = getHeader(trnDate);
            for(int t=0;t<listActivity.size();t++){
                Vector temp = (Vector)listActivity.get(t);
                Department department = (Department)temp.get(0);
                Vector listTraining =(Vector)temp.get(1);

                list = getListHeader(list);

                double procent = 0;
                String strProcent = "";

                int sumPlanPrg = 0;
				int sumActPrg = 0;
				int sumPlanHour = 0;
				int sumActHour = 0;
				int sumPlanTrain = 0;
				int sumActTrain = 0;

                int rows = 0;
                boolean fits = false;
                if(listTraining != null && listTraining.size()>0){
		          	for(int ls = 0;ls< listTraining.size();ls++)
		            {
						TrainingActivityPlan trainingActPlan = (TrainingActivityPlan)listTraining.get(ls);
	                    Vector actuals = PstTrainingActivityPlan.getActual(trainingActPlan.getOID());
	                    rows = listTraining.size();
                        int actPrg = 0;
						int actHour = 0;
						int actTrainees = 0;
						if(actuals != null && actuals.size()>0){
							actPrg = Integer.parseInt(""+actuals.get(0));
							actTrainees = Integer.parseInt(""+actuals.get(1));
                            actHour = Integer.parseInt(""+actuals.get(2));
						}


						if(ls==0){
				            Cell lisContent = new Cell(new Chunk(department.getDepartment(), fontLsContent));
				       		lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
                            lisContent.setVerticalAlignment(Element.ALIGN_TOP);
                            lisContent.setRowspan(listTraining.size());
				            list.addCell(lisContent);  //col 1
                        }
			
			            Cell lisContent = new Cell(new Chunk("", fontLsContent));
			            lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
                        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
			            list.addCell(lisContent);  //col 2


                        Training trn = new Training();
						try{
							trn = PstTraining.fetchExc(trainingActPlan.getTrainingId());
						}
						catch(Exception e){
							trn = new Training();
						}

				        //lisContent = new Cell(new Chunk(trainingActPlan.getProgram(), fontLsContent));
                        lisContent = new Cell(new Chunk(trn.getName(), fontLsContent));
			            lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
                        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
			            list.addCell(lisContent);  //col 3
			
			            lisContent = new Cell(new Chunk(String.valueOf(trainingActPlan.getProgramsPlan()), fontLsContent));
			            lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
                        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
			            list.addCell(lisContent);  //col 4
	                    sumPlanPrg = sumPlanPrg + trainingActPlan.getProgramsPlan();
			
			            lisContent = new Cell(new Chunk(String.valueOf(actPrg), fontLsContent));
			      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
			            list.addCell(lisContent);  //col 5
	                    sumActPrg = sumActPrg + actPrg;
	
	                    procent = ( (new Integer(actPrg)).doubleValue()/(new Integer(trainingActPlan.getProgramsPlan())).doubleValue())*100;
						if((new Double(procent)).isNaN()){
							procent = 0;
						}
						
						if(procent%1 > 0)
							strProcent = Formater.formatNumber(procent,"##,###.00");
						else
							strProcent = ""+((new Double(procent)).intValue());
	
						lisContent = new Cell(new Chunk(strProcent+"%", fontLsContent));
                        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
			      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
			            list.addCell(lisContent);  //col 6
	
	                    lisContent = new Cell(new Chunk(String.valueOf(trainingActPlan.getTotHoursPlan()), fontLsContent));
			            lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
			            list.addCell(lisContent);  //col 7
	                    sumPlanHour = sumPlanHour + trainingActPlan.getTotHoursPlan();
			
			            lisContent = new Cell(new Chunk(String.valueOf(actHour), fontLsContent));
			      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
			            list.addCell(lisContent);  //col 8
	                    sumActHour = sumActHour + actHour;
	
	
	                    procent = ( (new Integer(actHour)).doubleValue()/(new Integer(trainingActPlan.getTotHoursPlan())).doubleValue())*100;
						if((new Double(procent)).isNaN()){
							procent = 0;
						}
						
						if(procent%1 > 0)
							strProcent = Formater.formatNumber(procent,"##,###.00");
						else
							strProcent = ""+((new Double(procent)).intValue());
	
						lisContent = new Cell(new Chunk(strProcent+"%", fontLsContent));
			      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
			            list.addCell(lisContent);  //col 9
	
	                    lisContent = new Cell(new Chunk(String.valueOf(trainingActPlan.getTraineesPlan()), fontLsContent));
			            lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
			            list.addCell(lisContent);  //col 10
						sumPlanTrain = sumPlanTrain + trainingActPlan.getTraineesPlan();
	
			
			            lisContent = new Cell(new Chunk(String.valueOf(actTrainees), fontLsContent));
			      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
			            list.addCell(lisContent);  //col 11
	                    sumActTrain = sumActTrain + actTrainees;
	
	                    procent = ( (new Integer(actHour)).doubleValue()/(new Integer(trainingActPlan.getTotHoursPlan())).doubleValue())*100;
						if((new Double(procent)).isNaN()){
							procent = 0;
						}
						
						if(procent%1 > 0)
							strProcent = Formater.formatNumber(procent,"##,###.00");
						else
							strProcent = ""+((new Double(procent)).intValue());
	
						lisContent = new Cell(new Chunk(strProcent+"%", fontLsContent));
			      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
			            list.addCell(lisContent);  //col 12
	
	
	                    lisContent = new Cell(new Chunk(trainingActPlan.getTrainer(), fontLsContent));
			      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
			            list.addCell(lisContent);  //col 13
	
	                    lisContent = new Cell(new Chunk(trainingActPlan.getRemark(), fontLsContent));
			      		lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
			            list.addCell(lisContent);  //col 14
	
	
	
		                if (!writer.fitsPage(list)) {
	                        for (int s=0;s<ls;s++){
		                    	list.deleteLastRow();
	                        }
                            fits = true;
		                    ls = listTraining.size()-1;
	                        t--;
		                    document.add(list);
		                    document.newPage();
	                        list = getHeader(trnDate);
	
		                }
		          }
              }else{
                  rows = 1;
              	  Cell lisContent = new Cell(new Chunk(department.getDepartment(), fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
	              list.addCell(lisContent);  //col 1

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 2

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 3

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 4

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 5

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 6

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 7

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 8

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 9

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 10

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 11

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 12

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 13

                  lisContent = new Cell(new Chunk("", fontLsContent));
	      		  lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
                  lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 14

                  if (!writer.fitsPage(list)) {
                    list.deleteLastRow();
                    list.deleteLastRow();
                    list.deleteLastRow();
                    fits = true;
                    t--;
                    document.add(list);
                    document.newPage();
                    list = getHeader(trnDate);

                 }

              }

              if(!fits){
			      rows = rows + 1;
	              Cell lisContent = new Cell(new Chunk("", fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 1
	
				  int staffCount = PstEmployee.getCount(PstEmployee.fieldNames[PstEmployee.FLD_DEPARTMENT_ID]+ " = "+department.getOID()+" AND "+PstEmployee.fieldNames[PstEmployee.FLD_RESIGNED]+"="+PstEmployee.NO_RESIGN);
	              lisContent = new Cell(new Chunk(staffCount==0?"":""+staffCount, fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 2
	
				  lisContent = new Cell(new Chunk("", fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 3
	
	              lisContent = new Cell(new Chunk(String.valueOf(sumPlanPrg), fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 4
			
	              lisContent = new Cell(new Chunk(String.valueOf(sumActPrg), fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 5
	
				  procent = ((new Integer(sumActPrg)).doubleValue()/(new Integer(sumPlanPrg)).doubleValue())*100;
				  if((new Double(procent)).isNaN()){
					procent = 0;
				  }
				
				  if(procent%1 > 0)
					strProcent = Formater.formatNumber(procent,"##,###.00");
				  else
					strProcent = ""+((new Double(procent)).intValue());
	
			      lisContent = new Cell(new Chunk(strProcent+"%", fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 6
	
	
	              lisContent = new Cell(new Chunk(String.valueOf(sumPlanHour), fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 7
			
	              lisContent = new Cell(new Chunk(String.valueOf(sumActHour), fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 8
	
				  procent = ((new Integer(sumActHour)).doubleValue()/(new Integer(sumPlanHour)).doubleValue())*100;
				  if((new Double(procent)).isNaN()){
					procent = 0;
				  }
				
				  if(procent%1 > 0)
					strProcent = Formater.formatNumber(procent,"##,###.00");
				  else
					strProcent = ""+((new Double(procent)).intValue());
	
			      lisContent = new Cell(new Chunk(strProcent+"%", fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 9
	
	
	              lisContent = new Cell(new Chunk(String.valueOf(sumPlanTrain), fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 10
			
	              lisContent = new Cell(new Chunk(String.valueOf(sumActTrain), fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 11
	
				  procent = ((new Integer(sumActTrain)).doubleValue()/(new Integer(sumPlanTrain)).doubleValue())*100;
				  if((new Double(procent)).isNaN()){
					procent = 0;
				  }
	
	              if(procent%1 > 0)
					strProcent = Formater.formatNumber(procent,"##,###.00");
				  else
					strProcent = ""+((new Double(procent)).intValue());
				
	              lisContent = new Cell(new Chunk(strProcent+"%", fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 12
	
	              lisContent = new Cell(new Chunk("", fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 13
	
	              lisContent = new Cell(new Chunk("", fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              list.addCell(lisContent);  //col 14
	
	              if (!writer.fitsPage(list)) {
	                	for(int r=0;r<(rows+2);r++){
	                   		 list.deleteLastRow();
	              		}
	                    t--;
	                    fits = true;
	                    document.add(list);
	                    document.newPage();
	                    list = getHeader(trnDate);
	
	              }
              }

              if(!fits){
                  rows = rows + 1;
	              Cell lisContent = new Cell(new Chunk("", fontLsContent));
	      	      lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
	              lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
	              lisContent.setBorder(Rectangle.TOP);
	              lisContent.setColspan(14);
	              list.addCell(lisContent);  //col 1-14
	
	              if (!writer.fitsPage(list)) {
                    	for(int r=0;r<(rows+2);r++){
	                   		 list.deleteLastRow();
	              		}
                    	t--;
	                    document.add(list);
	                    document.newPage();
	                    list = getHeader(trnDate);
	
	              }
              }


         	}
            document.add(list);

            if(vctTotal!=null && vctTotal.size()>0){
                if(!writer.fitsPage(getTotal(vctTotal))){
                    document.newPage();
                }
                document.add(getTotal(vctTotal));

            }
        }


         }catch(Exception e){
                System.out.println("Exception e : "+e.toString());
         }

        // step 5: closing the document
        document.close();
        
        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();

    }

    /* this method make table header */
    private static Table getHeader(Date date) throws BadElementException, DocumentException {

		int ctnInt[] = {10,5,20,5,5,5,5,5,5,5,5,5,10,10};
        Table list = new Table(14);
        list.setBorderColor(new Color(255,255,255));
        list.setWidth(100);
        list.setWidths(ctnInt);
        list.setBorderWidth(1);
        list.setPadding(1);
        list.setSpacing(1);

        Cell hcell = new Cell(new Chunk("MONTHLY TRAINING REPORT", fontTitle));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(14);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Melia Bali Villas Spa Resort", fontTitle));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(14);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Month : "+Formater.formatDate(date,"MMMM yyyy"), fontTitle));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(14);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("", fontTitle));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setColspan(14);
        list.addCell(hcell);


        return list;
    }


    private static Table getListHeader(Table list) throws BadElementException, DocumentException
    {

        Cell hcell = new Cell(new Chunk(" Department ", fontListHeader));
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setRowspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Staff Count", fontListHeader));
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setRowspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Program", fontListHeader));
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setRowspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("No. of Programs ", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(3);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Total Hours ", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(3);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("No. of Trainess", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(3);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Trainer", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setRowspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Remark", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setRowspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Plan", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Actual", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("%", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Plan", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Actual", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("%", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Plan", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Actual", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("%", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        return list;
    }


    private static Table getTotal(Vector vct) throws BadElementException, DocumentException {

		int ctnInt[] = {10,5,20,5,5,5,5,5,5,5,5,5,10,10};
        Table list = new Table(14);
        list.setBorderColor(new Color(255,255,255));
        list.setWidth(100);
        list.setWidths(ctnInt);
        list.setBorderWidth(1);
        list.setPadding(1);
        list.setSpacing(1);

        Cell hcell = new Cell(new Chunk("  ", fontListHeader));
        //hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        //hcell.setRowspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Staff", fontListHeader));
       // hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        //hcell.setRowspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk(" ", fontListHeader));
        //hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        //hcell.setRowspan(2);
        list.addCell(hcell);


        hcell = new Cell(new Chunk("Plan", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Actual", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("%", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Plan", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Actual", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("%", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Plan", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Actual", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("%", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        //------------
        hcell = new Cell(new Chunk((String)vct.get(0), fontListHeader));
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        //hcell.setRowspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk((String)vct.get(1), fontListHeader));
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        //hcell.setRowspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk((String)vct.get(2), fontListHeader));
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        //hcell.setRowspan(2);
        list.addCell(hcell);


        hcell = new Cell(new Chunk((String)vct.get(3), fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk((String)vct.get(4), fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk((String)vct.get(5), fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk((String)vct.get(6), fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk((String)vct.get(7), fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk((String)vct.get(8), fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk((String)vct.get(9), fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk((String)vct.get(10), fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk((String)vct.get(11), fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk((String)vct.get(12), fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk((String)vct.get(13), fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        return  list;

    }


    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
       processRequest(request, response);
    }
    
    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }

}
