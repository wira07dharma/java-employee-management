/* Generated by Together */

package com.dimata.harisma.report.employee;

import java.sql.*;
import java.awt.Color;
import java.awt.Point;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;

import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import java.util.Date;

import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.html.HtmlWriter;
import com.lowagie.text.Font;
import com.dimata.util.*;
import com.dimata.harisma.entity.masterdata.*;
import com.dimata.harisma.entity.employee.*;
import com.dimata.harisma.session.employee.*;


public class TrainingMonthlyPdf  extends HttpServlet
{
    
     // setting the color values
     public static Color border = new Color(0x00, 0x00, 0x00);
     
     // setting some fonts in the color chosen by the user
     public static Font fontTitle = new Font(Font.HELVETICA, 13, Font.BOLD, border);
     public static Font fontHeader = new Font(Font.HELVETICA, 9, Font.BOLD, border);
     public static Font fontListHeader = new Font(Font.HELVETICA, 9, Font.BOLD, border);
     public static Font fontLsContent = new Font(Font.HELVETICA, 9);
     public static Font fontFooter = new Font(Font.TIMES_NEW_ROMAN, 10, Font.NORMAL, border);
   
     
    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {

        Color bgColor = new Color(200,200,200);
        Rectangle rectangle = new  Rectangle( 20, 20, 20, 20);
        rectangle.rotate();
        Document document = new Document(PageSize.A4.rotate(), 30, 30, 50, 50);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        
        
        try {

            /* creating an instance of the writer */
            PdfWriter writer = PdfWriter.getInstance(document, baos);

            document.open();
            
            /* get requested data */
            int year = Integer.parseInt(request.getParameter("year"));
            int month = Integer.parseInt(request.getParameter("month"));
            Date date = new Date(year-1900, month-1, 1);

            /* get data from session */  
            Vector listAll = new Vector();
            
            try {
                HttpSession sess = request.getSession(true);
                listAll = (Vector)sess.getValue("SESS_REPORT_MONTHLY_TRAINING");
            }
            catch(Exception e){
                listAll = new Vector();
            }

            /* creating footer */
            /*HeaderFooter footer = new HeaderFooter(new Phrase("Page ", fontFooter), true);           
            footer.setAlignment(Element.ALIGN_RIGHT); 
            document.setFooter(footer); */
            
            if ((listAll != null) && (listAll.size() > 0)) {
                Table listHeader = getMainHeader(date);                
                document.add(listHeader);
                               
                for (int t = 0; t < listAll.size(); t++) {
                    
                    Vector listRow = (Vector)listAll.get(t);    // get all data
                                        
                    Department dept = null;
                    Vector details = null;
                    Vector summary = null;
                    
                    dept = (Department)listRow.get(0);          // get dept data
                    
                    if(dept.getOID() != 0) {                    // get each dept's training lists
                        details = (Vector)listRow.get(1);
                        summary = (Vector)listRow.get(2);
                    }
                    else {                                      // or grand summary record
                        details = null;
                        summary = (Vector)listRow.get(1);
                    }
                    
               
                    if (details != null && details.size() > 0) {     
                                                                     
                        Table list = getListHeader(null);                   // print header 
                        list = addSpace(list);
                                                
                        if(!writer.fitsPage(list))  {                          
                            document.newPage();                              
                            list.deleteLastRow();                            
                        }
                        else {
                            list.deleteLastRow();
                        }
                                                                  
                        for (int ls = 0; ls < details.size(); ls++) {       // print details                          
                            Vector detail = (Vector)details.get(ls);                           
                            list = getListDetail(list, detail, dept, ls);  
                          
                            if(!writer.fitsPage(list)) {
                                list.deleteLastRow();   
                                ls--;
                                
                                document.add(list);
                                document.newPage();
                                
                                list = getListHeader(null);
                            }
                        }  
                                                                       
                        list = getListSummary(list, summary);               // print summary row 
                        
                        if(!writer.fitsPage(list)) {
                            list.deleteLastRow();
                            
                            document.add(list);
                            document.newPage();
                            
                            list = getListHeader(null);
                            list = getListSummary(list, summary); 
                        }
                        
                        document.add(list);
                        
                        
                        list = addSpace();                                  // print space 
                        
                        if(writer.fitsPage(list))
                            document.add(list);
                    
                    } else {                      
                                         
                        Table list = getSummaryHeader();                   // print grand summary header 
                        
                        list = getSummaryDetail(list, summary);            // print grand summary detail 
                        
                        if(!writer.fitsPage(list)) 
                            document.newPage();
                        
                        document.add(list);
                        
                    } 
                    
                    
                   
                } // end for
                
            
            } // end if

        } 
        catch (Exception e) {
            System.out.println(e.toString());
        }

        
        // closing the document
        document.close();
        
        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }
  
    private static Table getMainHeader(Date date) throws BadElementException, DocumentException {

        int ctnInt[] = {10,5,20,10,5,5,5,5,5,5,5,5,5,10};
        Table list = new Table(14);
        list.setBorderColor(new Color(255,255,255));
        list.setWidth(100);
        list.setWidths(ctnInt);
        list.setBorderWidth(1);
        list.setPadding(1);
        list.setSpacing(1);

        Cell hcell = new Cell(new Chunk("MONTHLY TRAINING REPORT", fontTitle));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(14);
        list.addCell(hcell);

        /*hcell = new Cell(new Chunk("Hard Rock Hotel Bali", fontTitle));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(14);
        list.addCell(hcell);*/

        hcell = new Cell(new Chunk("Month : "+Formater.formatDate(date,"MMMM yyyy"), fontTitle));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(14);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("", fontTitle));
        hcell.setBorderColor(new Color(255,255,255));
        hcell.setColspan(14);
        list.addCell(hcell);


        return list;
    }


    private static Table getListHeader(Table list) throws BadElementException, DocumentException
    {        
        
        if(list == null) {
            int ctnInt[] = {10,5,20,10,5,5,5,5,5,5,5,5,5,10};
            list = new Table(14);
            list.setBorderColor(new Color(255,255,255));
            list.setWidth(100);
            list.setWidths(ctnInt);
            list.setBorderWidth(1);
            list.setPadding(1);
            list.setSpacing(1);  
        }

        Cell hcell = new Cell(new Chunk(" Department ", fontListHeader));
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setRowspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Staff Count", fontListHeader));
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setRowspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Program", fontListHeader));
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setRowspan(2);
        list.addCell(hcell);
        
        hcell = new Cell(new Chunk("Schedule", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setRowspan(2);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("No. of Programs ", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(3);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Total Hours ", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(3);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("No. of Trainess", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setColspan(3);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Trainer", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_TOP);
        hcell.setRowspan(2);
        list.addCell(hcell);       

        hcell = new Cell(new Chunk("Plan", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Actual", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("%", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Plan", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Actual", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("%", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Plan", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Actual", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("%", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);
       
        return list;
    }
    
    private static Table getListDetail(Table list, Vector detail, Department dept, int index) throws BadElementException, DocumentException 
    {
        
        if(list == null) {
            int ctnInt[] = {10,5,20,10,5,5,5,5,5,5,5,5,5,10};
            list = new Table(14);
            list.setBorderColor(new Color(255,255,255));
            list.setWidth(100);
            list.setWidths(ctnInt);
            list.setBorderWidth(1);
            list.setPadding(1);
            list.setSpacing(1);
            list.setOffset(0);
        }
        
        if (index == 0) {  // first row
            Cell lisContent = new Cell(new Chunk(dept.getDepartment(), fontLsContent));
            lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
            lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
            list.addCell(lisContent);  //col 1
        }
        else {
            Cell lisContent = new Cell(new Chunk("", fontLsContent));
            lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
            lisContent.setVerticalAlignment(Element.ALIGN_TOP);
            list.addCell(lisContent);  //col 1
        }

        Cell lisContent = new Cell(new Chunk((String)detail.get(1), fontLsContent));
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(lisContent);  //col 2

        lisContent = new Cell(new Chunk((String)detail.get(2), fontLsContent));
        lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(lisContent);  //col 3

        lisContent = new Cell(new Chunk((String)detail.get(3), fontLsContent));
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(lisContent);  //col 4

        lisContent = new Cell(new Chunk((String)detail.get(4), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 5

        lisContent = new Cell(new Chunk((String)detail.get(5), fontLsContent));
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(lisContent);  //col 6

        lisContent = new Cell(new Chunk((String)detail.get(6), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 7

        lisContent = new Cell(new Chunk((String)detail.get(7), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 8                          

        lisContent = new Cell(new Chunk((String)detail.get(8), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 9

        lisContent = new Cell(new Chunk((String)detail.get(9), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 10

        lisContent = new Cell(new Chunk((String)detail.get(10), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 11

        lisContent = new Cell(new Chunk((String)detail.get(11), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 12

        lisContent = new Cell(new Chunk((String)detail.get(12), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 13

        lisContent = new Cell(new Chunk((String)detail.get(13), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 14
      
        return list;
    }
    
    private static Table getListSummary(Table list, Vector summary) throws BadElementException, DocumentException 
    {
        if(list == null) {
            int ctnInt[] = {10,5,20,10,5,5,5,5,5,5,5,5,5,10};
            list = new Table(14);
            list.setBorderColor(new Color(255,255,255));
            list.setWidth(100);
            list.setWidths(ctnInt);
            list.setBorderWidth(1);
            list.setPadding(1);
            list.setSpacing(1);
        }
        
        Cell lisContent = new Cell(new Chunk("Total", fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 1

        lisContent = new Cell(new Chunk((String)summary.get(1), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 2

        lisContent = new Cell(new Chunk((String)summary.get(2), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 3

        lisContent = new Cell(new Chunk((String)summary.get(3), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 4

        lisContent = new Cell(new Chunk((String)summary.get(4), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 5

        lisContent = new Cell(new Chunk((String)summary.get(5), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 6

        lisContent = new Cell(new Chunk((String)summary.get(6), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 7

        lisContent = new Cell(new Chunk((String)summary.get(7), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 8

        lisContent = new Cell(new Chunk((String)summary.get(8), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 9

        lisContent = new Cell(new Chunk((String)summary.get(9), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 10

        lisContent = new Cell(new Chunk((String)summary.get(10), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 11

        lisContent = new Cell(new Chunk((String)summary.get(11), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 12

        lisContent = new Cell(new Chunk((String)summary.get(12), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 13

        lisContent = new Cell(new Chunk((String)summary.get(13), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 14

        return list;
    }

    private static Table getSummaryHeader() throws BadElementException, DocumentException 
    {
        int ctnInt[] = {10,5,20,10,5,5,5,5,5,5,5,5,5,10};
        Table list = new Table(14);
        list.setBorderColor(new Color(255,255,255));
        list.setWidth(100);
        list.setWidths(ctnInt);
        list.setBorderWidth(1);
        list.setPadding(1);
        list.setSpacing(1);

        Cell hcell = new Cell(new Chunk("", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Staff", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);
        
        hcell = new Cell(new Chunk("", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Plan", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Actual", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("%", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Plan", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Actual", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("%", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Plan", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Actual", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("%", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);
        
        hcell = new Cell(new Chunk("", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);

        return  list;
    }
    
    private Table getSummaryDetail(Table list, Vector summary) throws BadElementException, DocumentException
    {
        if(list == null) {
            int ctnInt[] = {10,5,20,10,5,5,5,5,5,5,5,5,5,10};
            list = new Table(14);
            list.setBorderColor(new Color(255,255,255));
            list.setWidth(100);
            list.setWidths(ctnInt);
            list.setBorderWidth(1);
            list.setPadding(1);
            list.setSpacing(1);
        }
        
        Cell lisContent = new Cell(new Chunk((String)summary.get(0), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_LEFT);
        list.addCell(lisContent);  //col 1

        lisContent = new Cell(new Chunk((String)summary.get(1), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 2

        lisContent = new Cell(new Chunk((String)summary.get(2), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 3

        lisContent = new Cell(new Chunk((String)summary.get(3), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 4

        lisContent = new Cell(new Chunk((String)summary.get(4), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 5

        lisContent = new Cell(new Chunk((String)summary.get(5), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 6

        lisContent = new Cell(new Chunk((String)summary.get(6), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 7

        lisContent = new Cell(new Chunk((String)summary.get(7), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 8

        lisContent = new Cell(new Chunk((String)summary.get(8), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 9

        lisContent = new Cell(new Chunk((String)summary.get(9), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 10

        lisContent = new Cell(new Chunk((String)summary.get(10), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 11

        lisContent = new Cell(new Chunk((String)summary.get(11), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 12

        lisContent = new Cell(new Chunk((String)summary.get(12), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 13

        lisContent = new Cell(new Chunk((String)summary.get(13), fontLsContent));
        lisContent.setVerticalAlignment(Element.ALIGN_MIDDLE);
        lisContent.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(lisContent);  //col 14

        return list;
    }
    
    private static Table addSpace() throws BadElementException, DocumentException 
    {       
        int ctnInt[] = {100};
        Table list = new Table(1);
        list.setBorderColor(new Color(255,255,255));
        list.setWidth(100);
        list.setWidths(ctnInt); 
        list.setDefaultCellBorderColor(Color.WHITE);
        list.setBorderWidth(0);
        list.setPadding(1);
        list.setSpacing(1);      

        Cell hcell = new Cell(new Chunk("", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);
        
        hcell = new Cell(new Chunk("", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        list.addCell(hcell);
       
        return  list;
    }    
    
    private static Table addSpace(Table list) throws BadElementException, DocumentException 
    {
        if(list == null) {
            int ctnInt[] = {10,5,20,10,5,5,5,5,5,5,5,5,5,10};
            list = new Table(14);
            list.setBorderColor(new Color(255,255,255));
            list.setWidth(100);
            list.setWidths(ctnInt);
            list.setBorderWidth(1);
            list.setPadding(1);
            list.setSpacing(1);
        }

        Cell hcell = new Cell(new Chunk("", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);    
        hcell.setColspan(14);
        list.addCell(hcell);
            
        return  list;
    }    
 
    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
}
