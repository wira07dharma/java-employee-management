/* Generated by Together */

package com.dimata.harisma.report.employee;

import java.sql.*;
import java.awt.Color;
import java.awt.Point;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;

import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
import java.util.Date;

import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.html.HtmlWriter;
import com.lowagie.text.Font;
import com.dimata.util.*;
import com.dimata.harisma.entity.search.*;
import com.dimata.harisma.form.search.*;
import com.dimata.harisma.entity.clinic.*;
import com.dimata.harisma.entity.masterdata.*;
import com.dimata.harisma.entity.employee.*;
import com.dimata.harisma.session.clinic.*;
import com.dimata.qdep.form.*;

public class TrainingHistoryPdf extends HttpServlet
{
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }
    
    /** Destroys the servlet.
     */
    public void destroy() {
        
    }


 	// setting the color values
     public static Color border = new Color(0x00, 0x00, 0x00);
     public static Color bgColor = new Color(240, 240, 240);
     
     // setting some fonts in the color chosen by the user
     public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 14, Font.BOLD, border);
     public static Font fontFooter = new Font(Font.TIMES_NEW_ROMAN, 10, Font.NORMAL, border);
     public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.ITALIC, border);
     public static Font fontListHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.BOLD, border);
     public static Font fontLsContent = new Font(Font.TIMES_NEW_ROMAN, 10);



    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {

        Color bgColor = new Color(200,200,200);
        Rectangle rectangle = new  Rectangle( 20, 20, 20, 20);
        rectangle.rotate();
        //Document document = new Document(rectangle);
        Document document = new Document(PageSize.A4, 30, 30, 50, 50);

        String approot = FRMQueryString.requestString(request, "approot");
        System.out.println("approot : "+approot);
        String pathImage = approot+ "/images/traningheader.jpg";

        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try{

        //step2.2: creating an instance of the writer
        PdfWriter writer = PdfWriter.getInstance(document, baos);
         
        // step 3.1: adding some metadata to the document
        document.addSubject("This is a subject.");
        document.addSubject("This is a subject two.");

         //HeaderFooter header = new HeaderFooter(new Phrase("This is a header."), false);
		HeaderFooter footer = new HeaderFooter(new Phrase(new Chunk("LEARNING TO SUCCESS", fontFooter)), false);
        footer.setAlignment(Element.ALIGN_CENTER);
		//document.setHeader(header);
		document.setFooter(footer);


        document.open();

     	/* get data from session */
        Vector listTraining = new Vector();
        HttpSession sess = request.getSession(true);
        try{
         	listTraining = (Vector)sess.getValue("TRAINING_HISTORY");
        }catch(Exception e){
            System.out.println("Exc : "+e.toString());
            listTraining = new Vector();
        }

        Vector header = new Vector(1,1);
        Vector vctContent = new Vector(1,1);

        if((listTraining != null) && (listTraining.size()>0))
        {
              header = (Vector) listTraining.get(0);
              document.add(getHeader(header, pathImage));

              vctContent = (Vector) listTraining.get(1);

			  document.add(getContent(vctContent, document, writer));

         }

         }catch(Exception e){
                System.out.println("Exception e : "+e.toString());
         }

        // step 5: closing the document
        document.close();
        
        // we have written the pdfstream to a ByteArrayOutputStream,
        // now we are going to write this outputStream to the ServletOutputStream
        // after we have set the contentlength (see http://www.lowagie.com/iText/faq.html#msie)
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();

    }

        /* this method make table header */
    private static Table getHeader(Vector vct, String pathImage) throws BadElementException, DocumentException {

        if(vct!=null && vct.size()>0){

            Employee employee = (Employee)vct.get(0);
            Position position = (Position)vct.get(1);
            Department department = (Department)vct.get(2);
	
			int ctnInt[] = {15,2,33,20,2,28};
	        Table list = new Table(6);
	        list.setBorderColor(new Color(255,255,255));
	        list.setWidth(90);
	        list.setWidths(ctnInt);
	        list.setBorderWidth(0);
	        list.setCellpadding(1);
	        list.setCellspacing(0);

            Image gambar = null;
            try{
                gambar = Image.getInstance(pathImage);
            }catch(Exception ex){
            }

            Cell hcell = null;

            gambar.setAlignment(Image.MIDDLE);
            gambar.scalePercent(40);

            hcell = new Cell(new Chunk("", fontTitle));
            hcell.setBorderColor(new Color(255,255,255));
            hcell.setNoWrap(true);
            hcell.setVerticalAlignment(0);
            hcell.setColspan(6);
            hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
            hcell.add(gambar);
            list.addCell(hcell);

            /*Cell hcell = new Cell(new Chunk("LEARNING TO SUCCESS", fontTitle));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        hcell.setColspan(6);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk("MELIA BALI", fontTitle));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        hcell.setColspan(6);
	        list.addCell(hcell);

            hcell = new Cell(new Chunk("TRAINING HISTORY", fontTitle));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        hcell.setColspan(6);
	        list.addCell(hcell); */
	
	        hcell = new Cell(new Chunk("", fontTitle));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        hcell.setColspan(6);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk("Name ", fontHeader));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk(" : ", fontHeader));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk(employee.getFullName().toUpperCase(), fontLsContent));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setBorder(Rectangle.BOTTOM);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk("Payroll Number ", fontHeader));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_RIGHT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk(" : ", fontHeader));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk(employee.getEmployeeNum(), fontLsContent));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setBorder(Rectangle.BOTTOM);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk("Position ", fontHeader));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk(" : ", fontHeader));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk(position.getPosition(), fontLsContent));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setBorder(Rectangle.BOTTOM);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk("Commencing Date ", fontHeader));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_RIGHT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk(" : ", fontHeader));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk(Formater.formatDate(employee.getCommencingDate(),"dd MMMM yyyy"), fontLsContent));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setBorder(Rectangle.BOTTOM);
	        list.addCell(hcell);


            hcell = new Cell(new Chunk("Department ", fontHeader));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk(" : ", fontHeader));
	        hcell.setBorderColor(new Color(255,255,255));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        list.addCell(hcell);
	
	        hcell = new Cell(new Chunk(department.getDepartment(), fontLsContent));
	        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	        hcell.setBorderColor(new Color(255,255,255));
            hcell.setColspan(4);
	        hcell.setBorder(Rectangle.BOTTOM);
	        list.addCell(hcell);

	        hcell = new Cell(new Chunk("", fontHeader));
	        hcell.setBorderColor(new Color(255,255,255));
            hcell.setColspan(6);
	        list.addCell(hcell);
	
	        return list;
        }

        return new Table(1);
    }

     private static Table getListHeader() throws BadElementException, DocumentException {
     	int ctnInt[] = {4, 25, 22, 10, 20, 34};
        Table list = new Table(6);
        list.setBorderColor(new Color(255,255,255));
        list.setWidth(100);
        list.setWidths(ctnInt);
        list.setBorderWidth(0);
        list.setPadding(1);
        list.setSpacing(0);

        Cell hcell = new Cell(new Chunk("No", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setBackgroundColor(bgColor);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Training Program", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setBackgroundColor(bgColor);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Period", fontListHeader));
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setBackgroundColor(bgColor);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Duration", fontListHeader));
        hcell.setBackgroundColor(bgColor);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Trainer", fontListHeader));
        hcell.setBackgroundColor(bgColor);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        hcell = new Cell(new Chunk("Remark", fontListHeader));
        hcell.setBackgroundColor(bgColor);
        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        list.addCell(hcell);

        return list;
     }

     private static Table getContent(Vector vct, Document document, PdfWriter writer) throws BadElementException, DocumentException {

        Table list = getListHeader();

        Cell hcell = null;

        if(vct!=null && vct.size()>0){
            for(int i=0; i<vct.size(); i++){

                TrainingHistory th = (TrainingHistory)vct.get(i);

		        hcell = new Cell(new Chunk(""+(i+1), fontLsContent));
		        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
		        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		        list.addCell(hcell);

                Training tr = new Training();
                try{
                    tr = PstTraining.fetchExc(th.getTrainingId());
                }
                catch(Exception e1){
                    System.out.println("Exception e1 : "+e1.toString());
                }

		        hcell = new Cell(new Chunk(tr.getName(), fontLsContent));
		        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
		        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		        list.addCell(hcell);
		
		        hcell = new Cell(new Chunk(Formater.formatDate(th.getStartDate(), "dd-MM-yy")+"  //  "+Formater.formatDate(th.getEndDate(), "dd-MM-yy"), fontLsContent));
		        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
		        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		        list.addCell(hcell);

                hcell = new Cell(new Chunk(""+th.getDuration(), fontLsContent));
		        hcell.setHorizontalAlignment(Element.ALIGN_CENTER);
		        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		        list.addCell(hcell);
		
		        hcell = new Cell(new Chunk(th.getTrainer(), fontLsContent));
		        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
		        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		        list.addCell(hcell);

                hcell = new Cell(new Chunk(th.getRemark(), fontLsContent));
		        hcell.setHorizontalAlignment(Element.ALIGN_LEFT);
		        hcell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		        list.addCell(hcell);

                if(!writer.fitsPage(list)){
                    list.deleteLastRow();
                    i--;
					list.deleteLastRow();
                    i--;
                    document.add(list);
                    document.newPage();
                    list =  getListHeader();
                }
            }
        }

        return list;
     }


    /** Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
        processRequest(request, response);
    }
    
    /** Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, java.io.IOException {
       processRequest(request, response);
    }
    
    /** Returns a short description of the servlet.
     */
    public String getServletInfo() {
        return "Short description";
    }
}

