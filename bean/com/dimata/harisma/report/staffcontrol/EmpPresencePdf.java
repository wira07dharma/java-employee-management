/* Generated by Together */
/*
 * EmpPresencePdf.java
 * @author gedhy
 * @version 1.0
 * Created on July 13, 2002, 09:10 PM
 */

package com.dimata.harisma.report.staffcontrol;

/* package java */
import java.util.*;
import java.text.*;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;

/* package servlet */
import javax.servlet.*;
import javax.servlet.http.*;

/* package lowagie */
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;

/* package qdep */
import com.dimata.util.*;
import com.dimata.qdep.form.*;

/* package harisma */
import com.dimata.harisma.entity.masterdata.*;
import com.dimata.harisma.entity.employee.*;
import com.dimata.harisma.entity.admin.*;
import com.dimata.harisma.entity.search.*;
import com.dimata.harisma.form.search.*;
import com.dimata.harisma.session.attendance.*;

public class EmpPresencePdf extends HttpServlet {

    /** Attribute declaration
    */
    public static String textCurrency[] = {"IDR","USD"};

	/* declaration constant */
    public static Color blackColor = new Color(0,0,0);
    public static Color whiteColor = new Color(255,255,255);
    public static Color titleColor = new Color(200,200,200);
    public static Color summaryColor = new Color(240,240,240);
    public static String formatDate  = "MMM dd, yyyy";
    public static String formatNumber = "#,###";

    /* setting some fonts in the color chosen by the user */
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 10, Font.BOLD, blackColor);
    public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 9, Font.NORMAL, blackColor);
    public static Font fontContent = new Font(Font.TIMES_NEW_ROMAN, 9, Font.NORMAL, blackColor);

    /** Initializes the servlet
    */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /** Handles the HTTP <code>GET</code> method.
    * @param request servlet request
    * @param response servlet response
    */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    } 

    /** Handles the HTTP <code>POST</code> method.
    * @param request servlet request
    * @param response servlet response
    */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    }

    /** Destroys the servlet
    */
    public void destroy() {
    }

    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
    * @param request servlet request
    * @param response servlet response
    */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {

        /* setting some constant */
        String currText[] = {"(IRD)","(US$)"};

        /* creating the document object */
        Document document = new Document(PageSize.A4, 30, 30, 50, 50);

		/* creating an OutputStream */
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try {

            /* creating an instance of the writer */
            PdfWriter writer = PdfWriter.getInstance(document, baos);

            /* get data from session */
            HttpSession sessEmpPresence = request.getSession(true);
            Vector vectEmployeePresence = null;
            try{
	            vectEmployeePresence = (Vector)sessEmpPresence.getValue("EMP_PRESENCE");
            }catch(Exception e){
                System.out.println("Exc : "+e.toString());
            }

            String strDepartment = (String)vectEmployeePresence.get(0);
            String strEmployee = (String)vectEmployeePresence.get(1);
            String strPeriod = (String)vectEmployeePresence.get(2);
            Vector vDate = (Vector)vectEmployeePresence.get(3);
            Vector vSymbol = (Vector)vectEmployeePresence.get(4);
            Vector vScdTimeIn = (Vector)vectEmployeePresence.get(5);
            Vector vScdTimeOut = (Vector)vectEmployeePresence.get(6);
            Vector vTimeIn = (Vector)vectEmployeePresence.get(7);
            Vector vTimeOut = (Vector)vectEmployeePresence.get(8);

		    /* adding a Header of page, i.e. : title, align and etc */
            HeaderFooter header = new HeaderFooter(new Phrase("ATTENDANCE RECORD PER " + strPeriod.toUpperCase() +
                				  "\nDEPARTMENT : "+ strDepartment.toUpperCase() +
                                  "\nEMPLOYEE : "+strEmployee.toUpperCase(), fontHeader), false);
            header.setAlignment(Element.ALIGN_LEFT);
            header.setBorder(Rectangle.BOTTOM);
            header.setBorderColor(blackColor);
            document.setHeader(header);

            /* opening the document, needed for add something into document */
            document.open();


            /* create header */
	        Table tableEmpPresence = getTableHeader();

            /* generate employee attendance report's data */
            Cell cellEmpData = new Cell("");
            System.out.println("vDate >>>> "+vDate);
            if(vDate!=null && vDate.size()>0){
				for (int i = 0; i < vDate.size(); i++) {
					Vector rowx = new Vector();
				
					Date d = new Date(String.valueOf(vDate.get(i)));
					SimpleDateFormat formatter = new SimpleDateFormat ("dd MMM yyyy");
					SimpleDateFormat formatterDay = new SimpleDateFormat ("EEEE");
					String dateString = formatter.format(d);
					String dayString = formatterDay.format(d);
				
					dateString = (dayString.equalsIgnoreCase("Saturday")) ? dateString : dateString;
					dayString = (dayString.equalsIgnoreCase("Saturday")) ? dayString : dayString;
					dateString = (dayString.equalsIgnoreCase("Sunday")) ? dateString : dateString;
					dayString = (dayString.equalsIgnoreCase("Sunday")) ? dayString : dayString;
					
					/* -------------- day & date period  --------------*/
		            cellEmpData = new Cell(new Chunk(dayString,fontContent));
		            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                    cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
		            cellEmpData.setBackgroundColor(whiteColor);
		            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		          	tableEmpPresence.addCell(cellEmpData);

		            cellEmpData = new Cell(new Chunk(dateString,fontContent));
		            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                    cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
		            cellEmpData.setBackgroundColor(whiteColor);
		            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		          	tableEmpPresence.addCell(cellEmpData);

					/* -------------- schedule --------------*/
		            cellEmpData = new Cell(new Chunk(String.valueOf(vSymbol.get(i)),fontContent));
		            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                    cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
		            cellEmpData.setBackgroundColor(whiteColor);
		            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		          	tableEmpPresence.addCell(cellEmpData);

                    Date timeIn = (Date) vScdTimeIn.get(i);
					Date timeOut = (Date) vScdTimeOut.get(i);
					Date actualTimeIn = (Date) vTimeIn.get(i);
					Date actualTimeOut = (Date)vTimeOut.get(i);

					if (timeIn != null) {
			            cellEmpData = new Cell(new Chunk(Formater.formatTimeLocale(timeIn, "HH:mm"),fontContent));
			            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                        cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
			            cellEmpData.setBackgroundColor(whiteColor);
			            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableEmpPresence.addCell(cellEmpData);
					}else {
			            cellEmpData = new Cell(new Chunk("",fontContent));
			            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                        cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
			            cellEmpData.setBackgroundColor(whiteColor);
			            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableEmpPresence.addCell(cellEmpData);
					}

					if (timeOut != null) {
			            cellEmpData = new Cell(new Chunk(Formater.formatTimeLocale((Date) vScdTimeOut.get(i), "HH:mm"),fontContent));
			            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                        cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
			            cellEmpData.setBackgroundColor(whiteColor);
			            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableEmpPresence.addCell(cellEmpData);
					}else {
			            cellEmpData = new Cell(new Chunk("",fontContent));
			            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                        cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
			            cellEmpData.setBackgroundColor(whiteColor);
			            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableEmpPresence.addCell(cellEmpData);
					}
					
					/* -------------- actual --------------*/
					if (actualTimeIn != null) {
			            cellEmpData = new Cell(new Chunk(Formater.formatTimeLocale(actualTimeIn, "HH:mm"),fontContent));
			            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                        cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
			            cellEmpData.setBackgroundColor(whiteColor);
			            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableEmpPresence.addCell(cellEmpData);
					}else {
			            cellEmpData = new Cell(new Chunk("",fontContent));
			            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                        cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
			            cellEmpData.setBackgroundColor(whiteColor);
			            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableEmpPresence.addCell(cellEmpData);
					}
					

					// -------------- calculate duration
					long iDuration = 0;
					long iDurationHour = 0;
					long iDurationMin = 0;
					String strDurationHour = "";
					String strDurationMin = "";
					if(	actualTimeIn != null && actualTimeOut != null){
						long iDurTimeIn = actualTimeIn.getTime()/1000;
						long iDurTimeOut = actualTimeOut.getTime()/1000;
					
						iDuration = 0;
						if (iDurTimeIn != iDurTimeOut) {
							iDuration = (iDurTimeIn == 0 || iDurTimeOut == 0) ? 0 : iDurTimeOut - iDurTimeIn;
						}
						iDurationHour = (iDuration - (iDuration % 3600)) / 3600;
						iDurationMin = iDuration % 3600 / 60;
					
						strDurationHour = (iDurationHour != 0) ? iDurationHour + "h, " : "";
						strDurationMin = (iDurationMin != 0) ? iDurationMin + "m " : "";
					}else{
						strDurationHour ="";
                        strDurationMin = "";
					}

		            cellEmpData = new Cell(new Chunk(strDurationHour + strDurationMin,fontContent));
		            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                    cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
		            cellEmpData.setBackgroundColor(whiteColor);
		            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		          	tableEmpPresence.addCell(cellEmpData);
				
					if (actualTimeOut != null) {
			            cellEmpData = new Cell(new Chunk(Formater.formatTimeLocale((Date) vTimeOut.get(i), "HH:mm"),fontContent));
			            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                        cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
			            cellEmpData.setBackgroundColor(whiteColor);
			            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableEmpPresence.addCell(cellEmpData);
					}else {
			            cellEmpData = new Cell(new Chunk("",fontContent));
			            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                        cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
			            cellEmpData.setBackgroundColor(whiteColor);
			            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			          	tableEmpPresence.addCell(cellEmpData);
					}
				
					/* -------------- different calculation --------------*/
					if(timeIn != null && actualTimeIn != null){
						timeIn.setSeconds(0);																			
						iDuration = timeIn.getTime()/60000 - actualTimeIn.getTime()/60000;
						iDurationHour = (iDuration - (iDuration % 60)) / 60;
						iDurationMin = iDuration % 60;
						strDurationHour = iDurationHour + "h, ";
						strDurationMin = iDurationMin + "m ";
					}else{
						strDurationHour = "";
                        strDurationMin ="";
					}

		            cellEmpData = new Cell(new Chunk(strDurationHour + strDurationMin,fontContent));
		            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                    cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
		            cellEmpData.setBackgroundColor(whiteColor);
		            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		          	tableEmpPresence.addCell(cellEmpData);


                    if(timeOut != null && actualTimeOut != null){
						timeOut.setSeconds(0);					
						iDuration = actualTimeOut.getTime()/60000 - timeOut.getTime()/60000 ;
						iDurationHour = (iDuration - (iDuration % 60)) / 60;
						iDurationMin = iDuration % 60;
						strDurationHour = iDurationHour + "h, ";
						strDurationMin = iDurationMin + "m ";
					}else{
						strDurationHour = "";
                        strDurationMin ="";
					}


		            cellEmpData = new Cell(new Chunk(strDurationHour + strDurationMin,fontContent));
		            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                    cellEmpData.setVerticalAlignment(Cell.ALIGN_MIDDLE);
		            cellEmpData.setBackgroundColor(whiteColor);
		            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		          	tableEmpPresence.addCell(cellEmpData);

                    if (!writer.fitsPage(tableEmpPresence)) {
                        tableEmpPresence.deleteLastRow();
                        i--;
                        document.add(tableEmpPresence);
                        document.newPage();
				        tableEmpPresence = getTableHeader();
                    }
	            }
            }

            document.add(tableEmpPresence);
        }
        catch(DocumentException de) {
            System.err.println(de.getMessage());
            de.printStackTrace();
        }

        /* closing the document */
        document.close();

        /* we have written the pdfstream to a ByteArrayOutputStream, now going to write this outputStream to the ServletOutputStream
		 * after we have set the contentlength
         */
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }


    /**
    * this method used to create header table
    */
    public static Table getTableHeader() throws BadElementException, DocumentException {

           Table tableEmpPresence = new Table(10);
           tableEmpPresence.setCellpadding(1);
           tableEmpPresence.setCellspacing(1);
           tableEmpPresence.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
	       int widthHeader[] = {15, 10, 8, 8, 10, 8, 10, 10, 8, 8};
    	   tableEmpPresence.setWidths(widthHeader);
           tableEmpPresence.setWidth(100);

           Cell cellEmpPresence = new Cell(new Chunk(" DAY IN",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
           cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
           cellEmpPresence.setRowspan(2);
           cellEmpPresence.setBackgroundColor(summaryColor);
         	tableEmpPresence.addCell(cellEmpPresence);

           cellEmpPresence = new Cell(new Chunk(" DATE IN",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
           cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
           cellEmpPresence.setRowspan(2);
           cellEmpPresence.setBackgroundColor(summaryColor);
         	tableEmpPresence.addCell(cellEmpPresence);

           cellEmpPresence = new Cell(new Chunk(" SCHEDULE",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
           cellEmpPresence.setColspan(3);
           cellEmpPresence.setRowspan(1);
           cellEmpPresence.setBackgroundColor(summaryColor);
         	tableEmpPresence.addCell(cellEmpPresence);

           cellEmpPresence = new Cell(new Chunk(" ACTUAL",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
           cellEmpPresence.setColspan(3);
           cellEmpPresence.setRowspan(1);
           cellEmpPresence.setBackgroundColor(summaryColor);
         	tableEmpPresence.addCell(cellEmpPresence);

           cellEmpPresence = new Cell(new Chunk(" DIFFERENCE",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
           cellEmpPresence.setColspan(2);
           cellEmpPresence.setRowspan(1);
           cellEmpPresence.setBackgroundColor(summaryColor);
         	tableEmpPresence.addCell(cellEmpPresence);


            cellEmpPresence = new Cell(new Chunk(" SYMBOL",fontContent));
            cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
            cellEmpPresence.setColspan(1);
            cellEmpPresence.setRowspan(1);
            cellEmpPresence.setBackgroundColor(summaryColor);
          	tableEmpPresence.addCell(cellEmpPresence);

            cellEmpPresence = new Cell(new Chunk(" TIME IN",fontContent));
            cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
            cellEmpPresence.setColspan(1);
            cellEmpPresence.setRowspan(1);
            cellEmpPresence.setBackgroundColor(summaryColor);
          	tableEmpPresence.addCell(cellEmpPresence);

            cellEmpPresence = new Cell(new Chunk(" TIME OUT",fontContent));
            cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
            cellEmpPresence.setColspan(1);
            cellEmpPresence.setRowspan(1);
            cellEmpPresence.setBackgroundColor(summaryColor);
          	tableEmpPresence.addCell(cellEmpPresence);



            cellEmpPresence = new Cell(new Chunk(" TIME IN",fontContent));
            cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
            cellEmpPresence.setColspan(1);
            cellEmpPresence.setRowspan(1);
            cellEmpPresence.setBackgroundColor(summaryColor);
          	tableEmpPresence.addCell(cellEmpPresence);

            cellEmpPresence = new Cell(new Chunk(" DURATION",fontContent));
            cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
            cellEmpPresence.setColspan(1);
            cellEmpPresence.setRowspan(1);
            cellEmpPresence.setBackgroundColor(summaryColor);
          	tableEmpPresence.addCell(cellEmpPresence);

            cellEmpPresence = new Cell(new Chunk(" TIME OUT",fontContent));
            cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
            cellEmpPresence.setColspan(1);
            cellEmpPresence.setRowspan(1);
            cellEmpPresence.setBackgroundColor(summaryColor);
          	tableEmpPresence.addCell(cellEmpPresence);



            cellEmpPresence = new Cell(new Chunk(" IN",fontContent));
            cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
            cellEmpPresence.setColspan(1);
            cellEmpPresence.setRowspan(1);
            cellEmpPresence.setBackgroundColor(summaryColor);
          	tableEmpPresence.addCell(cellEmpPresence);

            cellEmpPresence = new Cell(new Chunk(" OUT",fontContent));
            cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpPresence.setVerticalAlignment(Cell.ALIGN_MIDDLE);
            cellEmpPresence.setColspan(1);
            cellEmpPresence.setRowspan(1);
            cellEmpPresence.setBackgroundColor(summaryColor);
          	tableEmpPresence.addCell(cellEmpPresence);

            return tableEmpPresence;
    }

}

