/* Generated by Together */
/*
 * EmpPresencePdf.java
 * @author gedhy
 * @version 1.0
 * Created on July 13, 2002, 09:10 PM
 */

package com.dimata.harisma.report.staffcontrol;

/* package java */
import java.util.*;
import java.text.*;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;

/* package servlet */
import javax.servlet.*;
import javax.servlet.http.*;

/* package lowagie */
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;

/* package qdep */
import com.dimata.util.*;
import com.dimata.qdep.form.*;

/* package harisma */
import com.dimata.harisma.session.attendance.*;
import com.dimata.harisma.entity.masterdata.*;

public class ManningPdf extends HttpServlet {

    /* declaration constant */
    public static Color blackColor = new Color(0,0,0);
    public static Color whiteColor = new Color(255,255,255);
    public static Color titleColor = new Color(200,200,200);
    public static Color summaryColor = new Color(240,240,240);
    public static String formatDate  = "MMM dd, yyyy";
    public static String formatNumber = "#,###";

    /* setting some fonts in the color chosen by the user */
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 12, Font.BOLD, blackColor);
    public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 10, Font.NORMAL, blackColor);
    public static Font fontContent = new Font(Font.TIMES_NEW_ROMAN, 8, Font.NORMAL, blackColor);

    /** Initializes the servlet
    */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /** Handles the HTTP <code>GET</code> method.
    * @param request servlet request
    * @param response servlet response
    */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    } 

    /** Handles the HTTP <code>POST</code> method.
    * @param request servlet request
    * @param response servlet response
    */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    }

    /** Destroys the servlet
    */
    public void destroy() {
    }

    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
    * @param request servlet request
    * @param response servlet response
    */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {

        /* setting some constant */

        /* creating the document object */
        Document document = new Document(PageSize.A4.rotate(), 30, 30, 30, 30);

	/* creating an OutputStream */
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try {

            /* creating an instance of the writer */
            PdfWriter writer = PdfWriter.getInstance(document, baos);

            /* get data from session */
            int yr = FRMQueryString.requestInt(request, "yr");
            int mn = FRMQueryString.requestInt(request, "mn");
            GregorianCalendar gcPeriod = new GregorianCalendar(yr, mn, 1);
            Vector listDepartment = PstDepartment.list(0, 0, "", "DEPARTMENT");
            SessEmpSchedule sessEmpSchedule = new SessEmpSchedule();
            Vector listManning = new Vector(1, 1);
            String[] mon = {"January", "February", "March", 
                "April", "May", "June", "July", "August", 
                "September", "October", "November", "December"};
            int totalManning = 0;
            int grandTotalManning = 0;
            int deptManning = 0;
            int dayOfMonth = gcPeriod.getActualMaximum(Calendar.DAY_OF_MONTH);
            int year = gcPeriod.get(Calendar.YEAR);
            int month = gcPeriod.get(Calendar.MONTH);

            /* adding a Header of page, i.e. : title, align and etc */
            HeaderFooter header = new HeaderFooter(new Phrase("MANNING SUMMARY REPORT\nMONTH / YEAR: " + mon[month] + " / " + year, fontHeader), false);
            header.setAlignment(Element.ALIGN_CENTER);
            header.setBorder(Rectangle.BOTTOM);
            header.setBorderColor(blackColor);
            document.setHeader(header);

            /* opening the document, needed for add something into document */
            document.open();

            /* create header */
            Table table = getTableHeader(dayOfMonth);

            /* generate employee attendance report's data */
            Cell cell = new Cell("");

            int[] grandDeptManning = new int[dayOfMonth];
            for (int i=0; i<grandDeptManning.length; i++) {
                grandDeptManning[i] = 0;
            }
            for (int d=0; d<listDepartment.size(); d++) {
                Department dep = (Department) listDepartment.get(d);
                totalManning = sessEmpSchedule.getTotalManning(dep.getOID());
                grandTotalManning += totalManning;

                cell = new Cell(new Chunk(dep.getDepartment(),fontContent));
                cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
                cell.setBackgroundColor(whiteColor);
                cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    table.addCell(cell);

                cell = new Cell(new Chunk(""+totalManning,fontContent));
                cell.setHorizontalAlignment(Cell.ALIGN_CENTER);
                cell.setBackgroundColor(whiteColor);
                cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    table.addCell(cell);

                for (int j=1; j<=dayOfMonth; j++) {
                    if (j > 20) {
                        if (month == 11) {
                            deptManning = sessEmpSchedule.getManning(year+1,1,j, dep.getOID());
                        }
                        else {
                            deptManning = sessEmpSchedule.getManning(year,month+2,j, dep.getOID());
                        }
                    }
                    else {
                        deptManning = sessEmpSchedule.getManning(year,month+1,j, dep.getOID());
                    }
                    grandDeptManning[j-1] += deptManning;
                    
                    cell = new Cell(new Chunk(""+deptManning,fontContent));
                    cell.setHorizontalAlignment(Cell.ALIGN_CENTER);
                    cell.setBackgroundColor(whiteColor);
                    cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                        table.addCell(cell);
                }
                cell = new Cell(new Chunk("",fontContent));
                cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
                cell.setBackgroundColor(whiteColor);
                cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    table.addCell(cell);
            }
            
            cell = new Cell(new Chunk("GRAND TOTAL",fontContent));
            cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cell.setBackgroundColor(whiteColor);
            cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                table.addCell(cell);

            cell = new Cell(new Chunk(""+grandTotalManning,fontContent));
            cell.setHorizontalAlignment(Cell.ALIGN_CENTER);
            cell.setBackgroundColor(whiteColor);
            cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                table.addCell(cell);
                
            for (int k=0; k<dayOfMonth; k++) {
                cell = new Cell(new Chunk(""+grandDeptManning[k],fontContent));
                cell.setHorizontalAlignment(Cell.ALIGN_CENTER);
                cell.setBackgroundColor(whiteColor);
                cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    table.addCell(cell);
            }
                
            cell = new Cell(new Chunk("",fontContent));
            cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cell.setBackgroundColor(whiteColor);
            cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                table.addCell(cell);

                //---------
            cell = new Cell(new Chunk("IN %",fontContent));
            cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cell.setBackgroundColor(whiteColor);
            cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                table.addCell(cell);

            cell = new Cell(new Chunk("100",fontContent));
            cell.setHorizontalAlignment(Cell.ALIGN_CENTER);
            cell.setBackgroundColor(whiteColor);
            cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                table.addCell(cell);

            DecimalFormat myFormatter = new DecimalFormat("###.#");
            double pct = 0.0;
            for (int k=0; k<dayOfMonth; k++) {
                pct = ((double) grandDeptManning[k] / (double) grandTotalManning) * 100.0;

                cell = new Cell(new Chunk(""+myFormatter.format(pct),fontContent));
                cell.setHorizontalAlignment(Cell.ALIGN_CENTER);
                cell.setBackgroundColor(whiteColor);
                cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    table.addCell(cell);
            }
                
            cell = new Cell(new Chunk("",fontContent));
            cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cell.setBackgroundColor(whiteColor);
            cell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                table.addCell(cell);

                
            document.add(table);
        }
        catch(DocumentException de) {
            System.err.println(de.getMessage());
            de.printStackTrace();
        }

        /* closing the document */
        document.close();

        /* we have written the pdfstream to a ByteArrayOutputStream, now going to write this outputStream to the ServletOutputStream
		 * after we have set the contentlength
         */
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }


    /**
    * this method used to create header table
    */
    public static Table getTableHeader(int dayOfMonth) throws BadElementException, DocumentException {
        System.out.println("dayOfMonth = " + dayOfMonth);
           Table table = new Table(3 + dayOfMonth);
           table.setCellpadding(1);
           table.setCellspacing(1);
           table.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
           
	   int[] widthHeader = new int[3 + dayOfMonth];

           widthHeader[0] = 15;
           widthHeader[1] = 8;
           for (int i=0; i<dayOfMonth; i++) {
               widthHeader[i+2] = 3;
           }
           widthHeader[3 + dayOfMonth - 1] = 8;
           
    	   table.setWidths(widthHeader);
           table.setWidth(100);

           Cell cell = new Cell(new Chunk("DEPARTMENT",fontContent));
           cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
           cell.setRowspan(2);
           cell.setBackgroundColor(summaryColor);
         	table.addCell(cell);

           cell = new Cell(new Chunk("TOTAL\nMANNING",fontContent));
           cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
           cell.setRowspan(2);
           cell.setBackgroundColor(summaryColor);
         	table.addCell(cell);

           cell = new Cell(new Chunk("STAFF ON DUTY",fontContent));
           cell.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cell.setColspan(dayOfMonth+1);
           cell.setRowspan(1);
           cell.setBackgroundColor(summaryColor);
          	table.addCell(cell);
                
           for (int i=1; i<=dayOfMonth; i++) {
               cell = new Cell(new Chunk(""+i,fontContent));
               cell.setHorizontalAlignment(Cell.ALIGN_CENTER);
               //cell.setRowspan(1);
               cell.setBackgroundColor(summaryColor);
                    table.addCell(cell);
           }
                
           cell = new Cell(new Chunk("Ratio in %",fontContent));
           cell.setHorizontalAlignment(Cell.ALIGN_LEFT);
           //cell.setRowspan(2);
           cell.setBackgroundColor(summaryColor);
         	table.addCell(cell);
                
            return table;
    }

}

