/* Generated by Together */
/*
 * EmpPresencePdf.java
 * @author gedhy
 * @version 1.0
 * Created on July 13, 2002, 09:10 PM
 */

package com.dimata.harisma.report.lockers;

/* package java */
import java.util.*;
import java.text.*;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;

/* package servlet */
import javax.servlet.*;
import javax.servlet.http.*;

/* package lowagie */
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;

/* package qdep */
import com.dimata.util.*;
import com.dimata.qdep.form.*;

/* package harisma */
import com.dimata.harisma.entity.masterdata.*;
import com.dimata.harisma.entity.locker.*;
import com.dimata.harisma.session.locker.*;

public class LockersGlobalPdf extends HttpServlet {

    /** Attribute declaration */
    /* declaration constant */
    public static Color blackColor = new Color(0,0,0);
    public static Color whiteColor = new Color(255,255,255);
    public static Color titleColor = new Color(200,200,200);
    public static Color summaryColor = new Color(240,240,240);
    public static String formatDate  = "MMM dd, yyyy";
    public static String formatNumber = "#,###";

    /* setting some fonts in the color chosen by the user */
    public static Font fontHeader = new Font(Font.TIMES_NEW_ROMAN, 12, Font.BOLD, blackColor);
    public static Font fontTitle = new Font(Font.TIMES_NEW_ROMAN, 10, Font.NORMAL, blackColor);
    public static Font fontContent = new Font(Font.TIMES_NEW_ROMAN, 10, Font.NORMAL, blackColor);

    /** Initializes the servlet */
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    /** Handles the HTTP <code>GET</code> method.
    * @param request servlet request
    * @param response servlet response
    */
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    } 

    /** Handles the HTTP <code>POST</code> method.
    * @param request servlet request
    * @param response servlet response
    */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    }

    /** Destroys the servlet */
    public void destroy() {
    }

    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
    * @param request servlet request
    * @param response servlet response
    */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {

        /* setting some constant */
            /* from lockersglobal.jsp */
            Vector listLocker = new Vector(1, 1);
            SessLocker sessLocker = new SessLocker();
            listLocker = sessLocker.getLockersGlobal();

            Vector listLocation = (Vector) listLocker.get(0);
            Vector listCount = (Vector) listLocker.get(1);
            Vector listLocationId = (Vector) listLocker.get(2);

            int iRow = 0;
            int iCol = 0;
            Vector listLockerCondition = new Vector(1,1);
            listLockerCondition = PstLockerCondition.listAll();
            iRow = listLocation.size();
            iCol = listLockerCondition.size();
            int[][] arrLC = new int[iCol][iRow];

        /* creating the document object */
        Document document = new Document(PageSize.A4, 30, 30, 50, 50);

	/* creating an OutputStream */
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try {

            /* creating an instance of the writer */
            PdfWriter writer = PdfWriter.getInstance(document, baos);

	    /* adding a Header of page, i.e. : title, align and etc */
            HeaderFooter header = new HeaderFooter(new Phrase("LOCKERS REPORT\nAS OF " + 
                                        Formater.formatDate(new Date(), "dd MMMM yyyy"), fontHeader), false);
            header.setAlignment(Element.ALIGN_LEFT);
            header.setBorder(Rectangle.BOTTOM);
            header.setBorderColor(blackColor);
            document.setHeader(header);

            /* opening the document, needed for add something into document */
            document.open();

            /* create header */
            Table tableEmpPresence = getTableHeader(iCol, listLockerCondition);

            /* generate employee attendance report's data */
            Cell cellEmpData = new Cell("");
            int iLockers = 0;
            int iNokeys = 0;
            
            for (int i = 0; i < listLocation.size(); i ++) {
                cellEmpData = new Cell(new Chunk(String.valueOf(i + 1) ,fontContent));
                cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                cellEmpData.setBackgroundColor(whiteColor);
                cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    tableEmpPresence.addCell(cellEmpData);
                    
                cellEmpData = new Cell(new Chunk(String.valueOf(listLocation.get(i)) ,fontContent));
                cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                cellEmpData.setBackgroundColor(whiteColor);
                cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    tableEmpPresence.addCell(cellEmpData);
                    
                cellEmpData = new Cell(new Chunk(String.valueOf(listCount.get(i)) ,fontContent));
                cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                cellEmpData.setBackgroundColor(whiteColor);
                cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    tableEmpPresence.addCell(cellEmpData);
                    
                iLockers += Integer.parseInt(String.valueOf(listCount.get(i)));
                
                int LC = 0;
                for (int j = 0; j < listLockerCondition.size(); j++) {
                    LockerCondition lockerCondition = (LockerCondition) listLockerCondition.get(j);
                    LC = SessLocker.getLockerConditionCount(String.valueOf(listLocation.get(i)), String.valueOf(lockerCondition.getCondition()));
                    arrLC[i][j] = LC;
                    
                    cellEmpData = new Cell(new Chunk(String.valueOf(LC) ,fontContent));
                    cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                    cellEmpData.setBackgroundColor(whiteColor);
                    cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                        tableEmpPresence.addCell(cellEmpData);
                }
                    
                cellEmpData = new Cell(new Chunk(String.valueOf(SessLocker.getLockerNoKeys(String.valueOf(listLocationId.get(i)))) ,fontContent));
                cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                cellEmpData.setBackgroundColor(whiteColor);
                cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    tableEmpPresence.addCell(cellEmpData);
                iNokeys += SessLocker.getLockerNoKeys(String.valueOf(listLocationId.get(i)));
            }

            cellEmpData = new Cell(new Chunk("" ,fontContent));
            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpData.setBackgroundColor(whiteColor);
            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                tableEmpPresence.addCell(cellEmpData);

            cellEmpData = new Cell(new Chunk(" TOTAL" ,fontContent));
            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpData.setBackgroundColor(whiteColor);
            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                tableEmpPresence.addCell(cellEmpData);

            cellEmpData = new Cell(new Chunk(String.valueOf(iLockers) ,fontContent));
            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpData.setBackgroundColor(whiteColor);
            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                tableEmpPresence.addCell(cellEmpData);

            int temp = 0;
            for (int k = 0; k < listLockerCondition.size(); k++) {
                temp = 0;
                for (int m = 0; m < listLocation.size(); m++) {
                    temp += arrLC[m][k];
                }
                cellEmpData = new Cell(new Chunk(String.valueOf(temp) ,fontContent));
                cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
                cellEmpData.setBackgroundColor(whiteColor);
                cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                    tableEmpPresence.addCell(cellEmpData);
            }

            cellEmpData = new Cell(new Chunk(String.valueOf(iNokeys) ,fontContent));
            cellEmpData.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpData.setBackgroundColor(whiteColor);
            cellEmpData.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
                tableEmpPresence.addCell(cellEmpData);

            document.add(tableEmpPresence);
        }
        catch(DocumentException de) {
            System.err.println(de.getMessage());
            de.printStackTrace();
        }

        /* closing the document */
        document.close();

        /* we have written the pdfstream to a ByteArrayOutputStream, now going to write this outputStream to the ServletOutputStream
		 * after we have set the contentlength
         */
        response.setContentType("application/pdf");
        response.setContentLength(baos.size());
        ServletOutputStream out = response.getOutputStream();
        baos.writeTo(out);
        out.flush();
    }


    /**
    * this method used to create header table
    */
    public static Table getTableHeader(int iCol, Vector listLockerCondition) throws BadElementException, DocumentException {

           Table tableEmpPresence = new Table(4 + iCol);
           tableEmpPresence.setCellpadding(1);
           tableEmpPresence.setCellspacing(1);
           tableEmpPresence.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
	   //int widthHeader[] = {10, 10, 10, 10, 10, 10, 10, 10};
    	   //tableEmpPresence.setWidths(widthHeader);
           int[] widthHeader = new int[4+iCol];
           
           widthHeader[0] = 2;
           widthHeader[1] = 15;
           widthHeader[2] = 5;
           for (int i = 0; i < iCol; i++) {
               widthHeader[i + 3] = 5;
           }
           widthHeader[iCol + 3] = 5;
           tableEmpPresence.setWidths(widthHeader);
           
           tableEmpPresence.setWidth(100);

           Cell cellEmpPresence = new Cell(new Chunk(" NO.",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
           cellEmpPresence.setRowspan(2);
           cellEmpPresence.setBackgroundColor(summaryColor);
         	tableEmpPresence.addCell(cellEmpPresence);

           cellEmpPresence = new Cell(new Chunk(" LOCATION",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
           cellEmpPresence.setRowspan(2);
           cellEmpPresence.setBackgroundColor(summaryColor);
         	tableEmpPresence.addCell(cellEmpPresence);

           cellEmpPresence = new Cell(new Chunk(" TOTAL LOCKERS",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
           cellEmpPresence.setRowspan(2);
           cellEmpPresence.setBackgroundColor(summaryColor);
         	tableEmpPresence.addCell(cellEmpPresence);

           cellEmpPresence = new Cell(new Chunk(" CONDITION",fontContent));
           cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_CENTER);
           cellEmpPresence.setColspan(iCol);
           cellEmpPresence.setRowspan(1);
           cellEmpPresence.setBackgroundColor(summaryColor);
         	tableEmpPresence.addCell(cellEmpPresence);


            cellEmpPresence = new Cell(new Chunk(" NO KEYS",fontContent));
            cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
            cellEmpPresence.setRowspan(2);
            cellEmpPresence.setBackgroundColor(summaryColor);
          	tableEmpPresence.addCell(cellEmpPresence);

            for (int i = 0; i < listLockerCondition.size(); i++) {
                LockerCondition lockerCondition = (LockerCondition) listLockerCondition.get(i);
                cellEmpPresence = new Cell(new Chunk(lockerCondition.getCondition(),fontContent));
                cellEmpPresence.setHorizontalAlignment(Cell.ALIGN_LEFT);
                cellEmpPresence.setColspan(1);
                cellEmpPresence.setRowspan(1);
                cellEmpPresence.setBackgroundColor(summaryColor);
                    tableEmpPresence.addCell(cellEmpPresence);
            }

            return tableEmpPresence;
    }

}

