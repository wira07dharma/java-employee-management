/* Generated by Together */

package com.dimata.util;
import com.dimata.harisma.entity.attendance.PstAlStockManagement;
import com.dimata.qdep.db.DBHandler;
import com.dimata.qdep.db.DBResultSet;
import java.sql.ResultSet;
import java.util.*;

public class DateCalc {
    
    public static final  long DAY_MILLI_SECONDS =  86400000;
    public static final  long SECONDS_MILLI_SECONDS =  1000;
    public static final  long MINUTES_MILLI_SECONDS =  60000;
    public static final  long HOURS_MILLI_SECONDS 	=  3600000;

    public static long dayDifference(java.util.Date dateFromX, java.util.Date dateToX)
        {
           //System.out.println("dateFrom.getTime() : "+dateFrom.getTime());
           //System.out.println("dateTo.getTime() : "+dateTo.getTime());
           java.util.Date dateFrom = new Date(dateFromX.getTime());
           java.util.Date dateTo = new Date(dateToX.getTime());
           
           
           dateFrom.setHours(12);
           dateFrom.setMinutes(0);
           dateFrom.setSeconds(0);
           dateTo.setHours(12);
           dateTo.setMinutes(0);
           dateTo.setSeconds(0);                                 
           
           long lnTemp0 =  dateTo.getTime() - dateFrom.getTime(); // get the time in milli seconds

           //System.out.println("lnTemp0 : "+lnTemp0);
           long lnTemp1 =  lnTemp0 / DAY_MILLI_SECONDS;  // get number of days

           if( (lnTemp0 % DAY_MILLI_SECONDS) > 0)
           {
              lnTemp1++; // add
           }
           return lnTemp1;
        }
/**
 * create by satrya
 * keterangan: menjumlahkan range month
 * @param dateFromX
 * @param dateToX
 * @return 
 */  
public static int monthDifference(java.util.Date dateFromX, java.util.Date dateToX){
    DBResultSet dbrs = null;
    int month=0;
    if(dateFromX==null && dateToX==null){
        return 0;
    }
        String stSQL = "SELECT 12 * (YEAR('"+Formater.formatDate(dateToX, "yyyy-MM-dd") +"')" 
                        + " - YEAR('"+Formater.formatDate(dateFromX, "yyyy-MM-dd") +"')) "
                        + " + (MONTH('"+Formater.formatDate(dateToX, "yyyy-MM-dd") +"') "
                        + " - MONTH('"+Formater.formatDate(dateFromX, "yyyy-MM-dd") +"')) AS months";
        try
        {          
            dbrs = DBHandler.execQueryResult(stSQL);
            ResultSet rs = dbrs.getResultSet();            
            while(rs.next())
            {
                month = rs.getInt("months");
                break;
            }
        }
        catch(Exception e)
        {
            System.out.println( "monthDifference exc : " + e.toString());            
        }
        finally
        {
            DBResultSet.close(dbrs);
        }
        return month;
    
}

    public static float workDayDifference(Date dateFrom, Date dateTo, float oneWorkdayHr )
        {
            //update by satrya 2013-01-22
            // ini di update karena jika user melakukan AL tgl 22 januari 23:00 s/d 23 january 00:00
//            Calendar calFrom = Calendar.getInstance();
//            Calendar calTo = Calendar.getInstance();
//            calFrom.set(dateFrom.getYear(), dateFrom.getMonth(), dateFrom.getDate(), dateFrom.getHours(), dateFrom.getMinutes());
//            calTo.set(dateTo.getYear(), dateTo.getMonth(), dateTo.getDate(), dateTo.getHours(), dateTo.getMinutes());
            
            
//           long lnTemp0 =  calTo.getTimeInMillis() - calFrom.getTimeInMillis(); // get the time in milli seconds
            long lnTemp0 = dateTo.getTime() - dateFrom.getTime();

           //System.out.println("lnTemp0 : "+lnTemp0);
           long lnTemp1 =  (lnTemp0 / DAY_MILLI_SECONDS);  // get number of days
           float WDDiff = (float) lnTemp1;
           if( (lnTemp0 % DAY_MILLI_SECONDS) > 0)
           {
              WDDiff = WDDiff +  ((float) (lnTemp0 % DAY_MILLI_SECONDS)) / (60f*60f*oneWorkdayHr*1000); // devided by oneWorkdayHr = standard 1 workday
           }
           return WDDiff;
        }
    
    //update by devin
     public static float workDayDifferenceLl(Date dateFrom, Date dateTo, float oneWorkdayHr )
        {
            //update by satrya 2013-01-22
            // ini di update karena jika user melakukan AL tgl 22 januari 23:00 s/d 23 january 00:00
//            Calendar calFrom = Calendar.getInstance();
//            Calendar calTo = Calendar.getInstance();
//            calFrom.set(dateFrom.getYear(), dateFrom.getMonth(), dateFrom.getDate(), dateFrom.getHours(), dateFrom.getMinutes());
//            calTo.set(dateTo.getYear(), dateTo.getMonth(), dateTo.getDate(), dateTo.getHours(), dateTo.getMinutes());


//           long lnTemp0 =  calTo.getTimeInMillis() - calFrom.getTimeInMillis(); // get the time in milli seconds
            long lnTemp0 = dateTo.getTime() - dateFrom.getTime();
            lnTemp0=lnTemp0+DAY_MILLI_SECONDS;

           //System.out.println("lnTemp0 : "+lnTemp0);
           long lnTemp1 =  (lnTemp0 / DAY_MILLI_SECONDS);  // get number of days
           float WDDiff = (float) lnTemp1;
           
         
           if( (lnTemp0 % DAY_MILLI_SECONDS) > 0)
           {
              WDDiff = WDDiff +  ((float) (lnTemp0 % DAY_MILLI_SECONDS)) / (60f*60f*oneWorkdayHr*1000); // devided by oneWorkdayHr = standard 1 workday
           }
           return WDDiff;
        }
    


	public static long timeDifference(Date dateFrom, Date dateTo)
        {
           long lnTemp0 =  dateTo.getTime() - dateFrom.getTime(); // get the time in milli seconds
           lnTemp0 = (lnTemp0/ 1000L)*1000L; // menghilangkan faktor milli second
           return  lnTemp0;
        }
        
        /**
         * Mencari panjanganya waktu intersection antara  dua pasang waktu
         * 
         * @param startDateTime
         * @param endDateTime
         * @param breakOut
         * @param breakIn
         * @return 
         */
        public static long timeIntersection(Date startDateTime, Date endDateTime, Date breakOut, Date breakIn){
                long dif1 = 0L;
                //update by satrya 2013-01-22
                // ada kasus jika karyawan melakukan tersebut cuti tgl 22 january 2013 23:00 s/d 23 january 00:00 
                int intYearStart=0;
                int intMonthStart=0;
                int intDateStart=0;
                 int intYearEnd=0;
                 int intMonthEnd=0;
                 int intDateEnd=0;
                try{
                     intYearStart = startDateTime.getYear();
                     intMonthStart = startDateTime.getMonth();
                     intDateStart = startDateTime.getDate();
                     
                     intYearEnd = endDateTime.getYear();
                     intMonthEnd = endDateTime.getMonth();
                     intDateEnd = endDateTime.getDate();
                     //hanya untuk  test
                     
                }catch(Exception ex){
                    System.out.println("Exception timeIntersection "+ex);
                }
//                Date tStart = new Date(100, 1, 1, startDateTime.getHours() , startDateTime.getMinutes(), startDateTime.getSeconds());                
//                Date tEnd = new Date(100, 1, 1, endDateTime.getHours() , endDateTime.getMinutes(), endDateTime.getSeconds());                
//                Date sBreakOut = new Date(100, 1, 1, breakOut.getHours() , breakOut.getMinutes(), breakOut.getSeconds());
//                Date sBreakIn = new Date(100, 1, 1,breakIn.getHours() , breakIn.getMinutes(), breakIn.getSeconds());    
                Date tStart = new Date(intYearStart==0? 100:intYearStart, intMonthStart==0? 1:intMonthStart, intDateStart==0? 1:intDateStart, startDateTime.getHours() , startDateTime.getMinutes(), startDateTime.getSeconds());                
                Date tEnd = new Date(intYearEnd==0? 100 : intYearEnd, intMonthEnd==0?1 : intMonthEnd, intDateEnd==0? 1: intDateEnd, endDateTime.getHours() , endDateTime.getMinutes(), endDateTime.getSeconds());                
                
                
                //logikanya di anggap tidak ada istirahat cross day
                Date sBreakOut = new Date(intYearStart==0? 100:intYearStart, intMonthStart==0? 1:intMonthStart, intDateStart==0? 1:intDateStart, breakOut.getHours() , breakOut.getMinutes(), breakOut.getSeconds());
                Date sBreakIn = new Date(intYearStart==0? 100:intYearStart, intMonthStart==0? 1:intMonthStart, intDateStart==0? 1:intDateStart, breakIn.getHours() , breakIn.getMinutes(), breakIn.getSeconds());                                
                
                //jika schedule istirahatnya pukul 00:00:00
                if(breakOut.getHours()==0 &&  breakIn.getHours()==0 && breakOut.getMinutes()==0 && breakIn.getMinutes()==0){
                    sBreakOut = new Date(intYearStart==0? 100:intYearStart, intMonthStart==0? 1:intMonthStart, intDateStart==0? 1:intDateStart, breakOut.getHours() , breakOut.getMinutes(), breakOut.getSeconds());
                    sBreakIn = new Date(intYearStart==0? 100:intYearStart, intMonthStart==0? 1:intMonthStart, intDateStart==0? 1:intDateStart, breakOut.getHours() , breakOut.getMinutes(), breakOut.getSeconds());
                }
                
                if( tStart.getTime()<= sBreakOut.getTime() &&
                    tEnd.getTime() > sBreakOut.getTime() &&  tEnd.getTime()<= sBreakIn.getTime() ){
                    dif1 = tEnd.getTime() - sBreakOut.getTime() ;
                }else{
                     if( tStart.getTime()<= sBreakOut.getTime() &&
                        tEnd.getTime() >= sBreakIn.getTime() ){
                        dif1 = sBreakIn.getTime()-sBreakOut.getTime() ;
                    }else{
                         if( tStart.getTime()>= sBreakOut.getTime() &&
                            tEnd.getTime() <= sBreakIn.getTime() ){
                            dif1 = tEnd.getTime() - tStart.getTime() ;
                        }else{
                            if( tStart.getTime()>= sBreakOut.getTime() &&
                                tEnd.getTime() >= sBreakIn.getTime() && tStart.getTime()<sBreakIn.getTime() ){
                                dif1 = sBreakIn.getTime() - tStart.getTime() ;
                            }                             
                        }                       
                    }                       
                }
            return dif1;
        }


    }

