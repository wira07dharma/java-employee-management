/* Generated by Together */

package com.dimata.system.entity.system;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.util.Date;
import com.dimata.qdep.db.*;
import com.dimata.qdep.entity.*;
import com.dimata.util.Formater;
/***/

public class PstSystemProperty extends DBHandler implements I_DBInterface, I_DBType, I_Persintent
{
    /**
     *	Table Map
     */
   
    public static final String TBL_SYSPROP = "hr_system_property";//"SYSTEM_PROPERTY";
    
    public static final int FLD_SYSPROP_ID 	= 0;
    public static final int FLD_NAME    = 1;
    public static final int FLD_VALUE 	= 2;
    public static final int FLD_VALTYPE = 3; 
    public static final int FLD_DISTYPE = 4;
    public static final int FLD_GROUP	= 5;
    public static final int FLD_NOTE    = 6;
    
    public static String[] fieldNames = {
        "SYSPROP_ID",
        "NAME", 
        "VALUEPROP", 
        "VALTYPE",
        "DISTYPE",
        "GROUPPROP",
        "NOTE"
    };
    
    public static int[] fieldTypes = {
        TYPE_PK + TYPE_LONG+ TYPE_ID,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_STRING
    };
    
    //	Other constanta goes here (if any)
    
    public static String[] valueTypes = { "STRING", "TEXT","NUMBER" };    
    public static String[] displayTypes = { "SINGLE TEXT","MULTI TEXT","DROP DOWN" };

    public static Hashtable<String, SystemProperty> systemProperties = null;
    /*Default if system property not exist */
    public static final String SYS_NOT_INITIALIZED = "Not initialized";

    /**
     *	Contractor
     */
    public PstSystemProperty()    
    {   
    }
    
    
    public PstSystemProperty(int i) throws DBException {
        super(new PstSystemProperty());
    }
    
    
    public PstSystemProperty(String sOid) throws DBException 
    {
        super(new PstSystemProperty(0));
        if(!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
    }
    
    
    public PstSystemProperty(long lOid) throws DBException 
    {
        super(new PstSystemProperty(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        }catch(Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        
        if(!locate(sOid))
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        else
            return;
        
    }
    
    
    /**
     *	Implemanting I_Entity interface methods
     */
    public int getFieldSize() {
        return fieldNames.length;
    }
    
    public String getTableName() {
        return TBL_SYSPROP;
    }
    
    public String[] getFieldNames() {
        return fieldNames;
    }
    
    public int[] getFieldTypes() {
        return fieldTypes;
    }
    
    public String getPersistentName() {                
        return new PstSystemProperty().getClass().getName();
    }
    
    /**
     *	Implemanting I_DBInterface interface methods
     */
    public long fetch(Entity ent) {        
        SystemProperty sysProp = PstSystemProperty.fetch(ent.getOID());
        ent = (Entity)sysProp;
        return sysProp.getOID();         
    }
    

    public long insert(Entity ent) {
        return PstSystemProperty.insert((SystemProperty) ent);
    }
    
    public long update(Entity ent) {
        return update((SystemProperty) ent);
    }
    
    public long delete(Entity ent) {
        return delete((SystemProperty) ent);
    }
    
    
    public static SystemProperty fetch(long oid) 
    {
        SystemProperty sysProp = new SystemProperty();
        try {
            PstSystemProperty pSystemProperty = new PstSystemProperty(oid);
            sysProp.setOID(oid);
            sysProp.setName(pSystemProperty.getString(FLD_NAME));
            sysProp.setValue(pSystemProperty.getString(FLD_VALUE));
            sysProp.setValueType(pSystemProperty.getString(FLD_VALTYPE));
            sysProp.setDisplayType(pSystemProperty.getString(FLD_DISTYPE));
            sysProp.setGroup(pSystemProperty.getString(FLD_GROUP));
            sysProp.setNote(pSystemProperty.getString(FLD_NOTE));
        }
        catch(DBException e) {
            System.out.println(e);
        }
        return sysProp;
    }
    
    
    public static long insert(SystemProperty sysProp)
    {
        try{
            PstSystemProperty pSystemProperty = new PstSystemProperty(0);
            pSystemProperty.setString(FLD_NAME, sysProp.getName());
            pSystemProperty.setString(FLD_VALUE, sysProp.getValue());
            pSystemProperty.setString(FLD_VALTYPE, sysProp.getValueType());
            pSystemProperty.setString(FLD_DISTYPE, sysProp.getDisplayType());
            pSystemProperty.setString(FLD_GROUP, sysProp.getGroup());
            pSystemProperty.setString(FLD_NOTE, sysProp.getNote());          
                        
            pSystemProperty.insert();            
            sysProp.setOID(pSystemProperty.getlong(FLD_SYSPROP_ID));
            return sysProp.getOID();
        }
        catch(DBException e) {
            System.out.println(e);
        }
        return 0;  
    }
    
    
    public static long update(SystemProperty sysProp)
    {
        if(sysProp.getOID() != 0)
        {
            try {
                PstSystemProperty pSystemProperty = new PstSystemProperty(sysProp.getOID());
                pSystemProperty.setString(FLD_NAME, sysProp.getName());
                pSystemProperty.setString(FLD_VALUE, sysProp.getValue());
                pSystemProperty.setString(FLD_VALTYPE, sysProp.getValueType());
                pSystemProperty.setString(FLD_DISTYPE, sysProp.getDisplayType());
                pSystemProperty.setString(FLD_GROUP, sysProp.getGroup());
                pSystemProperty.setString(FLD_NOTE, sysProp.getNote()); 
                
                pSystemProperty.update();     
                return sysProp.getOID();
            }catch(Exception e) {
                System.out.println(e);
            }            
        }
        return 0;
    }
    
    
    public static long delete(long oid)
    {
        try {
            PstSystemProperty pSystemProperty = new PstSystemProperty(oid);
            pSystemProperty.delete();
            return oid;
       }catch(Exception e) {
            System.out.println(e);            
        }
        return 0;
    } 
    

    
    
    public static Vector listAll()
    {
        return list(0, 0, null,null);
    }
    
    public static Vector listByGroup(String gr)
    {
        String whereClause = fieldNames[FLD_GROUP] + " = '"+ gr + "'";
        String orderClause = fieldNames[FLD_NAME];
        return list(0, 0, whereClause, orderClause);
    }

    
    
    public static Vector listGroups()
    {
        Vector lists = new Vector();        
        try {
        
            String sql = "SELECT DISTINCT("+ FLD_GROUP +") FROM " + TBL_SYSPROP;
            ResultSet rs = execQuery(sql);

            while(rs.next()) {                
                lists.add(rs.getString(1));
            }
            rs.close();
            return lists;

       }catch(Exception e) {
            System.out.println(e);            
       }
       return new Vector();
    }    
    
    public static SystemProperty fetchByName(String sysPropName){
        Vector vct= list(0,1, fieldNames[FLD_NAME]+"=\""+sysPropName+"\"","");
        if(vct!=null && vct.size()>0){
            return (SystemProperty) vct.get(0);
        }
        return new SystemProperty();
    }
    
    public static Vector list(int limitStart, int recordToGet, String whereClause, String order)
    {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
        
            String sql = "SELECT * FROM " + TBL_SYSPROP + " ";
            
            if(whereClause != null && whereClause.length() > 0)
                sql = sql + " WHERE " + whereClause;

            if(order != null && order.length() > 0)
                sql = sql + " ORDER BY " + order;
            
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL :
						if(limitStart == 0 && recordToGet == 0)
							sql = sql + "";
						else
							sql = sql + " LIMIT " + limitStart + ","+ recordToGet ;

                        break;

                 case DBHandler.DBSVR_POSTGRESQL :
						if(limitStart == 0 && recordToGet == 0)
							sql = sql + "";
						else
							sql = sql + " LIMIT " +recordToGet + " OFFSET "+ limitStart ;

                        break;

                 case DBHandler.DBSVR_SYBASE :
                    	break;

                 case DBHandler.DBSVR_ORACLE :
                    	break;

                 case DBHandler.DBSVR_MSSQL :
                    	break;

                default:
                    ;
            }
          //  System.out.println(sql);
            dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();

            while(rs.next()) {
                SystemProperty sysProp = new SystemProperty();
                resultToObject(rs, sysProp);
                lists.add(sysProp);
            }
            rs.close();
            return lists;

       }catch(Exception e) {
            System.out.println("get >>>>> "+e);
       }
       return new Vector();
    }
//update by satrya 2013-02-15
    /**
     * 
     * @param name
     * @return 
     */
     public static long getPropertyLongbyName(String name){      
        String val = getValueByName(name);
        long valL=0L;
        if(val!=null){
            try{
                valL = Long.parseLong(val);
            }catch(Exception exc){ 
                valL=0;
            }
        }
        return valL;
    }
     
    public static Date getPropertyDatebyName(String sysPropName, String dateFormat){
        String val = getValueByName(sysPropName);
        Date valD=null;
        if(val!=null){
            try{
                valD = Formater.formatDate(val, dateFormat);
            }catch(Exception exc){ 
              System.out.println("Exception getPropertyDatebyName( "+sysPropName+", "+dateFormat+") >>> "+ exc);
            }
        }
        return valD;
    }
     
    public static Hashtable<String, String> hSystemPropNoFound= new Hashtable();
    public static String getValueByName(String name)
    {
        String val = SYS_NOT_INITIALIZED;
        
        if(systemProperties==null || systemProperties.size()<10  ){
            loadFromDbToHash(com.dimata.system.session.system.SessSystemProperty.getvSysProp());
        }
        
        if(systemProperties!=null){            
           SystemProperty oSys = systemProperties.get(name);
           if(oSys!=null){
               return oSys.getValue();
           }           
        }
        hSystemPropNoFound.put(name, name);
        
        DBResultSet dbrs = null;
        try {        
            String sql = "SELECT * FROM "+ TBL_SYSPROP +" WHERE " + fieldNames[FLD_NAME] + "='" + name+"'";

          //  System.out.println("SYSTEM : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();

            while(rs.next()) {   
                SystemProperty sysProp = new SystemProperty();
                resultToObject(rs, sysProp);
                systemProperties.put(sysProp.getName(),sysProp);
                val=sysProp.getValue(); //val = rs.getString(1);
                break;
            }
            rs.close();
            return val;

       }catch(Exception e) {
            System.out.println(e);            
       }
       return val;
    }
    
    public static String getValueByNameWithStringNull(String name)
    {
        String val = "";
        DBResultSet dbrs = null;
        try {        
            String sql = "SELECT "+ fieldNames[FLD_VALUE] +" FROM "+ TBL_SYSPROP +" WHERE " + fieldNames[FLD_NAME] + "='" + name+"'";

          //  System.out.println("SYSTEM : "+sql);
            dbrs = DBHandler.execQueryResult(sql);
			ResultSet rs = dbrs.getResultSet();

            while(rs.next()) {                
                val = rs.getString(1);
                break;
            }
            rs.close();
            return val;

       }catch(Exception e) {
            System.out.println(e);            
       }
       return val;
    }
    
    
    public static int getCount()
    {
        int count = 0;
        try {        
            String sql = "SELECT COUNT("+ fieldNames[FLD_SYSPROP_ID] +") FROM " + TBL_SYSPROP;
            ResultSet rs = execQuery(sql);

            while(rs.next()) {                
                count = rs.getInt(1);
                break;
            }
            rs.close();
            return count;

       }catch(Exception e) {
            System.out.println(e);            
       }
       return 0;
    }
    

    private static void resultToObject(ResultSet rs, SystemProperty sysProp) {
        try {
            sysProp.setOID(rs.getLong(FLD_SYSPROP_ID + 1));
            sysProp.setName(rs.getString(FLD_NAME + 1));
            sysProp.setValue(rs.getString(FLD_VALUE + 1));
            sysProp.setValueType(rs.getString(FLD_VALTYPE + 1));
            sysProp.setDisplayType(rs.getString(FLD_DISTYPE + 1));
            sysProp.setGroup(rs.getString(FLD_GROUP + 1));
            sysProp.setNote(rs.getString(FLD_NOTE + 1));
        
        }catch(Exception e){
            System.out.println("resultToObject() " + e.toString());
        }
    }
    
     /**
     * Mencari group dari testCaseItem di system property dengan nama sysPropName.
     * Menggunakan fungsi parseGroup untuk memisahkan group dan data dalam group
     * contoh :  2004=226/2001=2002=2003  => menjadi dua group yang dipisah tanda / 
     * group pertama :  (0) 2004  (1) 226  group kedua (0)2001 (1)2002 (2)2003
     * jika testCaseItem = 2001 , maka yang akan direturn adalah Vector dengan String dari group kedua
     * @param sysPropName
     * @param testCaseItem
     * @return array of the group or array with no member
     */
    public static String[] getSystemPropertyGroup(String sysPropName, String testCaseItem) {
        String joinDept = PstSystemProperty.getValueByName(sysPropName);
        Vector depGroup = com.dimata.util.StringParser.parseGroup(joinDept);
        int grpIdx = -1;
        int maxGrp = depGroup == null ? 0 : depGroup.size();
        int countIdx = 0;
        int MAX_LOOP = 10;
        int curr_loop = 0;
        do { // find group department belonging to curretn user base in departmentOid
            curr_loop++;
            String[] grp = (String[]) depGroup.get(countIdx);
            for (int g = 0; g < grp.length; g++) {
                String comp = grp[g];
                if (comp.trim().compareToIgnoreCase("" + testCaseItem) == 0) {
                    grpIdx = countIdx;   // A ha .. found here 
                    return grp;
                }
            }
            countIdx++;
        } while ((grpIdx < 0) && (countIdx < maxGrp) && (curr_loop < MAX_LOOP)); // if found then exit       
        String[] temp={};
        return temp;
    }
    
    public static Vector getSystemPropertyGroupVector(String sysPropName, String testCaseItem) {
        String rslt[] = getSystemPropertyGroup(sysPropName, testCaseItem);
        Vector vRslt = new Vector();
        if(rslt!=null && rslt.length>0){
            for(int i=0;i<rslt.length;i++){
                vRslt.add(rslt[i]);
            }
        }
        return vRslt;
    }
    
    public static int loadFromDbToHash(){
       return   loadFromDbToHash(com.dimata.system.session.system.SessSystemProperty.getvSysProp());  
    }
    
    public static int loadFromDbToHash(Vector<SystemProperty> systemPropNames ){
        if(systemProperties==null){
            systemProperties = new Hashtable<String, SystemProperty>();
        }else{
            systemProperties.clear();
        }
        int count =0;
        if(systemPropNames!=null && systemPropNames.size()>0){
           String strWhere = PstSystemProperty.fieldNames[PstSystemProperty.FLD_NAME]+" IN (";
           for(int ip=0;ip< systemPropNames.size();ip++){                        
                strWhere = strWhere + "\'" +systemPropNames.get(ip).getName()+"'";
                if(ip<(systemPropNames.size()-1)){
                     strWhere = strWhere + "," ;
                }
           }
           strWhere = strWhere + ")";
            Vector vSys=PstSystemProperty.list(0, 10000, strWhere, "");
            if(vSys!=null && vSys.size()>0){
             for(int ip=0;ip< vSys.size();ip++){      
               SystemProperty aSysProp = (SystemProperty) vSys.get(ip);
                if(aSysProp!=null){
                     systemProperties.put(aSysProp.getName(), aSysProp);
                    }
             }
             count=vSys.size();
            }
             
        }
        return count;
    }
    
} // end of PstSystemProperty
